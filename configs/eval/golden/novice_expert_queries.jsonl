{"query": "What is DSPy?", "answer": "DSPy is a framework for algorithmically optimizing language model prompts and weights.", "slice_tags": ["novice", "single_hop", "structured"], "sub_claims": ["DSPy is a framework", "DSPy optimizes prompts", "DSPy optimizes weights"], "expected_spans": ["DSPy", "framework", "prompts", "weights"], "difficulty": "novice"}
{"query": "How does DSPy's automatic optimization work?", "answer": "DSPy uses optimizers to automatically tune prompts and model weights based on validation metrics.", "slice_tags": ["expert", "single_hop", "unstructured"], "sub_claims": ["DSPy uses optimizers", "optimizers tune prompts automatically", "optimization uses validation metrics"], "expected_spans": ["optimizers", "automatic", "validation"], "difficulty": "expert"}
{"query": "What is the difference between CoT and few-shot prompting in DSPy?", "answer": "Chain-of-Thought (CoT) generates intermediate reasoning steps, while few-shot provides examples. DSPy can optimize both techniques.", "slice_tags": ["expert", "multi_hop", "unstructured"], "sub_claims": ["CoT generates reasoning steps", "few-shot provides examples", "DSPy optimizes both"], "expected_spans": ["Chain-of-Thought", "reasoning", "examples", "optimize"], "difficulty": "expert"}
{"query": "How do I install DSPy?", "answer": "Install DSPy using pip: pip install dspy", "slice_tags": ["novice", "single_hop", "structured"], "sub_claims": ["install using pip", "command is pip install dspy"], "expected_spans": ["pip install dspy"], "difficulty": "novice"}
{"query": "What are DSPy signatures and how do they work with modules?", "answer": "DSPy signatures define input/output specifications for language model tasks. Modules implement these signatures and can be composed into pipelines.", "slice_tags": ["expert", "multi_hop", "unstructured"], "sub_claims": ["signatures define input/output specs", "modules implement signatures", "modules can be composed"], "expected_spans": ["signatures", "input/output", "modules", "composed"], "difficulty": "expert"}
