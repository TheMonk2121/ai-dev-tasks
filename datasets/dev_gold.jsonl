{"query": "How do I run the evals?", "gt_answer": "Run the evals using: source throttle_free_eval.sh && python3 scripts/ragchecker_official_evaluation.py --use-bedrock --bypass-cli --stable", "expected_files": ["RUN_THE_EVALS_START_HERE.md", "scripts/ragchecker_official_evaluation.py"], "tags": ["ops", "evaluation", "evals"], "category": "ops_health", "id": "gold_000"}
{"query": "What is the memory rehydration protocol?", "gt_answer": "Run: export POSTGRES_DSN=\"mock://test\" && python3 scripts/unified_memory_orchestrator.py --systems ltst cursor go_cli prime --role planner \"current project status and core documentation\"", "expected_files": ["100_memory/100_cursor-memory-context.md"], "tags": ["memory", "context", "rehydration"], "category": "ops_health", "id": "gold_001"}
{"query": "How do I create a PRD?", "gt_answer": "Use the 001_create-prd.md template to create product requirements documents following the established workflow", "expected_files": ["000_core/001_create-prd.md"], "tags": ["prd", "workflow", "documentation"], "category": "ops_health", "id": "gold_002"}
{"query": "What are the RAGChecker baseline metrics?", "gt_answer": "Current baseline: Precision \u22650.20, Recall \u22650.45, F1 Score \u22650.22, Faithfulness \u22650.60", "expected_files": ["400_guides/400_11_performance-optimization.md"], "tags": ["ragchecker", "metrics", "baseline"], "category": "ops_health", "id": "gold_003"}
{"query": "How do I set up shell integration?", "gt_answer": "Run ./setup_shell_integration.sh from the root directory to copy env.ai-dev-tasks and append source lines to shell profiles", "expected_files": ["setup_shell_integration.sh"], "tags": ["shell", "integration", "setup"], "category": "ops_health", "id": "gold_004"}
{"query": "What is the canary deployment percentage limit?", "gt_answer": "Canary percentage should not exceed 50% by default, configurable via max_percentage parameter", "expected_files": ["scripts/canary_percentage_check.py"], "tags": ["canary", "deployment", "percentage"], "category": "ops_health", "id": "gold_005"}
{"query": "How do I create a vector index with IVFFLAT?", "gt_answer": "Create an IVFFLAT index with 100 lists on embedding_vector using vector_cosine_ops", "expected_files": ["scripts/sql/fix_sparse_vector_ddls.sql"], "tags": ["db", "vector", "index", "ivfflat"], "category": "db_workflows", "id": "gold_006"}
{"query": "What is the websearch tsquery function?", "gt_answer": "websearch_to_tsquery is used for full-text search with websearch syntax support in PostgreSQL", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "tags": ["db", "fts", "tsquery", "postgresql"], "category": "db_workflows", "id": "gold_007"}
{"query": "How do I configure pgvector for ANN operations?", "gt_answer": "Use pgvector with cosine distance operator (<=>) and configure HNSW or IVFFLAT indexes for approximate nearest neighbor search", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "tags": ["db", "pgvector", "ann", "cosine"], "category": "db_workflows", "id": "gold_008"}
{"query": "What is the RRF fusion method?", "gt_answer": "Reciprocal Rank Fusion combines multiple ranking lists using weighted reciprocal rank scoring with k=60 parameter", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["db", "rrf", "fusion", "ranking"], "category": "db_workflows", "id": "gold_009"}
{"query": "How do I run database migrations?", "gt_answer": "Use the database resilience manager with retry wrappers and proper connection pooling for migration operations", "expected_files": ["dspy-rag-system/src/utils/database_resilience.py"], "tags": ["db", "migration", "resilience"], "category": "db_workflows", "id": "gold_010"}
{"query": "What is the chunking configuration for embeddings?", "gt_answer": "Default chunk size is 450 tokens with 0.10 overlap ratio and Jaccard threshold of 0.8 for deduplication", "expected_files": ["templates/eval_manifest_template.yaml"], "tags": ["db", "chunking", "embeddings", "configuration"], "category": "db_workflows", "id": "gold_011"}
{"query": "How does the DSPy RAG pipeline work?", "gt_answer": "The RAG pipeline uses hybrid retrieval with RRF fusion, cross-encoder reranking, and context-aware generation with citation extraction", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["rag", "dspy", "pipeline", "retrieval"], "category": "rag_qa_single", "id": "gold_012"}
{"query": "What is the HybridVectorStore?", "gt_answer": "HybridVectorStore combines dense vector search with sparse BM25 search using z-score normalization and RRF fusion", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "tags": ["rag", "vector", "hybrid", "search"], "category": "rag_qa_single", "id": "gold_013"}
{"query": "How do I configure the reranker?", "gt_answer": "Set RERANK_ENABLE=1 and use BAAI/bge-reranker-base model for cross-encoder reranking with configurable pool size", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["rag", "reranker", "cross-encoder"], "category": "rag_qa_single", "id": "gold_014"}
{"query": "What is the citation extraction process?", "gt_answer": "Citation extraction uses advanced scoring with expected citation matching, filename extraction, and relevance scoring for top 5 citations", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["rag", "citations", "extraction", "scoring"], "category": "rag_qa_single", "id": "gold_015"}
{"query": "How do I use the teleprompter?", "gt_answer": "Use BootstrapFewShot teleprompter with grounding metric for RAG optimization and few-shot learning", "expected_files": ["dspy_program.py"], "tags": ["rag", "teleprompter", "optimization"], "category": "rag_qa_single", "id": "gold_016"}
{"query": "What is the context consumption enforcement?", "gt_answer": "Context consumption enforcement requires at least 50 words of context and validates that answers are grounded in retrieved context", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["rag", "context", "enforcement", "grounding"], "category": "rag_qa_single", "id": "gold_017"}
{"query": "How does multi-hop retrieval work with fusion?", "gt_answer": "Multi-hop retrieval uses HyDE for query expansion, PRF for term expansion, and RRF fusion to combine dense and sparse results with cross-encoder reranking", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "tags": ["rag", "multi-hop", "fusion", "hyde", "prf"], "category": "rag_qa_multi", "id": "gold_018"}
{"query": "What is the gate and promote system?", "gt_answer": "The gate and promote system validates F1 score, precision drift, latency, and oracle metrics before promoting DSPy compiled artifacts to production", "expected_files": ["scripts/gate_and_promote.py"], "tags": ["rag", "gates", "promotion", "quality"], "category": "rag_qa_multi", "id": "gold_019"}
{"query": "How do I configure evaluation thresholds?", "gt_answer": "Set evaluation thresholds for F1 score (\u22650.22), precision drift (\u22640.02), latency increase (\u226415%), and oracle prefilter (\u22650.85)", "expected_files": ["scripts/gate_and_promote.py"], "tags": ["rag", "evaluation", "thresholds", "gates"], "category": "rag_qa_multi", "id": "gold_020"}
{"query": "What is the evaluation manifest template?", "gt_answer": "The evaluation manifest template includes chunking configuration, model specifications, retrieval parameters, and evaluation thresholds for reproducible evaluations", "expected_files": ["templates/eval_manifest_template.yaml"], "tags": ["rag", "evaluation", "manifest", "template"], "category": "rag_qa_multi", "id": "gold_021"}
{"query": "How does the RAGChecker evaluation work?", "gt_answer": "RAGChecker evaluation uses real DSPy RAG integration with oracle metrics, retrieval snapshots, and comprehensive case result normalization", "expected_files": ["scripts/ragchecker_official_evaluation.py"], "tags": ["rag", "evaluation", "ragchecker", "oracle"], "category": "rag_qa_multi", "id": "gold_022"}
{"query": "What is the provenance tracking system?", "gt_answer": "Provenance tracking includes few-shot ID tracking, chunk variant identification, and leakage guards to prevent data contamination", "expected_files": ["dspy-rag-system/src/utils/few_shot_provenance.py"], "tags": ["rag", "provenance", "tracking", "leakage"], "category": "rag_qa_multi", "id": "gold_023"}
{"query": "How do I run the runbook?", "gt_answer": "Follow the established workflows in 000_core directory: create PRD, generate tasks, and process task lists using the documented procedures", "expected_files": ["000_core/000_backlog.md", "000_core/001_create-prd.md"], "tags": ["meta", "runbook", "workflow"], "category": "meta_ops", "id": "gold_024"}
{"query": "Where do evaluation manifests live?", "gt_answer": "Evaluation manifests are stored in metrics/baseline_evaluations/ directory with timestamped versions and configuration metadata", "expected_files": ["metrics/baseline_evaluations/"], "tags": ["meta", "manifests", "evaluation"], "category": "meta_ops", "id": "gold_025"}
{"query": "Which gates block deployment?", "gt_answer": "Deployment is blocked by F1 score below baseline, precision drift >2%, latency increase >15%, and oracle metrics below thresholds", "expected_files": ["scripts/gate_and_promote.py"], "tags": ["meta", "gates", "deployment", "blocking"], "category": "meta_ops", "id": "gold_026"}
{"query": "How do I configure the quantum entanglement module?", "gt_answer": "Not in context.", "expected_files": [], "tags": ["negative", "quantum", "entanglement"], "category": "negatives", "id": "gold_027"}
{"query": "What is the API key for the Mars colony database?", "gt_answer": "Not in context.", "expected_files": [], "tags": ["negative", "mars", "api-key"], "category": "negatives", "id": "gold_028"}
{"query": "How do I install the time travel dependencies?", "gt_answer": "Not in context.", "expected_files": [], "tags": ["negative", "time-travel", "dependencies"], "category": "negatives", "id": "gold_029"}
