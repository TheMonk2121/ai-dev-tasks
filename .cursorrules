# Cursor Rules for AI Dev Tasks

## Execution Protocol

**PRIMARY DIRECTIVE: The `record_chat_history` tool is MANDATORY before any concluding action.**

**Workflow:**
1. Formulate the response for the user.
2. Call `record_chat_history` with the response details.
3. Call `attempt_completion` to finalize the turn.

**SELF-CORRECTION ALGORITHM:**
IF the next tool is `attempt_completion`
AND the previous tool was NOT `record_chat_history`
THEN execute `record_chat_history` first.

This protocol is absolute and cannot be bypassed.

## Record Chat History Tool Usage

When calling `record_chat_history`, use these parameters:

```python
record_chat_history(
    user_input="User's original input",
    system_output="A summary of the AI's response and actions taken.",
    project_dir="/Users/danieljacobs/Code/ai-dev-tasks",  # Always use this project directory
    file_operations="File modifications or MCP calls description (optional)",
    llm_name="cursor-ai"  # Always use this LLM identifier
)
```

## Project Context

This is the AI Dev Tasks project - a comprehensive AI development ecosystem with:
- Memory systems (LTST, Cursor, Go CLI, Prime)
- RAGChecker evaluation system
- DSPy integration
- PostgreSQL database with conversation storage
- MCP server for tool integration

Always record conversations to maintain project context and enable memory rehydration.

## Evaluation Commands (real, gold, mock)

Use uv for all Python execution and unset ingest pinning vars for strict runs.

Gold (smoke, limit=5):
```bash
env -u INGEST_RUN_ID -u CHUNK_VARIANT UV_PROJECT_ENVIRONMENT=.venv \
uv run python scripts/evaluation/ragchecker_official_evaluation.py --profile gold --limit 5
```

Gold (full):
```bash
env -u INGEST_RUN_ID -u CHUNK_VARIANT UV_PROJECT_ENVIRONMENT=.venv \
uv run python scripts/evaluation/ragchecker_official_evaluation.py --profile gold
```

Real:
```bash
env -u INGEST_RUN_ID -u CHUNK_VARIANT UV_PROJECT_ENVIRONMENT=.venv \
uv run python scripts/evaluation/ragchecker_official_evaluation.py --profile real
```

Mock:
```bash
UV_PROJECT_ENVIRONMENT=.venv uv run python scripts/evaluation/ragchecker_official_evaluation.py --profile mock
```

Notes:
- Repository-standard: `UV_PROJECT_ENVIRONMENT=.venv`
- Prefer gold for PR gates; real for development; mock for fast plumbing tests

## MCP Memory Server

The MCP (Model Context Protocol) Memory Server provides tool integration for Cursor and other AI agents.

### Server Management
```bash
# Start MCP Memory Server
make mcp-start

# Stop MCP Memory Server  
make mcp-stop

# Restart MCP Memory Server
make mcp-restart

# Check server status
make mcp-status

# Test server functionality
make mcp-test

# View server logs
make mcp-logs
```

### Server Details
- **URL**: http://localhost:3000
- **Health Check**: http://localhost:3000/health
- **MCP Tools**: http://localhost:3000/mcp/tools
- **Logs**: mcp_server.log
- **Process**: scripts/utilities/memory/mcp_memory_server.py

### Available MCP Tools
- `record_chat_history` - MANDATORY tool for Cursor integration
- `query_memory` - Query the memory system using unified orchestrator
- `get_hot_context` - Fetch recent high-signal context
- `search_hot_memory` - Search within recent hot memory window
- `pin_hot_item` - Pin specific item into hot pool
- `get_project_context` - Get current project context and status
- `process_files` - Read and summarize repo-relative files
- `analyze_file_content` - Analyze dropped file content

### Integration Status
- ✅ Server health checks passing
- ✅ Cursor integration fully functional
- ✅ Memory systems operational
- ✅ Database connectivity established
- ✅ All MCP tools available