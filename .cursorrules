# Cursor Rules for AI Dev Tasks

## Execution Protocol

**PRIMARY DIRECTIVE: The `record_chat_history` tool is MANDATORY before any concluding action.**

**Workflow:**
1. Formulate the response for the user.
2. Call `record_chat_history` with the response details.
3. Call `attempt_completion` to finalize the turn.

**SELF-CORRECTION ALGORITHM:**
IF the next tool is `attempt_completion`
AND the previous tool was NOT `record_chat_history`
THEN execute `record_chat_history` first.

This protocol is absolute and cannot be bypassed.

## Record Chat History Tool Usage

When calling `record_chat_history`, use these parameters:

```python
record_chat_history(
    user_input="User's original input",
    system_output="A summary of the AI's response and actions taken.",
    project_dir="/Users/danieljacobs/Code/ai-dev-tasks",  # Always use this project directory
    file_operations="File modifications or MCP calls description (optional)",
    llm_name="cursor-ai"  # Always use this LLM identifier
)
```

## Project Context

This is the AI Dev Tasks project - a comprehensive AI development ecosystem with:
- Memory systems (LTST, Cursor, Go CLI, Prime)
- RAGChecker evaluation system
- DSPy integration
- PostgreSQL database with conversation storage
- MCP server for tool integration

Always record conversations to maintain project context and enable memory rehydration.