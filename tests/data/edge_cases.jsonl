{"raw": "ß", "expected": "ss", "test": "test_normalize_case_invariant", "timestamp": "2025-09-10T17:19:42.521007", "type": "unicode_case_issue"}
{"raw": "ı", "expected": "i", "test": "test_normalize_case_invariant", "timestamp": "2025-09-10T17:20:00.000000", "type": "unicode_case_issue"}
{"raw": "ß", "expected": "ss", "test": "test_normalize_case_invariant", "timestamp": "2025-09-10T17:22:00.000000", "type": "unicode_case_issue"}
{"raw": "İ", "expected": "i", "test": "test_normalize_case_invariant", "timestamp": "2025-09-10T17:22:00.000000", "type": "unicode_case_issue"}
{"raw": "{\"key_with_quotes\": \"value with 'quotes'\"}", "expected": "sql_safe", "test": "test_sql_placeholder_parity", "timestamp": "2025-09-10T17:22:00.000000", "type": "sql_injection"}
{"raw": "[1.0, 5.960464477539063e-08]", "expected": "precision_handled", "test": "test_normalize_preserves_direction", "timestamp": "2025-09-10T17:22:00.000000", "type": "vector_precision"}
{"raw": "[1.0, 1.8446744073709552e+19]", "expected": "overflow_handled", "test": "test_normalize_preserves_direction", "timestamp": "2025-09-10T17:22:00.000000", "type": "vector_overflow"}
{"raw": "\\r", "expected": "preserve_whitespace", "test": "test_gold_case_creation", "timestamp": "2025-09-10T19:55:00.000000", "type": "whitespace_handling"}
{"raw": "[]", "expected": "empty_tags", "test": "test_gold_case_creation", "timestamp": "2025-09-10T19:55:00.000000", "type": "tag_validation"}
{"raw": "{\"min_span_length\": 50, \"max_span_length\": 50}", "expected": "allow_equal_values", "test": "test_span_picker_constraints", "timestamp": "2025-09-10T19:55:00.000000", "type": "constraint_validation"}
{"raw": "{\"text\": \"0\", \"max_length\": 10}", "expected": "reasonable_bounds", "test": "test_snippetizer_constraints", "timestamp": "2025-09-10T19:55:00.000000", "type": "constraint_validation"}{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "𝐓𝐡𝐞 𝐪𝐮𝐢𝐜𝐤 𝐛𝐫𝐨𝐰𝐧 𝐟𝐨𝐱 𝐣𝐮𝐦𝐩𝐬 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐥𝐚𝐳𝐲 𝐝𝐨𝐠", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "ó", "v", ",./;'[]\\-=<>?:\"{}|_+!@#$%^&*()`~"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...>?:\"{}|_+!@#$%^&*()`~']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "𝐓𝐡𝐞 𝐪𝐮𝐢𝐜𝐤 𝐛𝐫𝐨𝐰𝐧 𝐟𝐨𝐱 𝐣𝐮𝐦𝐩𝐬 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐥𝐚𝐳𝐲 𝐝𝐨𝐠", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "ó", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "ó", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "ó", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "ó", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "&", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "ó", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "񜐴儃?´", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "񜐴儃?´"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...v', '\\U0005c434儃?´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "񜐴儃?´"], "error": "assert ['&', 'E', '\\... '\\x89v', ...] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33mZa\u001b[39;49;00m\u001b[33m\\U0007a9ab\u001b[39;49;00m\u001b[33m\\U0006a606\u001b[39;49;00m\u001b[33mCÊ🢦\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...CÊ🢦', '\\x89v', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...6a606CÊ🢦', '\\x89v']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...U0006a606CÊ🢦', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...a9ab\\U0006a606CÊ🢦']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...=\\U000e822bd)uqo', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...', '=\\U000e822bd)uqo']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...U0006a606CÊ🢦', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...a9ab\\U0006a606CÊ🢦']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...=\\U000e822bd)uqo', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...&', '=\\U000e822bd)uqo']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...U00070150Ç', '&', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...', '\\U00070150Ç', '&']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...', '\\U00070150Ç', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...', 'E', '\\U00070150Ç']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...'tags': ['&', 'E', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...Æ', 'tags': ['&', 'E']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...Æ', 'tags': ['&', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...\\x01iÆ', 'tags': ['&']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...\\x01iÆ', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, Ýö: reader mode requires gt_answer [type=value_error, input_value={'id': 'Ýö', 'mode': <M...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v", "0"], "error": "assert ['&', 'E', '\\... '\\x89v', ...] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33mZa\u001b[39;49;00m\u001b[33m\\U0007a9ab\u001b[39;49;00m\u001b[33m\\U0006a606\u001b[39;49;00m\u001b[33mCÊ🢦\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "v"], "error": "assert ['&', 'E', '\\...CÊ🢦', '\\x89v'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "0"], "error": "assert ['&', 'E', '\\...a606CÊ🢦', '0'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦"], "error": "assert ['&', 'E', '\\...U0006a606CÊ🢦'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33mZa\u001b[39;49;00m\u001b[33m\\U0007a9ab\u001b[39;49;00m\u001b[33m\\U0006a606\u001b[39;49;00m\u001b[33mCÊ🢦\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo", "0"], "error": "assert ['&', 'E', '\\...a606CÊ🢦', '0'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "=󨈫d)uqo"], "error": "assert ['&', 'E', '\\...U0006a606CÊ🢦'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33mZa\u001b[39;49;00m\u001b[33m\\U0007a9ab\u001b[39;49;00m\u001b[33m\\U0006a606\u001b[39;49;00m\u001b[33mCÊ🢦\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦", "0"], "error": "assert ['&', 'E', '\\...a606CÊ🢦', '0'] == ['&', 'E', '\\...a606CÊ🢦', ...]\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "Za񺦫񪘆CÊ🢦"], "error": "assert ['&', 'E', '\\...U0006a606CÊ🢦'] == ['&', 'E', '\\...U0006a606CÊ🢦']\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33mZa\u001b[39;49;00m\u001b[33m\\U0007a9ab\u001b[39;49;00m\u001b[33m\\U0006a606\u001b[39;49;00m\u001b[33mCÊ🢦\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo", "0"], "error": "assert ['&', 'E', '\\...2bd)uqo', '0'] == ['&', 'E', '\\...2bd)uqo', '0']\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "=󨈫d)uqo"], "error": "assert ['&', 'E', '\\...00e822bd)uqo'] == ['&', 'E', '\\...00e822bd)uqo']\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m=\u001b[39;49;00m\u001b[33m\\U000e822b\u001b[39;49;00m\u001b[33md)uqo\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&", "0"], "error": "assert ['&', 'E', '\\U00070150Ç', '0'] == ['&', 'E', '\\...0Ç', '&', '0']\n  \n  At index 3 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "񰅐Ç", "&"], "error": "assert ['&', 'E', '\\U00070150Ç'] == ['&', 'E', '\\U00070150Ç', '&']\n  \n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "E", "0", "&"], "error": "assert ['&', 'E', '0'] == ['&', 'E', '0', '&']\n  \n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["&", "0", "0", "&"], "error": "assert ['&', '0'] == ['&', '0', '0', '&']\n  \n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "𭤥쀮§¬\u000e5\u0001iÆ", "tags": ["0", "0", "0", "&"], "error": "assert ['0', '&'] == ['0', '0', '0', '&']\n  \n  At index 1 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Ýö", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "&"], "error": "assert ['0', '&'] == ['0', '0', '0', '&']\n  \n  At index 1 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "&"], "error": "assert ['0', '&'] == ['0', '0', '0', '&']\n  \n  At index 1 diff: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m&\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m != \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0', '0']\n  \n  Right contains 3 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0']\n  \n  Right contains 2 more items, first extra item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: \u001b[0m\u001b[33m'\u001b[39;49;00m\u001b[33m0\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "Ågï\u001c«æ´\b󁴉r󖿆g", "mode": "reader", "query": "y󮏰򤖯", "tags": ["LPT1", "T񫶆", "{", "𧨬艓î", "a{¬񦝖*"], "error": "1 validation error for GoldCase\n  Value error, Ågï\u001c«æ´\b󁴉r󖿆g: reader mode requires gt_answer [type=value_error, input_value={'id': 'Åg\\x8cï\\x1c«æ...x83{\\x83¬\\U00066756*']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "Ågï\u001c«æ´\b󁴉r󖿆g", "mode": "reader", "query": "y󮏰򤖯", "tags": ["LPT1", "T񫶆", "{", "Ågï\u001c«æ´\b󁴉r󖿆g", "a{¬񦝖*"], "error": "1 validation error for GoldCase\n  Value error, Ågï\u001c«æ´\b󁴉r󖿆g: reader mode requires gt_answer [type=value_error, input_value={'id': 'Åg\\x8cï\\x1c«æ...x83{\\x83¬\\U00066756*']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["LPT1", "T񫶆", "{", "Ågï\u001c«æ´\b󁴉r󖿆g", "a{¬񦝖*"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...x83{\\x83¬\\U00066756*']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "Ågï\u001c«æ´\b󁴉r󖿆g", "a{¬񦝖*"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...x83{\\x83¬\\U00066756*']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "Ågï\u001c«æ´\b󁴉r󖿆g", "T񫶆"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...d6fc6g', 'T\\U0006bd86']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "{", "T񫶆"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...{', '{', 'T\\U0006bd86']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "{", "T񫶆"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...{', '{', 'T\\U0006bd86']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "{", "0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...06bd86', '{', '{', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "{"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...T\\U0006bd86', '{', '{']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{", "0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...T\\U0006bd86', '{', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "{"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...6', 'T\\U0006bd86', '{']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆", "0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...6', 'T\\U0006bd86', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "T񫶆"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...06bd86', 'T\\U0006bd86']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆", "0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...': ['T\\U0006bd86', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["T񫶆"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...'tags': ['T\\U0006bd86']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "y󮏰򤖯", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...00a45af', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "{", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, {: reader mode requires gt_answer [type=value_error, input_value={'id': '{', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "򆕑÷¶¡", "tags": ["򛻬򼯖/", "󄽶􂨮\u001e¦"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...6\\U00102a2e\\x1e\\x7f¦']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "z", "tags": ["򛻬򼯖/", "󄽶􂨮\u001e¦"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...6\\U00102a2e\\x1e\\x7f¦']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "z", "tags": ["򛻬򼯖/"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...09beec\\U000bcbd6/\\x97']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "z", "tags": ["z"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...7fz', 'tags': ['\\x7fz']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "z", "tags": ["z"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...7fz', 'tags': ['\\x7fz']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "z", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <... '\\x7fz', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "z", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, z: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x7fz', 'mode': <...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "name", "file_path": "ó򩓿&񱩯񱹀%?ÁÃ|ý𢜲\"Þ񏕾[?򼟿", "embedding": [0.1, 0.2, 0.3], "score": 0.5}], "alpha": 0.603127919990795, "per_file_penalty": 0.7458991974899764, "k": 22, "tag": "𡪔ÚÆ\\ßZ9Ã\u001eÅH#󓣂3\u000bÛ\u001d򪈚", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "name", "file_path": "ó򩓿&񱩯񱹀%?ÁÃ|ý𢜲\"Þ񏕾[?򼟿", "embedding": [0.1, 0.2, 0.3], "score": 0.5}], "alpha": 0.603127919990795, "per_file_penalty": 0.7458991974899764, "k": 22, "tag": "𡪔ÚÆ\\ßZ9Ã\u001eÅH#󓣂3\u000bÛ\u001d򪈚", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 22, "file_path": "ó򩓿&񱩯񱹀%?ÁÃ|ý𢜲\"Þ񏕾[?򼟿", "embedding": [0.1, 0.2, 0.3], "score": 0.5}], "alpha": 0.603127919990795, "per_file_penalty": 0.7458991974899764, "k": 22, "tag": "𡪔ÚÆ\\ßZ9Ã\u001eÅH#󓣂3\u000bÛ\u001d򪈚", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "2", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.603127919990795, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': 'b08d39021c87695d', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "0", "filename": "2", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.603127919990795, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '826df0acc1dc3dde', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 0, "file_path": "0", "filename": "2", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.603127919990795, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '826df0acc1dc3dde', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.45681641576332777, "file_path": "", "embedding": [0.1, 0.2, 0.3], "chunk_id": "test_chunk"}, {"file_path": "¹", "chunk_id": 0.4113541107629578, "score": 328.0, "embedding": [0.1, 0.2, 0.3], "filename": "0.3024716428072756"}, {"filename": "㥻¼𷖓\f\u0007Ù", "file_path": "P𽆶\u0016򰱕Ò\u0016Ê\u0010󕷥󝖧𠸓Á¸", "score": 0.5, "embedding": [0.1, 0.2, 0.3], "chunk_id": true}, {"embedding": [0.1, 0.2, 0.3], "filename": "0.5754372498571697", "score": 37.0, "file_path": "[2.0331860447989552e-112, 0.3582831515370184, -0.928029774412285, 0.8922920792854927, 0.12565605603573649]", "chunk_id": "test_chunk"}, {"file_path": "True", "score": 902.0, "embedding": [0.1, 0.2, 0.3], "chunk_id": "test_chunk"}, {"chunk_id": 0.025548083040654264, "embedding": [0.1, 0.2, 0.3], "file_path": "509", "score": 0.5}, {"chunk_id": 265, "score": 168.0, "embedding": [0.1, 0.2, 0.3], "filename": "True", "file_path": "False"}], "alpha": 1.7399939684128732e-152, "per_file_penalty": 0.27888994322334854, "k": 45, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}, {"Çü񮤵S𔯗ÂßT": 254, "£򥵶ú\u001c": 0.7272249867187807, "tæ󂥢,𡥍f": true, "r¦": ""}], "alpha": 2.2250738585072014e-308, "per_file_penalty": 0.12, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}, {"Çü񮤵S𔯗ÂßT": 254, "£򥵶ú\u001c": 0.7272249867187807, "tæ󂥢,𡥍f": true, "r¦": ""}], "alpha": 2.2250738585072014e-308, "per_file_penalty": 0.7272249867187807, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}, {"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}], "alpha": 2.2250738585072014e-308, "per_file_penalty": 0.7272249867187807, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}, {"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": ""}], "alpha": 0.7957816291320445, "per_file_penalty": 0.7272249867187807, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": 0, "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": "", "0": ""}], "alpha": 0.7957816291320445, "per_file_penalty": 0.7272249867187807, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"¥\f\u0010񏨕7": 438, "1VÝ\\3(\rç": "", "ªÿ%ì󣮽": 0.7957816291320445, "¹\u0016ú쁱": "", "0": ""}], "alpha": 0.7957816291320445, "per_file_penalty": 0.7272249867187807, "k": 15, "tag": "󳻑񾍕FÁq¼񎤙", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "test_unicode_monotonic_concat", "a": "Ù\u0005ê6¢񓭄􅔉\u0000򜭰򃳆y", "b": "äAl»􄦥\u0000¨¶3¶򁫋5'þ", "ca": 3, "cb": 12, "cab": 11}
{"test": "test_unicode_monotonic_concat", "a": "R", "b": "êÝ", "ca": 3, "cb": 4, "cab": 3}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,n󺒑|ã", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,n󺒑|ã", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,n󺒑|", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,n󺒑", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,n", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013Ò,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx\u0013,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏àx,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏à,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏à,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖񗠏,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾󍙖,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ򜹾,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "fñ,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "f,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ú|", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ú|", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ú", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ú", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=1, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "z", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": " ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "J", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=2, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=5, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=8, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=9, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "1 validation error for EvaluationSettings\nknown_tags\n  Input should be a valid list [type=list_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015, -7.42451057e+071], dtype='>f8').dtype\n +    where array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015, -7.42451057e+071], dtype='>f8') = ArrayTestModel(v8=array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015, -7.42451057e+071], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 9007199254740992.0, -2.7351003796124775e+285, 60.0, -3.9228945815944e-182, 4.444418377745761e-176, -5033411159829521.0, -7.424510573241627e+71]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015,  4.46867979e+016], dtype='>f8').dtype\n +    where array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015,  4.46867979e+016], dtype='>f8') = ArrayTestModel(v8=array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -5.03341116e+015,  4.46867979e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 9007199254740992.0, -2.7351003796124775e+285, 60.0, -3.9228945815944e-182, 4.444418377745761e-176, -5033411159829521.0, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -2.73510038e+285,  4.46867979e+016], dtype='>f8').dtype\n +    where array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -2.73510038e+285,  4.46867979e+016], dtype='>f8') = ArrayTestModel(v8=array([ 4.46867979e+016,  9.00719925e+015, -2.73510038e+285,\\n        6.00000000e+001, -3.92289458e-182,  4.44441838e-176,\\n       -2.73510038e+285,  4.46867979e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 9007199254740992.0, -2.7351003796124775e+285, 60.0, -3.9228945815944e-182, 4.444418377745761e-176, -2.7351003796124775e+285, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 6.00000000e+001,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8').dtype\n +    where array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 6.00000000e+001,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8') = ArrayTestModel(v8=array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 6.00000000e+001,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 0.0, 0.0, 60.0, 0.0, 4.444418377745761e-176, 0.0, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8').dtype\n +    where array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8') = ArrayTestModel(v8=array([4.46867979e+016, 0.00000000e+000, 0.00000000e+000, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 0.00000000e+000, 4.46867979e+016],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 0.0, 0.0, 4.4686797883066856e+16, 0.0, 4.444418377745761e-176, 0.0, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([4.46867979e+016, 4.46867979e+016, 4.46867979e+016, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 4.46867979e+016, 4.46867979e+016],\\n      dtype='>f8').dtype\n +    where array([4.46867979e+016, 4.46867979e+016, 4.46867979e+016, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 4.46867979e+016, 4.46867979e+016],\\n      dtype='>f8') = ArrayTestModel(v8=array([4.46867979e+016, 4.46867979e+016, 4.46867979e+016, 4.46867979e+016,\\n       0.00000000e+000, 4.44441838e-176, 4.46867979e+016, 4.46867979e+016],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 4.4686797883066856e+16, 4.4686797883066856e+16, 4.4686797883066856e+16, 0.0, 4.444418377745761e-176, 4.4686797883066856e+16, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([4.46867979e+16, 4.46867979e+16, 4.46867979e+16, 4.46867979e+16,\\n       0.00000000e+00, 0.00000000e+00, 4.46867979e+16, 4.46867979e+16],\\n      dtype='>f8').dtype\n +    where array([4.46867979e+16, 4.46867979e+16, 4.46867979e+16, 4.46867979e+16,\\n       0.00000000e+00, 0.00000000e+00, 4.46867979e+16, 4.46867979e+16],\\n      dtype='>f8') = ArrayTestModel(v8=array([4.46867979e+16, 4.46867979e+16, 4.46867979e+16, 4.46867979e+16,\\n       0.00000000e+00, 0.00000000e+00, 4.46867979e+16, 4.46867979e+16],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [4.4686797883066856e+16, 4.4686797883066856e+16, 4.4686797883066856e+16, 4.4686797883066856e+16, 0.0, 0.0, 4.4686797883066856e+16, 4.4686797883066856e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-4.1691660e+16, -4.1691660e+16, -4.1691660e+16, -5.8931074e+16,\\n       -4.1691660e+16, -4.1691660e+16, -4.16916...1691660e+16, -4.1691660e+16,\\n       -4.1691660e+16, -4.1691660e+16, -4.1691660e+16, -4.1691660e+16],\\n      dtype='>f4').dtype\n +    where array([-4.1691660e+16, -4.1691660e+16, -4.1691660e+16, -5.8931074e+16,\\n       -4.1691660e+16, -4.1691660e+16, -4.16916...1691660e+16, -4.1691660e+16,\\n       -4.1691660e+16, -4.1691660e+16, -4.1691660e+16, -4.1691660e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-4.1691660e+16, -4.1691660e+16, -4.1691660e+16,..., -4.1691660e+16,\\n       -4.1691660e+16, -4.1691660e+16, -4.1691660e+16, -4.1691660e+16],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+0...     4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]).dtype\n +    where array([ 4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+0...     4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 4.91334611e+015,  4.91334611e+015,  4.91334611...4611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+0...     4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]).dtype\n +    where array([ 4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+0...     4.91334611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 4.91334611e+015,  4.91334611e+015,  4.91334611...4611e+015,  4.91334611e+015,  4.91334611e+015,\\n        4.91334611e+015,  4.91334611e+015,  4.91334611e+015]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]).dtype\n +    where array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15,...+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]).dtype\n +    where array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15,...+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.000000...0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]).dtype\n +    where array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.000000...0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00,...+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]).dtype\n +    where array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15,...+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]).dtype\n +    where array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.913346...4.91334611e+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([4.91334611e+15, 4.91334611e+15, 4.91334611e+15,...+15, 4.91334611e+15, 4.91334611e+15,\\n       4.91334611e+15, 4.91334611e+15, 4.91334611e+15, 4.91334611e+15]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f2", "error": "assert dtype('>f2') == <class 'numpy.float32'>\n +  where dtype('>f2') = array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\\n        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , ... 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\\n        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ]],\\n      dtype='>f2').dtype\n +    where array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\\n        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , ... 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\\n        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ]],\\n      dtype='>f2') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , ...0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,\\n        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ]],\\n      dtype='>f2')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f2", "error": "assert dtype('>f2') == <class 'numpy.float32'>\n +  where dtype('>f2') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f2').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f2') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f2')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016, -6.37163149e...       -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8').dtype\n +    where array([[-6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016, -6.37163149e...       -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-6.37163149e+016, -6.37163149e+016, ...      -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016, -6.37163149e...       -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8').dtype\n +    where array([[-6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016, -6.37163149e...       -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-6.37163149e+016, -6.37163149e+016, ...      -6.37163149e+016, -6.37163149e+016, -6.37163149e+016,\\n        -6.37163149e+016, -6.37163149e+016]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -1.34699945e+016,  4.28449265e-166, -3.88598509e+142,\\n        3.03728589e+016, -6.75506371e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -1.34699945e+016,  4.28449265e-166, -3.88598509e+142,\\n        3.03728589e+016, -6.75506371e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -1.34699945e+016,  4.28449265e-166, -3.88598509e+142,\\n        3.03728589e+016, -6.75506371e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        3.03728589e+016,  0.00000000e+000], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        3.03728589e+016,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        3.03728589e+016,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        3.03728589e+016, -3.70743809e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        3.03728589e+016, -3.70743809e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        3.03728589e+016, -3.70743809e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        0.00000000e+000, -3.70743809e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        0.00000000e+000, -3.70743809e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -3.70743809e+016, -3.70743809e+016, -3.88598509e+142,\\n        0.00000000e+000, -3.70743809e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000, -3.88598509e+142,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([             inf,             -inf,              nan,\\n       -9.15666293e+036, -9.15666293e+036, -9.15666293e+036,\\n       -9.15666293e+036,  6.10969035e-304]).dtype\n +    where array([             inf,             -inf,              nan,\\n       -9.15666293e+036, -9.15666293e+036, -9.15666293e+036,\\n       -9.15666293e+036,  6.10969035e-304]) = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -9.15666293e+036, -9.15666293e+036, -9.15666293e+036,\\n       -9.15666293e+036,  6.10969035e-304]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.10969035e-304]).dtype\n +    where array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.10969035e-304]) = ArrayTestModel(v8=array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.10969035e-304]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 5 == 0\n +  where 5 = len({'db': '0', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "2£f񧊩Ý¬§Î󉸍ñ", "error": "assert 5 == 0\n +  where 5 = len({'db': '\\x8e2£f\\U000672a9Ý¬§Î\\U000c9e0dñ\\x8f', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "\"", "error": "assert 5 == 0\n +  where 5 = len({'db': '\"', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "k", "error": "assert 5 == 0\n +  where 5 = len({'db': 'k', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "򵗹\u0011E", "error": "assert 5 == 0\n +  where 5 = len({'db': '\\U000b55f9\\x11E', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "󛹣Å.¿®\u0014î񢂜Æ", "error": "assert 5 == 0\n +  where 5 = len({'db': '\\U000dbe63\\x92Å.¿\\x83®\\x82\\x14î\\U0006209cÆ', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "E򵷣\u0004\u0000i,", "error": "assert 5 == 0\n +  where 5 = len({'db': 'E\\U000b5de3\\x04\\x00i\\x97,', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "", "error": "assert 5 == 0\n +  where 5 = len({'db': '\\x8a', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "p^ô\u001f\u001fîªÜ\u0003¿0򇻵3\n\u00013ë", "error": "assert 5 == 0\n +  where 5 = len({'db': 'p^ô\\x1f\\x1fîªÜ\\x03¿0\\x84\\U00087ef53\\x013ë', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "򃚌񮋀H񇗋´", "error": "assert 5 == 0\n +  where 5 = len({'db': '\\U0008368c\\U0006e2c0H\\U000475cb´', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 5 == 0\n +  where 5 = len({'db': '0', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 5 == 0\n +  where 5 = len({'db': '0', 'host': '', 'port': 5432, 'scheme': '', ...})"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{" '(": 376, "§¢󯷧\\": "^", "{񠯶¸򘒡<l": 526, "\u000f": false, "^": true, "&z\u0010": true, "à\u0003\u001e": 947, "¿ý": true, "ÿä\u001cª􊣕񭉊": true, "@󾦔¢󁨼򿊂": 347}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ú5Ñve𐐹Z÷\u001d": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": 342}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ú5Ñve𐐹Z÷\u001d": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": 342}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ú5Ñve𐐹Z÷\u001d": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": 252, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": 342}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ã": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": 252, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": 342}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": false, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ã": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": 252, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": 342}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": false, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ã": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": 252, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": false}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "򩫚򯳴°r󮎴򨯠\u0000Á𤏀q", "context": [{"yRQb$5º𼣌": false, "Ã": 0.9511869423761421, "\u0005iÎ": false, "¸N¯򃣊ú": 252, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"N9Iu°": 0.4488018747254162, "@Úm_\t򑻰$\r5»òØ񵯇q@": 758, "W\u0001񧽉": 144, "t@𓒮¸򙡣񼊖\u001e°򋗉 ½󖷯Dë ¦𢏍": 120, "󼹞ò􊎄": true, "Ã": 0.9949163088295605, "牮8\u0005Tj􂖰ºN񯲬ö7d\u000bÁy\u001c": false, "ä½\u0005w󿉀\tÚᄘ": "󤏗m@\u000ft9tz»􀼦³\u0001䔏", "ëlW𭇋": 323, "ü0򩣡\u0001^": ""}, {"yRQb$5º𼣌": 252, "Ã": 0.9511869423761421, "\u0005iÎ": 915, "¸N¯򃣊ú": 0.9016971267462033, "ß": 0.3333333333333333, "Â񝄺􄠧E±Óí󚩳ô\u001cfóÙ": 0.5, "T!􀎁": false, "󎽻ü": 0.8081109950028071, "-Infinity": false, "": 580}, {"𰐯ð!\u001f\u001aô\u001aN": 242, "򗄓:": "²Ð", "9Iu": false, "B=æÖ": 0.15576063932754994, "¡¦@𼯤\u00021s¢?[×": 89, "hñô$ð\u0016􀹓X򲧙4aè": "򻁗\u0012çz󒵕¬±°\b`÷d\u0002¶\u000f򇭧𨂺񭵒󸴩ÿ[é", "𮐉O\f": false}, {"\\\naY􀇡Æ-\u0017": 252, "𫲷": ".exe", "¡&񑷸â\u0006 A\u0007\u0017": "äC", "𥏌Ýn']w": 783, "\u0010Ì": true}, {"Gÿ": 453}], "max_tokens": 2244, "temperature": 1.611798576347025, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "µ:°`M\u0012-ü\u0017.\tÀbR­Ë\u0010", "context": [{"ß»": true, "*": 0.10223451854726354, "&Í": 797}, {"°+\u0018tI󁺪8Ö": 0.07579616754046083, "·󳿷º": 834, "ûNlÙ󮴍1\u000e􎃛9𾊭ß³B?": 0.5908412576590846, "ü󵍅×Þ򷥝": "þD"}, {"Pã5": "Bº§񼣓󩎙", "퍯-󡓽􀨎\u0014Å𝦇󰈎:": false, "Q􃸗j備¼n񖃽򹓎럆\u001f¿]Ó񂷗": false}, {"6\u0001óC": 289, "Ó": "", "񗀩\u0016Í¹è\u001aÞ": 549, "__main__": false, "³󄒫ª": 523, "񀪆Ô򤆘": 527, "\u001ek񼡹\u0012ó+": 0.5701363173689603}, {"S `y": 813, "îì¤": 5e-324, "s򾐘oúKhµ$îæs": "Hñûø񦍺j"}, {"䬉": "򄖵!¯", "\u0006$\u001câ\u001c>»": true, "\u0014뒊{ò": "Ó_", "򼹃": 2, "j>\u0011": 697, "_󳰰򨍘": 769, "End": "ø", "\r\u001f": 494, "§@": true, "î񖛚r": 0.9675602961564369}, {"𵬎 񖷨{8Ð}𬝟ÁÎ¨$ÄÃH񾈝": 705}, {"\u0010": 0.027689796076763702, "À¯": false}, {"u": 434, "äS": "򺜰~"}, {"ᯭé": 99, "򤕏o󖤓rK)򠭨": false, "OPENAI_API_KEY": "󶋛", "񶳭": true, "æ": 813, "ºÄ񡭼񊁺": "Ýõ", "J": 0.653699129733854, "񳾞^\u0013W´È": 393, "y¶û\rXÂÁóê\u00153 Z񂒟`Wô&Ï": 5.544820754205153e-67, " X": "'Û"}, {"򄈵¤󞇓a": 766, "Ï": " W򉵄2󼬻rÆ𞜼}", "ñ/": 0.5}], "max_tokens": 2490, "temperature": 0.8280787449674036, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "µ:°`M\u0012-ü\u0017.\tÀbR­Ë\u0010", "context": [{"ß»": true, "*": 0.10223451854726354, "&Í": 797}, {"°+\u0018tI󁺪8Ö": 0.07579616754046083, "·󳿷º": 834, "ûNlÙ󮴍1\u000e􎃛9𾊭ß³B?": 0.5908412576590846, "ü󵍅×Þ򷥝": "þD"}, {"Pã5": "Bº§񼣓󩎙", "퍯-󡓽􀨎\u0014Å𝦇󰈎:": false, "Q􃸗j備¼n񖃽򹓎럆\u001f¿]Ó񂷗": false}, {"6\u0001óC": 289, "Ó": "", "񗀩\u0016Í¹è\u001aÞ": 549, "__main__": false, "³󄒫ª": 523, "񀪆Ô򤆘": 527, "\u001ek񼡹\u0012ó+": 0.5701363173689603}, {"S `y": 813, "îì¤": 5e-324, "s򾐘oúKhµ$îæs": "Hñûø񦍺j"}, {"䬉": "򄖵!¯", "\u0006$\u001câ\u001c>»": true, "\u0014뒊{ò": "Ó_", "򼹃": 2, "j>\u0011": 697, "_󳰰򨍘": 769, "End": "Ó_", "\r\u001f": 494, "§@": true, "î񖛚r": 0.9675602961564369}, {"𵬎 񖷨{8Ð}𬝟ÁÎ¨$ÄÃH񾈝": 705}, {"\u0010": 0.027689796076763702, "À¯": false}, {"u": 434, "äS": "򺜰~"}, {"ᯭé": 99, "򤕏o󖤓rK)򠭨": false, "OPENAI_API_KEY": "󶋛", "񶳭": true, "æ": 813, "ºÄ񡭼񊁺": "Ýõ", "J": 0.653699129733854, "񳾞^\u0013W´È": 393, "y¶û\rXÂÁóê\u00153 Z񂒟`Wô&Ï": 5.544820754205153e-67, " X": "'Û"}, {"򄈵¤󞇓a": 766, "Ï": " W򉵄2󼬻rÆ𞜼}", "ñ/": 0.5}], "max_tokens": 2490, "temperature": 0.8280787449674036, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"\u0019񦖽:𴡠Ö񘮄": "", "\u001dþyñÜ": 219, "񜎡¿": 691, "¾É3ß½": "óé ,t6·ø´\n񽫹\u001a", "i 򐫫·": 1.175494351e-38, "\u001b": 346, "W³úPb": "ª", "Inf": false, "򏋏ÈS򽋮ü󖡲\u000f": 0.2861296795949387, "Ö¿ ½/": 66}, {"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 965, "\u0007": false}], "max_tokens": null, "temperature": 1.732787155963377, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"\u0019񦖽:𴡠Ö񘮄": "", "\u001dþyñÜ": 219, "񜎡¿": 691, "¾É3ß½": "óé ,t6·ø´\n񽫹\u001a", "i 򐫫·": 1.175494351e-38, "\u001b": 346, "W³úPb": "ª", "Inf": false, "򏋏ÈS򽋮ü󖡲\u000f": 0.2861296795949387, "Ö¿ ½/": 66}, {"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 691, "\u0007": false}], "max_tokens": null, "temperature": 1.732787155963377, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 691, "\u0007": false}, {"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 691, "\u0007": false}], "max_tokens": null, "temperature": 1.732787155963377, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 691, "0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"𽀆6": 466, "Áç": false, "0\f0\u0017\u001c񭃳": false, "b": 466, "0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [{"0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "񤦳<䧃", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "å򪩾򤃀_񍱻", "context": [{"򜩺": true, "\u0010Ú×򞧪󃊤%­ý": 0.8847233435057908, "ÿ¡s񔡕FO󑛌MB6": 165, "\r": 0.914428306381011}, {"\u0017}½ç": 0.5, "䑒Ý>": "d|m򝁓򹫰", "\u0018öp": false, "¬𡵤ÅÜ": "Õﰻ", "False": 257, "𝭗Ë𠮾öé󾽃": "Û򶪏è{", "򺴐": 471, "»õý􇈐\fÈ4󭔂$񧥯񒿆¬\u0002": 738, "2×": false, "󞡕î(\u0012u¡G򞄁69": "-éPå򴿭"}, {"iÉ|ôb÷򦓅ï:åõÛkvæ": "򎰡ðv¸", "ô񞧻ò,\u001b": 480, "úõÁ򥅲µi񓵜󑑽«y[xcc\u001e": 0.7249394296162935, "\u0003_𪶍¹": "\u0015U¤󿯌񀱆"}, {"򔞤¸ÿ\u000e": false, "%a": false, "»O\u0017힢ÚF": "mö𞔄É", "󫢘": "ú", "Ôlùᇇ\"񥔸f¹\nH": "", "󢾍": 0.29099075611638764, "궩󺲤úÞ": "lx媝Ò¦", "¨\u0012𕨄": false, "Þc|ÿÒÒ󎨢": 1.0, "\f": true}, {"\u0004á": 0.5850746760797062, "󼫣": 0.04423038033442928, "s": false, "¸JÝ\u0007\u000eå󚾴è": true, "󷥲í": 927, "Ó򙟨ö񮇲Æ": false}], "max_tokens": 269, "temperature": 0.002826789205026437, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "å򪩾򤃀_񍱻", "context": [{"򜩺": true, "\u0010Ú×򞧪󃊤%­ý": 0.8847233435057908, "ÿ¡s񔡕FO󑛌MB6": 165, "\r": 0.914428306381011}, {"\u0017}½ç": 0.5, "䑒Ý>": "d|m򝁓򹫰", "\u0018öp": false, "¬𡵤ÅÜ": "Õﰻ", "False": 257, "𝭗Ë𠮾öé󾽃": "Û򶪏è{", "򺴐": 471, "»õý􇈐\fÈ4󭔂$񧥯񒿆¬\u0002": 738, "2×": false, "󞡕î(\u0012u¡G򞄁69": "-éPå򴿭"}, {"iÉ|ôb÷򦓅ï:åõÛkvæ": "򎰡ðv¸", "ô񞧻ò,\u001b": 480, "úõÁ򥅲µi񓵜󑑽«y[xcc\u001e": 0.7249394296162935, "\u0003_𪶍¹": "\u0015U¤󿯌񀱆"}, {"򔞤¸ÿ\u000e": false, "%a": false, "Ó򙟨ö񮇲Æ": "mö𞔄É", "󫢘": "ú", "Ôlùᇇ\"񥔸f¹\nH": "", "󢾍": 0.29099075611638764, "궩󺲤úÞ": "lx媝Ò¦", "¨\u0012𕨄": false, "Þc|ÿÒÒ󎨢": 1.0, "\f": true}, {"\u0004á": 0.5850746760797062, "󼫣": 0.04423038033442928, "s": false, "¸JÝ\u0007\u000eå󚾴è": true, "󷥲í": 927, "Ó򙟨ö񮇲Æ": false}], "max_tokens": 269, "temperature": 0.002826789205026437, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_empty_context_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "񈀒\u0011", "context": [], "max_tokens": null, "temperature": 1.9308129447039395, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "¬𐑚\u0012E", "context": [], "max_tokens": null, "temperature": 5.872418551100272e-106, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "9𳪗¥¥u񪞘²򋄄󭯖B", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"[¨\u001b÷\u001c񡭫þh󴄍B\u0019úº𓕊Qp": 0.07806784232732979, "j«®Â\u00113ë񌉉¹\u0012£Ç\u0019Dé󧑎È¹9": true, "¶􄟎B¬": 5, "»²􅯀Ø": ".exe", "COM1": true, "/ì_񮋨]􀩵è·": false, "¯¨󐋭\u0004O©󑹽È/LM\u0004e¿T¡񙦭m\u0016Ö": 163, "󩲍": false, "Û񳿣": 0.6968869244708121, "6Y𕯣¾4퍴2": 2.2250738585072014e-308}], "max_tokens": 460, "temperature": 1.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "9𳪗¥¥u񪞘²򋄄󭯖B", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"[¨\u001b÷\u001c񡭫þh󴄍B\u0019úº𓕊Qp": 0.07806784232732979, "j«®Â\u00113ë񌉉¹\u0012£Ç\u0019Dé󧑎È¹9": true, "¶􄟎B¬": 5, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "9𳪗¥¥u񪞘²򋄄󭯖B", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"[¨\u001b÷\u001c񡭫þh󴄍B\u0019úº𓕊Qp": "", "j«®Â\u00113ë񌉉¹\u0012£Ç\u0019Dé󧑎È¹9": true, "¶􄟎B¬": 5, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "9𳪗¥¥u񪞘²򋄄󭯖B", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"\t$\u001e\u0003": 0.3688393185439805}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "\t$\u001e\u0003", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"\t$\u001e\u0003": 0.3688393185439805}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "\t$\u001e\u0003", "context": [{"\t$\u001e\u0003": 0.3688393185439805}, {"\t$\u001e\u0003": 0.3688393185439805, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "\t$\u001e\u0003", "context": [{"\t$\u001e\u0003": 0.0}, {"\t$\u001e\u0003": 0.3688393185439805, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_temperature_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 10, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": 5e-324, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"": 999, "": 128, "𥴆Å": 124, "𱾗\b¥\u0014\u001a󗬂2򈧴": 0.7322909488412795, "¼G6򚮱%¬_ÿéúFh\u0007}ö": 254, "Føz¦Ë": "¯{\u0016ÀË", "ÚöM;ï򖯙󾨙¥Î󈾛Ã": 0.8379080293326577, "ö\u0002eÌfÔã񛣴򑈁񱺣.򀭁}«ZL􏌤x": 516, "Mc": "򇮸񜆇¸¤íÛ·ëËÝ", "§": "ë#\u0011¹\u0005U\u0003轂\u001aÝsW񷳏\f\u001bÛ\"ÂÃô"}, {"򇗱\u0003qÕ\u0012{®": 0.8278619139141488, "n ": true}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.10133109505006191}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": 5e-324, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"": 999, "": 128, "𥴆Å": 124, "𱾗\b¥\u0014\u001a󗬂2򈧴": 0.7322909488412795, "¼G6򚮱%¬_ÿéúFh\u0007}ö": 254, "Føz¦Ë": "¯{\u0016ÀË", "ÚöM;ï򖯙󾨙¥Î󈾛Ã": 0.8379080293326577, "ö\u0002eÌfÔã񛣴򑈁񱺣.򀭁}«ZL􏌤x": 516, "Mc": "򇮸񜆇¸¤íÛ·ëËÝ", "§": "ë#\u0011¹\u0005U\u0003轂\u001aÝsW񷳏\f\u001bÛ\"ÂÃô"}, {"򇗱\u0003qÕ\u0012{®": 0.8278619139141488, "n ": true}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.10133109505006191}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": 5e-324, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"\u0015\u001c$\u0016": 371}, {"򇗱\u0003qÕ\u0012{®": 0.8278619139141488, "n ": true}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.10133109505006191}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": true, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"\u0015\u001c$\u0016": 371}, {"򇗱\u0003qÕ\u0012{®": 0.8278619139141488, "n ": true}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.10133109505006191}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": true, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"\u0015\u001c$\u0016": 371}, {"\u0015\u001c$\u0016": 371}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.10133109505006191}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": true, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"\u0015\u001c$\u0016": 371}, {"\u0015\u001c$\u0016": 371}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.651079743506325}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "!Eð3ã", "context": [{"{񿤍\u0013'\u001e»\u001cñ×uþ󕍑I¨¸󢫁_": "𘟇¿þÅ", "Qò󩬜@ó󥽯~m": "A"}, {"8VA򿿨꧸F]ó󘉐": 0.4070238881673155, "none": 0.7717536463095864}, {"\u0015\u001c$\u0016": 371}, {"¥i񚖅\u0001\u000f": false, "󁎾\u0016Â\u0015îfÿ𴄷¼􏅺Ç¤*": 881, "󖎐ÚÏ¡HÌ򄼭": 0.0, "": "\u0016¸¥\u0004", "³2H\u000b񸨌\u001fLr§򪥄u@": "¥SÚ'CÆôd"}, {"񚄊Jh}\u001ekpÔ󽣠\u0011򲥿": 224, "5´󿙈ªb䐘G\\{#N񸜉𭐾\u000e]8": 0.5936722850951061, "Æ\u0007󟂌ó«¹R¾{ü[ÿÏP󈸉¨󆚮Eü\u001b": 0.3594331420502522, "§¢.": 0.5044676860259142, "񛳵¤7": 0.9360408316779092, "򽹌ð": "æ7\u000f", "ð": 782, "¨9": true, "+ÕØÔ": "򟾳쾼𭮨", "*󉻃\u0002𰄳\b󹚳󣪍xÑ􌯥d\u0005þ": "񂐊:Y"}, {"\u0007𕧜򗃾񾣌ÈÅ\u001d": 0.651079743506325, "\u0015(򊭞鞙ðÖÉÈE®\\2񛢦": "\u0006Z򢪙򪩈C)", "򨄝񝌰ìª¸": 0.03942872968049161, "": 451, "H񿂶򪢪": true}, {"èf#]Q©򙿊}𫱒qj": "ì", "\u0003NÞ¥¡\u0016£": true, ",?ØÍç𶠞 mïj\r\n|]`ã{)á": 316}, {"\u0000": 0.11272725480546211, "à򋕰tVGý¾(±f󖻎à𳪈𣩰\u0007": "\rð򖮬ÕÂÅ?Ë-Ù𑖞󇵄", "\u001f/½et󁲉𰾩􋢨󏡢🥐;­°§WÆ󏨾*": true, "$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 0.11206020071906966, "gì¨": true, "B!": 999, "G×񐦎󪸣tg򉙙ð\t휊": true, "\u0006¸fÎÇ+`ïÉà÷": 0.8791532657005103, "¦ÀÄ'¸6y !": false}, {"ö±ã𥎸 񃅲K\u000b": 0.019123740996213282, "°": 199}, {"$\tæ\u001f\"A\rn0Z󣍋󴂊򳢨": 371}, {"\u0015\u001c$\u0016": 371}, {"NUL": 0.44967510998331817, "ø)Zø¡": 0.2570969588817447, "Ï񑥞Z􀙓𔚺Ò򲕟i񫞽_X\n\u0019Õ": false, "á/񏍄Y/¹Ë򱙙񻪟Ë¥": 120}, {"𵝥": true, "Z򍋾ù": "r󼝈Bá\u001d", "h": "¼", "<I0򃭟Æ򪍸": 241, "íFK򮐿": "·ÅW", "Ýk񍯎É-4򗽿¥òd&": false, "V": 456, "³򬱗򲋗AS": true, "·󝷈": 287, "\t": 0.651079743506325}, {"²\u0003É/ËE𮊈¡": 506}], "max_tokens": null, "temperature": 2.0608511481311844e-151, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "®\u0006â󳢽ifÂ稿kQ$F\u0001|\u0001aÕ\u000eJ6\u0011(R򞜂", "context": [{"Ò": 182, "\u000eäÏ¿": 2.225073858507203e-309, "u": true}, {"OµHïâ򟁑£": 522, "-script.pyw": 5e-324, "®": "򛶍²", "񬞍𱠋m": true, "󣮏": 8, "Â󪏝\u001a@é𼁡": false, "_": 501}], "max_tokens": 1444, "temperature": 2.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "®\u0006â󳢽ifÂ稿kQ$F\u0001|\u0001aÕ\u000eJ6\u0011(R򞜂", "context": [{"OµHïâ򟁑£": 522, "-script.pyw": 5e-324, "®": "򛶍²", "񬞍𱠋m": true, "󣮏": 8, "Â󪏝\u001a@é𼁡": false, "_": 501}, {"OµHïâ򟁑£": 522, "-script.pyw": 5e-324, "®": "򛶍²", "񬞍𱠋m": true, "󣮏": 8, "Â󪏝\u001a@é𼁡": false, "_": 501}], "max_tokens": 1444, "temperature": 2.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_max_tokens_bounds_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": true, "\u0003": 174, "": false}], "max_tokens": 3978, "temperature": 0.6249222331402754, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": true, "\u0003": false, "": false}], "max_tokens": 3978, "temperature": 0.6249222331402754, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": false, "\u0003": false, "": false}], "max_tokens": 3978, "temperature": 0.6249222331402754, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": false, "\u0003": false, "": false, "0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": false, "\u0003": "", "": false, "0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": false, "\u0003": "", "": false, "0": false}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "NUL", "context": [{"\u0007TNß °": true, "\u0000§±ût": true, "\u0003": "", "": false, "0": false}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "OPENAI_BASE_URL", "context": [{"8¸k": "", "½": 0.4799848381954118, "__main__": "񸦊󕓾", "𓉡\u001a􋾥\u0019¬Ó¢Ø\u0012£": 524, "çí𳈫>򵪭À󱏺򔕨": 716, "󔵮¦𔜪񖘩è": 32, "񥯺&": "^ß¶\u000e", "openai:gpt-4o-mini": ",:󌭺ñÃ𜊎ó.", "Ggã": "yf􉫸\u0006ÏɞAL", "¬": 604}, {"{­󛗬4𳀴Æ": false, "uõÞ": true, "ØÚ": ""}, {"Ã±": 662, "񜒛󅾀𯼵񥫶": 0.9826659187529485, "O": 1.0, "Ä򩻶󭪡S'$򄭞¶JC~": "\u001e4􆇚¼O\u0012ÿ", "7񑥧\u001f=»𮣮󛁇\u0007ÓÈ\u0011񜏿桼UÊ󛾨\u0000": "𪂾]¥µ\u000e]\"R»", "": true, "¥": 547}, {"k􃔝ÐÏ\u0001x": true, "-©{7§»©/": 191}, {"{ f{": "Q𹨬Xõ§{Ö-𖍽`Èïd¨\fx򭲰", "Éñ": 0.14810898625198446, "ë0l\u0015Ïaçy": 452, "򒞛": 208, "򢠚𿱿ð": "{", "󛌌[ÂJ{": "}󭹘Ò]", "\u0005": 0.24945943787833974, "ÈÑ": 1.1125369292536007e-308, "ö \u001e": 5.960464477539063e-08, "😍": 1.192092896e-07}, {"%𶂏/ð": "q"}, {"ú򻐋\f򢋩\u0007cÈ\r": 0.17725815042170615, "E^𮥎": 594, "m": "ËsÐ", "\u0000󏻖{": "g𭟃ïi򥇬\u0004򥔭ÌÐ\u0015½§񖎹O\u0000", "뮪򹮒𬝤¡nwÆ": 0.49619664713140355, "񳰑": false, "Éã": "$", "%": false, "%ç\u0007û": "\u0016Z", "򃆏": false}, {"a²񮈲󆇧5": "ã\u0005îA񀤞u񲳸W\u0018(ÈU񬄥𥛕þF", "»Î𔣉@à񞂧P": "End", "qf񣢰": "", "Y\u0017": true, "+·¥񯰣򩴦\u000e¨": 876, "OPENAI_API_KEY": false, "ü񨕺": 726, "S񩔇󎠷¸􁐃": "^W\u0007", "¯\u0014": false, "'": true}, {"©cÜ󲷁u": 1.1125369292536007e-308, "<": "¯", "󗸤𐝘\u0018": "#E", "Ä": 647, "a򦓦𑚬»񍨰": 129, "á": 510, "": 899, "z&": 127}, {"\u0005»󍬉F<9󅬵èl&\u001e/􊪟*iá򝮪5N": 267, "%Gé": "\u001e9\u000bx\u0018", "£񱽀ô°𔯜I": 0.0, "éh¬\u001fjà󾿸ÄG": "§­Î", "à\t": "", "1ûD𯮥%ÇÜ|äÓ±AP±(\u0015": false, "End": 0.15551140034015457, "HCe򿁯\u001a(õâý􁶂𰞭": 399, "": 120}, {"𦹖p": false, "g\u000b򌑆/!LÒña;򯰠򣃮": "", "𽩓": "·", "£^򒌑í񂾃": 0.40501906851217584, "¨r󕎪k񷻗Ñ": 718, "§\u0018)\u0011<¨\nS\r": true, "󪕑ÜÎ": 0.564289201081602, "򚹺Àûõ\u00113홂𻾯ð\u0018l\u0016\"©oÇ²¢󢡘𬻛": 923, "Ü": 232, "G ": false}, {"\f'\r¯à񊤗񠙴񂷉\u0011Tg": ""}, {"De": 774}, {"񀮥": "Ä\u0006¾"}, {"I񮰱": "Ã7", " 𣭗6ßNr3Ü󠟑𱼺}񳞭": 0.3333333333333333, "򝙮â": true, "VÛ󖈓󶾢§÷": true, "Í󃌑mX¯H³": 0.04413241883748232, "¥𔊓ï􍁸񵯅󆽱§o `¸\n@b񽆄": true}, {"¨ceôñ\u000eÿ$󻉖\u001bä": 577}, {"򌻇ÂU򗲈½!": false, "󺑭÷\t": false, "\u0005􄚴": "", "\tf󂝪(KÈÆ25󜪭o󑘭ÙfgÅO\u0007²": false, "t%󡫒𰯆¾g:": 5.093234069237875e-256}, {"𵖨(": 0.5323505687268807, "°<󏗅񏮎e򣊙t²󗱌孤8\u0005": 942, "\r\u0019w񣩡e󙇂\\$3򊶐": 959, "Oa\u0005󘞌󗯵N": "", "÷¬Uf}Ö󨚟4Âåï\u0015G\u0017": 440, "õ󌀀": "𣁩񸛺²I", "ë": "", "øj񈪇tÌ": 0.19147468481566082, "³𵕷\u0000s\u000b": true, "Æ\u001a": "FALSE"}, {"k񸊼𭔈𨪳\u0003éÎ򘸃\t": false, "񘺅\ráIã𛺘6󌻔\u0004": "¹Ï\u001d", "\u0018ÖË¦¶\u0007": "񨩹Ë", "\u0000": "\u001dLNdC*[3", "¢": 285}, {"zÁ\u001eÃ": "񓛵Ò蘟?L§aü", "\n򉸨": 818, "\bæ0P": 863, "󒊏h\nËÆ\\8$\u00021𐊸¤": true, "Þ¾Úh\u0011\"S¼𙝉\u0004f򶮎򛃚·􊕦\"h0C": false, "󪨐^񾛉A󷗕򾫦": "", "/": 490, "·\u0013\u0005": "èW񸏷򣱷", "ºÖ򭏓򌈃": 804, "h\\MH-¡\u0014񗾸": 218}], "max_tokens": 3868, "temperature": 1.1, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "OPENAI_BASE_URL", "context": [{"8¸k": "", "½": 0.4799848381954118, "__main__": "񸦊󕓾", "𓉡\u001a􋾥\u0019¬Ó¢Ø\u0012£": 524, "çí𳈫>򵪭À󱏺򔕨": 647, "󔵮¦𔜪񖘩è": 32, "񥯺&": "^ß¶\u000e", "openai:gpt-4o-mini": ",:󌭺ñÃ𜊎ó.", "Ggã": "yf􉫸\u0006ÏɞAL", "¬": 604}, {"{­󛗬4𳀴Æ": false, "uõÞ": true, "ØÚ": ""}, {"Ã±": 662, "񜒛󅾀𯼵񥫶": 0.9826659187529485, "O": 1.0, "Ä򩻶󭪡S'$򄭞¶JC~": "\u001e4􆇚¼O\u0012ÿ", "7񑥧\u001f=»𮣮󛁇\u0007ÓÈ\u0011񜏿桼UÊ󛾨\u0000": "𪂾]¥µ\u000e]\"R»", "": true, "¥": 547}, {"k􃔝ÐÏ\u0001x": true, "-©{7§»©/": 191}, {"{ f{": "Q𹨬Xõ§{Ö-𖍽`Èïd¨\fx򭲰", "Éñ": 0.14810898625198446, "ë0l\u0015Ïaçy": 452, "򒞛": 208, "򢠚𿱿ð": "{", "󛌌[ÂJ{": "}󭹘Ò]", "\u0005": 0.24945943787833974, "ÈÑ": 1.1125369292536007e-308, "ö \u001e": 5.960464477539063e-08, "😍": 1.192092896e-07}, {"%𶂏/ð": "q"}, {"ú򻐋\f򢋩\u0007cÈ\r": 0.17725815042170615, "E^𮥎": 594, "m": "ËsÐ", "\u0000󏻖{": "g𭟃ïi򥇬\u0004򥔭ÌÐ\u0015½§񖎹O\u0000", "뮪򹮒𬝤¡nwÆ": 0.49619664713140355, "񳰑": false, "Éã": "$", "%": false, "%ç\u0007û": "\u0016Z", "򃆏": false}, {"a²񮈲󆇧5": "ã\u0005îA񀤞u񲳸W\u0018(ÈU񬄥𥛕þF", "»Î𔣉@à񞂧P": "End", "qf񣢰": "", "Y\u0017": true, "+·¥񯰣򩴦\u000e¨": 876, "OPENAI_API_KEY": false, "ü񨕺": 726, "S񩔇󎠷¸􁐃": "^W\u0007", "¯\u0014": false, "'": true}, {"©cÜ󲷁u": 1.1125369292536007e-308, "<": "¯", "󗸤𐝘\u0018": "#E", "Ä": 647, "a򦓦𑚬»񍨰": 129, "á": 510, "": 899, "z&": 127}, {"\u0005»󍬉F<9󅬵èl&\u001e/􊪟*iá򝮪5N": 267, "%Gé": "\u001e9\u000bx\u0018", "£񱽀ô°𔯜I": 0.0, "éh¬\u001fjà󾿸ÄG": "§­Î", "à\t": "", "1ûD𯮥%ÇÜ|äÓ±AP±(\u0015": false, "End": 0.15551140034015457, "HCe򿁯\u001a(õâý􁶂𰞭": 399, "": 120}, {"𦹖p": false, "g\u000b򌑆/!LÒña;򯰠򣃮": "", "𽩓": "·", "£^򒌑í񂾃": 0.40501906851217584, "¨r󕎪k񷻗Ñ": 718, "§\u0018)\u0011<¨\nS\r": true, "󪕑ÜÎ": 0.564289201081602, "򚹺Àûõ\u00113홂𻾯ð\u0018l\u0016\"©oÇ²¢󢡘𬻛": 923, "Ü": 232, "G ": false}, {"\f'\r¯à񊤗񠙴񂷉\u0011Tg": ""}, {"De": 774}, {"񀮥": "Ä\u0006¾"}, {"I񮰱": "Ã7", " 𣭗6ßNr3Ü󠟑𱼺}񳞭": 0.3333333333333333, "򝙮â": true, "VÛ󖈓󶾢§÷": true, "Í󃌑mX¯H³": 0.04413241883748232, "¥𔊓ï􍁸񵯅󆽱§o `¸\n@b񽆄": true}, {"¨ceôñ\u000eÿ$󻉖\u001bä": 577}, {"򌻇ÂU򗲈½!": false, "󺑭÷\t": false, "\u0005􄚴": "", "\tf󂝪(KÈÆ25󜪭o󑘭ÙfgÅO\u0007²": false, "t%󡫒𰯆¾g:": 5.093234069237875e-256}, {"𵖨(": 0.5323505687268807, "°<󏗅񏮎e򣊙t²󗱌孤8\u0005": 942, "\r\u0019w񣩡e󙇂\\$3򊶐": 959, "Oa\u0005󘞌󗯵N": "", "÷¬Uf}Ö󨚟4Âåï\u0015G\u0017": 440, "õ󌀀": "𣁩񸛺²I", "ë": "", "øj񈪇tÌ": 0.19147468481566082, "³𵕷\u0000s\u000b": true, "Æ\u001a": "FALSE"}, {"k񸊼𭔈𨪳\u0003éÎ򘸃\t": false, "񘺅\ráIã𛺘6󌻔\u0004": "¹Ï\u001d", "\u0018ÖË¦¶\u0007": "񨩹Ë", "\u0000": "\u001dLNdC*[3", "¢": 285}, {"zÁ\u001eÃ": "񓛵Ò蘟?L§aü", "\n򉸨": 818, "\bæ0P": 863, "󒊏h\nËÆ\\8$\u00021𐊸¤": true, "Þ¾Úh\u0011\"S¼𙝉\u0004f򶮎򛃚·􊕦\"h0C": false, "󪨐^񾛉A󷗕򾫦": "", "/": 490, "·\u0013\u0005": "èW񸏷򣱷", "ºÖ򭏓򌈃": 804, "h\\MH-¡\u0014񗾸": 218}], "max_tokens": 3868, "temperature": 1.1, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_is_deterministic_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "\u001bØ¨à󓵳", "context": [], "max_tokens": null, "temperature": 0.68136566079298, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{"º": "6>񯇬Çu", "-򂉮": false, "󷊂y": false}, {";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {"𿅶'»򪔱(": 593, "򠊷£񊄦æ": "󓀋T"}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{"º": "6>񯇬Çu", "-򂉮": 0, "󷊂y": false}, {";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {"𿅶'»򪔱(": 593, "򠊷£񊄦æ": "󓀋T"}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{"º": "6>񯇬Çu", "-򂉮": 0, "󷊂y": false}, {";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {"𿅶'»򪔱(": 593, "򠊷£񊄦æ": 0}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {"𿅶'»򪔱(": 593, "򠊷£񊄦æ": 0}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {";": "", "y.𽷛Þ0񕗥Ú": 567, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {"𿅶'»򪔱(": 593, "򠊷£񊄦æ": 0}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{";": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {";": "", "y.𽷛Þ0񕗥Ú": 567, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}, {";": "", "y.𽷛Þ0񕗥Ú": 567, "á𯲃񌨬J񽹾ä": 567, "q¢öBÌ": 0.05925318431517047}], "max_tokens": null, "temperature": 1.41920758293578, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0(í.9\u000f", "context": [{"á𯲃񌨬J񽹾ä": "", "y.𽷛Þ0񕗥Ú": 0.2005036788246473, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "\u0018", "context": [], "max_tokens": null, "temperature": 1.4927186406237933, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_output_json_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5634698959857604, "£4": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.5360336750388989, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 120, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"Þ½ÉÚîzÿoÆ)ë": "򊓔\u0007m", "5ãN󽄚Í>򆭢 󭗁Ãd=": false, "񟎬": 134, "\"oÜ?º\u001c\u0002Qá¼": 6.103515625e-05, "]^򚩇°": "", "3t¶f,Ö𒈭\u0012Ii𹈔": 0.20007514476291127}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5634698959857604, "£4": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.5360336750388989, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 120, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5634698959857604, "£4": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.5360336750388989, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 1000, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5068722370952373, "£4": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.5360336750388989, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 1000, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5068722370952373, "true": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.5360336750388989, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 1000, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5068722370952373, "true": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.6411340036694496, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.40231310476141224, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 1000, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "󼎏@󠐨%{兇", "context": [{"w𲫞": 8.597051812557153e-161, "å": true, "r": 0.6305294650185412, "Ì񝂫": 0.9691398739589188, "dcS\u000fKW": true, "¥򎍂Ý񜽉𔾘.𤬓F": 0.7283334100353119}, {"\u001c": true, "\u001a󡕹": "񸹟ôà¼e@", "y": false, "u´": 0.8024728538125268, "񛎆u¹Ý񲙽": 550, "G񑝸ÊÜmúoô󻜻\u001fP,񢊋»ç񑞅\u0002üÙ": "¶0\rLm񊡷\u000f\u0013"}, {"Lý񁿈´\u0004ÿ«": "𺿸l¢jCo", "h\u0015,}𞏻½ù": true, "": "\u0012񞢆𲟡¶", "Ómkß Äp킮/s°": "U򎊮", "󝺅": "^JnÔ򇚾4", "­áX&àLk": 0.49484869246516994, "å": 0.5068722370952373, "true": true, "&Ð󹊦򲕏«򅋼:spx,·è|c": "N°R°2󘩵", "Wr\u0017𗗙9񳊊¿²񲮺6c": "𼞣"}, {"Û": 178, "Ùð": "j󌆀\bM´缘øæ񸧔󮠼򱢟 "}, {"\u0016󱦏󥟩ÁtÇ ý󯜬¯": false}, {"1O 𜰭l 􀔉JÕy`^T𨆳\u0019>": 1.0, "µË𵵹·򇃗Â\u0011À": 988}, {"Sn񹛰\t": "íË¿"}, {"󑈢": "\u0000􄬨%¦\"¢CêÇ񆭁񶢊ÿ󖈇àÚ񍳤\u0003"}, {"¶󍩼NO\u0006": "", "\u000be": 1000, "False": 873, "": 668, "ñp": false, "\u0000񿱒Î¨󖐣Ðr¶𻝭i¦󕌭": true, "d\u0003p°": true, "򅽞Co": "ÖüÊì/\u001a»àY³e!<񕤱Ë\u001aÅ½", "򿬲OR": 0.7783913662879052, "d!􍎄򴽎ÇÁQN": false}, {"¼I": false, "\u001a𘐫\u0002!y\u0005¥Ö": 0.40231310476141224, "²ö򷔩­􌽡񎈱þ󑈧Þ": 5.558290972689235e-59, "mG)Ý1\u001c\u001c,": "򋬩µ񿣽ô#\u0003", "񁰀": "Ë\u0019Úð\nkÏ", "ú": false, "Æß×»": "", "w°5­¢ÎQã\u001bIE\"c񙉫µûÎ": 0.5690855130872979, "=Q¦򻶮æ­񋊲򩊸p􌆢Ô(򓶖": false, "\u0001ýV": "TõX\u0012􂨠h\u0014"}, {"è": true}, {"󯎕5p": true}, {"(𾰮\u000f·ø\u001e𠆷\u0000F": 0.9653737045699347}, {"򍸍\u000f򫻧": "ývÅ)r", "򦋐/É3󚑛×񧯸W": "󄍅", "Ã񱿛Ç2񱢅x򹋒m³ñ¯񃍥\r\u0013'Âæ󿨵v": true, "ù Ëqö": 0.7783913662879052, "ÏU󬘄ÑDo򆀟\tà": "õ®󣝶C»Á?ü", "Æ򓥨cd2\n񥳒򚆠Øx󞂎^Æ󿁔𒳑": 1000, "Ø": "\u0000Ìà«񂷫m»<f-aD󆎶P[¿7񲐡𧛂º\u0013%\u0011", "¬ø\u001eÌ": 0.40231310476141224, "à": 220, "ûþy\\S¾􃧼": "ëñÝ£Ô򵃛'^³"}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}, {"𐧟æ±𺙲>": true, "Â8x": false, "jËë񬒮µ񦶗": true, "i񋂐ðÐG§3Eo1¬$\u0002\r󼜷\u0015": 0.5068722370952373, "ß": 0.3640237736427992, "𘳻": 857, "0e\u0000;g󝯻à/L": 659, "X\u00032􈾟E󐱰mñ\u000eSFº)'h¶񞱴": false, "ð": true, "true": 0.036055556551927166}], "max_tokens": null, "temperature": 0.6003238659012663, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "­÷Ï¿²èÎ~É", "context": [{";򰑊": false, "": true, "¦Õ": 120, "Péù¼£¿񝧏󹩏n󎁷W^": false, "Gñt\u0019W:\u0002yu􊫾Î¦SÀ9\b": 0}, {"\u0001â°1ÁÊ%ïÛ": "&", "openai:gpt-4o-mini": 800, "Vp\\HU": 0.38558160649616136, "pÖ": "z:򩜇"}, {"񾜵": ""}, {"𖐑GºÝÒ񁜰󹐤Æ𕮣Á\rãY󙥠": false, "ý񧽼򐵔": 0.46220501051635365, "Nî\b򳶂»½¸¡": 0.8622842548738803, "²󐧾Î\u001fêë}Ñ¶`×z#񜫇\u0007å𑳏\nÄÃ": 225, ".󻉩\u0011\u0014\u001f": 537, "á": 0.8194998919363101, "\u000fý\u0000\u001e1¿º": 0.2120394477863819, "§󵆩C󢕛\u0002ÛÙ\u0014^U_W": 4.60509759002575e-184, "Ì": 5e-324, "÷Èæ$É®": false}, {"äp": 661, "􊵺ð": false, "Î": 0.5230839112704654}, {"NIL": "Y^󿭴󉠕\u0013ã'@ò%", "􊚺𣒴\u001cPtõ&𑾒": 6.103515625e-05, "Ѭr}欘î": "\\򚒪\tª", "􉖼宖": true, "n": 270, "\u001c": "\u0010\u001aþØG×¼s", "OPENAI_API_KEY": false, "Iº\u0014K": "\u0003·\u001a~'R\u000f\u0011G\u0013\u001fZÃtÆ!򊨸QE", "û\u001cý": false, "2": "úØ£ò"}, {"񅐌]": false, "û\r=\tL×": true, "🱸«򕹌󞮇h󕅵": 106, "4ä": 695, "\u0006È\rÆ": 0.9894793352655991}, {"¸": 233, "򣔠": 0.2993656024183911, "񝑢": true, "dau\u001a󇙃/󦚇O#򿍓": false, "": false, "\u000bD9åÑF\u001b񥮛ÃSý7𡳨": true, "ࢆÐ{\u001f5µO®󱐫J󓁱x\u0011Á\u0016": 314, "\u001b´D¤񝰈𝓮¥¡󬲾ý*U?(í": false, "ÂÆ>ð󟁩=}": true, "4𯘝+񷑩¶񕣊õ򸺊Q{񿎯t\u001bä¤": 13}, {"\"\u0012": true, ".¾𨟚flqfÇé": 299, "BD": 52}], "max_tokens": 783, "temperature": 1.7744069698916215e-57, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "­÷Ï¿²èÎ~É", "context": [{";򰑊": false, "": true, "¦Õ": 120, "Péù¼£¿񝧏󹩏n󎁷W^": false, "Gñt\u0019W:\u0002yu􊫾Î¦SÀ9\b": 0}, {"\"\u0012": true, ".¾𨟚flqfÇé": 299, "BD": 52}, {"񾜵": ""}, {"𖐑GºÝÒ񁜰󹐤Æ𕮣Á\rãY󙥠": false, "ý񧽼򐵔": 0.46220501051635365, "Nî\b򳶂»½¸¡": 0.8622842548738803, "²󐧾Î\u001fêë}Ñ¶`×z#񜫇\u0007å𑳏\nÄÃ": 225, ".󻉩\u0011\u0014\u001f": 537, "á": 0.8194998919363101, "\u000fý\u0000\u001e1¿º": 0.2120394477863819, "§󵆩C󢕛\u0002ÛÙ\u0014^U_W": 4.60509759002575e-184, "Ì": 5e-324, "÷Èæ$É®": false}, {"äp": 661, "􊵺ð": false, "Î": 0.5230839112704654}, {"NIL": "Y^󿭴󉠕\u0013ã'@ò%", "􊚺𣒴\u001cPtõ&𑾒": 6.103515625e-05, "Ѭr}欘î": "\\򚒪\tª", "􉖼宖": true, "n": 270, "\u001c": "\u0010\u001aþØG×¼s", "OPENAI_API_KEY": false, "Iº\u0014K": "\u0003·\u001a~'R\u000f\u0011G\u0013\u001fZÃtÆ!򊨸QE", "û\u001cý": false, "2": "úØ£ò"}, {"񅐌]": false, "û\r=\tL×": true, "🱸«򕹌󞮇h󕅵": 106, "4ä": 695, "\u0006È\rÆ": 0.9894793352655991}, {"¸": 233, "򣔠": 0.2993656024183911, "񝑢": true, "dau\u001a󇙃/󦚇O#򿍓": false, "": false, "\u000bD9åÑF\u001b񥮛ÃSý7𡳨": true, "ࢆÐ{\u001f5µO®󱐫J󓁱x\u0011Á\u0016": 314, "\u001b´D¤񝰈𝓮¥¡󬲾ý*U?(í": false, "ÂÆ>ð󟁩=}": true, "4𯘝+񷑩¶񕣊õ򸺊Q{񿎯t\u001bä¤": 13}, {"\"\u0012": true, ".¾𨟚flqfÇé": 299, "BD": 52}], "max_tokens": 783, "temperature": 1.7744069698916215e-57, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_context_serializable_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "'Graph' object is not callable"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"?4bûÐÝS»\u0010󍫴ó´񓉣": 368}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": false, "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.0}, {"pRýÑ": 731}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"?4bûÐÝS»\u0010󍫴ó´񓉣": 368}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": false, "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}, {"pRýÑ": 731}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"pRýÑ": 731}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": false, "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}, {"pRýÑ": 731}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"pRýÑ": 731}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}, {"pRýÑ": 731}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"pRýÑ": 731}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"pRýÑ": 731}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "å\u0019\u0000Ï": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "£«ªkg\u0018󪋺|": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "𘦂:󿅍Ã": 0.3681229075401507}], "max_tokens": null, "temperature": 0.6727755811531441, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "/g", "context": [{"pRýÑ": 731}, {"\u0001t󭽷û": "å\u0019\u0000Ï", "\u0015iÕ¾¦🖋Ï\u001c¸`𓩋Õ󔦛ú‡": "\u000b1ò񍝶\u001a", "򟽋?ôð´Y򚄆󩸁": true, "ëxL)": 0.3681229075401507, "å\u0019\u0000Ï": true, "񘎀È": true, "¾񁵟": "\u000b1ò񍝶\u001a", "Í@6¤": 0.767138717899071, "Gl": true, "0": ""}, {"0": ""}], "max_tokens": null, "temperature": 0.0, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "􍑷é^𷷫󇌏", "context": [{"Ot2Ú´": 643, "\\": 0.8019143060812248, "True": 546, "ý{": false}], "max_tokens": null, "temperature": 1.7406055185135676, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "􍑷é^𷷫󇌏", "context": [{"True": 643, "\\": 0.8019143060812248, "0": ""}], "max_tokens": null, "temperature": 0.0, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "qa_graph_forward_returns_dict_strings_failed", "query": "0", "context": [], "max_tokens": null, "temperature": 0.0, "error": "assert False\n +  where False = isinstance(0.8, str)"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\nuç", "mode": "rag", "precision": null, "recall": 0.7430573012157623, "f1": 0.5972821974336363, "faithfulness": 0.00409221345127997, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\nuç", "mode": "rag", "precision": null, "recall": 0.00409221345127997, "f1": 0.5972821974336363, "faithfulness": 0.00409221345127997, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\nuç", "mode": "rag", "precision": 0.0, "recall": null, "f1": 0.5972821974336363, "faithfulness": 0.00409221345127997, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\nuç", "mode": "rag", "precision": 0.5972821974336363, "recall": null, "f1": 0.5972821974336363, "faithfulness": 0.00409221345127997, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\nuç", "mode": "rag", "precision": 0.5972821974336363, "recall": null, "f1": 0.5972821974336363, "faithfulness": 0.5972821974336363, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\r", "mode": "rag", "precision": 0.5972821974336363, "recall": null, "f1": 0.5972821974336363, "faithfulness": 0.5972821974336363, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\r", "mode": "rag", "precision": 0.5972821974336363, "recall": null, "f1": 0.5972821974336363, "faithfulness": 0.5972821974336363, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": null, "faithfulness": 0.5972821974336363, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": null, "faithfulness": null, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": null, "faithfulness": null, "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "faithfulness": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_numeric_fields_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "faithfulness": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "`\u0010󆁃ð򡑊'􌂉ñHüÕÚ]\u0019w×)򀾎wf", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "󬎡ÓcU®ü¸", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "$»񧀇?", "𳡂\u0000\u0016Ä7´", "×3"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...0\\x16Ä\\x807´', '×3']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "`\u0010󆁃ð򡑊'􌂉ñHüÕÚ]\u0019w×)򀾎wf", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "󬎡ÓcU®ü¸", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "􅺳񰯒ÍÉ7~hº\u0002", "𳡂\u0000\u0016Ä7´", "×3"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...0\\x16Ä\\x807´', '×3']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "`\u0010󆁃ð򡑊'􌂉ñHüÕÚ]\u0019w×)򀾎wf", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "󬎡ÓcU®ü¸", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "𥷧", "𳡂\u0000\u0016Ä7´", "×3"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...0\\x16Ä\\x807´', '×3']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "`\u0010󆁃ð򡑊'􌂉ñHüÕÚ]\u0019w×)򀾎wf", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "󬎡ÓcU®ü¸", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x16Ä\\x807´', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "`\u0010󆁃ð򡑊'􌂉ñHüÕÚ]\u0019w×)򀾎wf", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x16Ä\\x807´', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "􅺳񰯒ÍÉ7~hº\u0002", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x16Ä\\x807´', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x16Ä\\x807´', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x16Ä\\x807´', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´", "𥷧"], "error": "assert ['\\U000693eem..., '\\x8b', ...] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains 3 more items, first extra item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...x00\\x16Ä\\x807´', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...3842\\x00\\x16Ä\\x807´']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...', '\\x8b', '𥷧', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...@罟', '\\x8b', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...78Ã@罟', '\\x8b', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", ""], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...00ca978Ã@罟', '\\x8b']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\U000ca978Ã@罟', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...', '\\U000ca978Ã@罟']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...', '𥷧', '𥷧', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...a0|Ê', '𥷧', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...2\\xa0|Ê', '𥷧', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...8J\\x82\\xa0|Ê', '𥷧']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...ecd8J\\x82\\xa0|Ê', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...U0001ecd8J\\x82\\xa0|Ê']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...30Ç\\x97', '\\x1a', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...003c230Ç\\x97', '\\x1a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\U0003c230Ç\\x97', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...c7-¾\\U0003c230Ç\\x97']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "𳡂\u0000\u0016Ä7´", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...\\x807´', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 󊥸Ã@罟: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000ca978Ã@罟'...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´", "0"], "error": "assert ['\\U000693eem..., '\\x8b', ...] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains 2 more items, first extra item: '\\U00033842\\x00\\x16Ä\\x807´'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "𳡂\u0000\u0016Ä7´"], "error": "assert ['\\U000693eem..., '\\x8b', ...] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains 2 more items, first extra item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧", "0"], "error": "assert ['\\U000693eem..., '\\x8b', ...] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains 2 more items, first extra item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "𥷧"], "error": "assert ['\\U000693eem...8Ã@罟', '\\x8b'] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains 2 more items, first extra item: '\\x8b'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "", "0"], "error": "assert ['\\U000693eem..., '\\x8b', ...] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", ""], "error": "assert ['\\U000693eem...8Ã@罟', '\\x8b'] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains one more item: '\\x8b'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟", "0"], "error": "assert ['\\U000693eem...a978Ã@罟', '0'] == ['\\U000693eem...a978Ã@罟', ...]\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "󊥸Ã@罟"], "error": "assert ['\\U000693eem...U000ca978Ã@罟'] == ['\\U000693eem...U000ca978Ã@罟']\n  \n  At index 4 diff: '\\U000ca978Ã@罟' != '𥷧'\n  Right contains one more item: '\\U000ca978Ã@罟'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧", "0"], "error": "assert ['\\U000693eem...|Ê', '𥷧', '0'] == ['\\U000693eem...'𥷧', '𥷧', '0']\n  \n  At index 4 diff: '0' != '𥷧'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "t򌛎𞳘J |Ê", "𥷧", "𥷧"], "error": "assert ['\\U000693eem...2\\xa0|Ê', '𥷧'] == ['\\U000693eem...|Ê', '𥷧', '𥷧']\n  \n  Right contains one more item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "\u001a", "0", "𥷧", "𥷧"], "error": "assert ['\\U000693eem...1a', '0', '𥷧'] == ['\\U000693eem...'0', '𥷧', '𥷧']\n  \n  Right contains one more item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["񩏮m¬󑪳7-¾𼈰Ç", "0", "0", "𥷧", "𥷧"], "error": "assert ['\\U000693eem...97', '0', '𥷧'] == ['\\U000693eem...'0', '𥷧', '𥷧']\n  \n  At index 2 diff: '𥷧' != '0'\n  Right contains 2 more items, first extra item: '𥷧'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "𳡂\u0000\u0016Ä7´", "tags": ["0", "0", "0", "𥷧", "𥷧"], "error": "assert ['0', '𥷧'] == ['0', '0', '0', '𥷧', '𥷧']\n  \n  At index 1 diff: '𥷧' != '0'\n  Right contains 3 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󊥸Ã@罟", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "𥷧", "𥷧"], "error": "assert ['0', '𥷧'] == ['0', '0', '0', '𥷧', '𥷧']\n  \n  At index 1 diff: '𥷧' != '0'\n  Right contains 3 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "𥷧", "𥷧"], "error": "assert ['0', '𥷧'] == ['0', '0', '0', '𥷧', '𥷧']\n  \n  At index 1 diff: '𥷧' != '0'\n  Right contains 3 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "𥷧", "0"], "error": "assert ['0', '𥷧'] == ['0', '0', '0', '𥷧', '0']\n  \n  At index 1 diff: '𥷧' != '0'\n  Right contains 3 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "𥷧"], "error": "assert ['0', '𥷧'] == ['0', '0', '0', '𥷧']\n  \n  At index 1 diff: '𥷧' != '0'\n  Right contains 2 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0', '0']\n  \n  Right contains 3 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0']\n  \n  Right contains 2 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\u001a\u0019ÙþA", "mode": "reader", "query": "‌\u0016", "tags": ["񊍐ú\u0005ð"], "error": "1 validation error for GoldCase\n  Value error, \u001a\u0019ÙþA: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x1a\\x19ÙþA', '... ['\\U0004a350ú\\x05ð']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "‌\u0016", "mode": "reader", "query": "‌\u0016", "tags": ["񊍐ú\u0005ð"], "error": "1 validation error for GoldCase\n  Value error, ‌\u0016: reader mode requires gt_answer [type=value_error, input_value={'id': '\\u200c\\x16', 'mod... ['\\U0004a350ú\\x05ð']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "‌\u0016", "mode": "reader", "query": "‌\u0016", "tags": ["‌\u0016"], "error": "1 validation error for GoldCase\n  Value error, ‌\u0016: reader mode requires gt_answer [type=value_error, input_value={'id': '\\u200c\\x16', 'mod... 'tags': ['\\u200c\\x16']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "‌\u0016", "mode": "reader", "query": "‌\u0016", "tags": ["‌\u0016"], "error": "1 validation error for GoldCase\n  Value error, ‌\u0016: reader mode requires gt_answer [type=value_error, input_value={'id': '\\u200c\\x16', 'mod... 'tags': ['\\u200c\\x16']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "‌\u0016", "mode": "reader", "query": "‌\u0016", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ‌\u0016: reader mode requires gt_answer [type=value_error, input_value={'id': '\\u200c\\x16', 'mod...00c\\x16', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "‌\u0016", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ‌\u0016: reader mode requires gt_answer [type=value_error, input_value={'id': '\\u200c\\x16', 'mod...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "hGF,5񮤔}ÁêlÇY", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "𹍝򰸡\u0005Ì\u001cÔ", "¯Ó􆮉5󌛖򖍢¿", ")Ób­ë8'<򟏾íý%S", "ý򂧁q񅎭", ""], "error": "1 validation error for GoldCase\n  Value error, hGF,5񮤔}ÁêlÇY: reader mode requires gt_answer [type=value_error, input_value={'id': 'hGF,5\\U0006e914}...c1q\\U000453ad', '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "hGF,5񮤔}ÁêlÇY", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "𹍝򰸡\u0005Ì\u001cÔ", "¯Ó􆮉5󌛖򖍢¿", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", ""], "error": "1 validation error for GoldCase\n  Value error, hGF,5񮤔}ÁêlÇY: reader mode requires gt_answer [type=value_error, input_value={'id': 'hGF,5\\U0006e914}...009f3feíý%S\", '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "hGF,5񮤔}ÁêlÇY", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "𹍝򰸡\u0005Ì\u001cÔ", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", ""], "error": "1 validation error for GoldCase\n  Value error, hGF,5񮤔}ÁêlÇY: reader mode requires gt_answer [type=value_error, input_value={'id': 'hGF,5\\U0006e914}...009f3feíý%S\", '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "hGF,5񮤔}ÁêlÇY", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "𹍝򰸡\u0005Ì\u001cÔ", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY", ""], "error": "1 validation error for GoldCase\n  Value error, hGF,5񮤔}ÁêlÇY: reader mode requires gt_answer [type=value_error, input_value={'id': 'hGF,5\\U0006e914}...e914}ÁêlÇY', '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "hGF,5񮤔}ÁêlÇY", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY", ""], "error": "1 validation error for GoldCase\n  Value error, hGF,5񮤔}ÁêlÇY: reader mode requires gt_answer [type=value_error, input_value={'id': 'hGF,5\\U0006e914}...e914}ÁêlÇY', '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY", ""], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...e914}ÁêlÇY', '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY", ""], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...e914}ÁêlÇY', '\\x9a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...006e914}ÁêlÇY', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "hGF,5񮤔}ÁêlÇY"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...,5\\U0006e914}ÁêlÇY']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...\\U0009f3feíý%S\", '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", ")Ób­ë8'<򟏾íý%S"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...ë8'<\\U0009f3feíý%S\"]}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...\\U0009f3feíý%S\", '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", ")Ób­ë8'<򟏾íý%S"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...ë8'<\\U0009f3feíý%S\"]}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode... ['7l', '>', '7l', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "7l"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...ags': ['7l', '>', '7l']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...tags': ['7l', '>', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", ">"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...', 'tags': ['7l', '>']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l", "0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...', 'tags': ['7l', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["7l"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...ee72²', 'tags': ['7l']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "򬆗򟼰¤򞹲²", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...9ee72²', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": ">", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, >: reader mode requires gt_answer [type=value_error, input_value={'id': '>', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "oracle", "precision": 0.5, "recall": null, "f1": 0.5204321119757765, "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "oracle", "precision": 0.5, "recall": null, "f1": 0.5204321119757765, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "oracle", "precision": 0.5, "recall": null, "f1": 0.5, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "oracle", "precision": null, "recall": null, "f1": null, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "\u001c", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\x1c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\x1e', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value=' ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value=' ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,Ø~", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,Ø~", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,Ø~", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,Ø~", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,Ø", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m£,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197m,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u00197,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "\u0019,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "Æ»­,¬񞦪\u0002\u000fk", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "\u0016", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "array", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "\u0016", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "R", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "A", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "?", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "=", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ";", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
