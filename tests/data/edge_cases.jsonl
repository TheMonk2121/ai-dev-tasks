{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1\u00b1\u00fe", "b": "\u00b3\u00e7\u0091\\\u00f1", "ca": 3, "cb": 6, "cab": 5}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1\u00b1\u00fe", "b": "\u00b3\u00e7\u0091\\\u00f1", "ca": 3, "cb": 6, "cab": 5}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1\u00b1\u00fe", "b": "00000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1\u00b1\u00fe", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1\u00b1", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2\u00e1", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I\u00e2", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1I", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34\u00d1", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef\ud902\ude34", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N\u00ef", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56N", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\u00b0\ud9cf\udf56", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud9cf\udf56", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfa9", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfa7", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfa5", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfa3", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udfa1", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udf97", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udf83", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udf5b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udf0b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\ude6b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c8\udd2b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c7\udeab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c6\uddab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8c3\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8be\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8b4\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud8a0\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud878\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud828\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ud800\udfab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\uabab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua1ab", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua06b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua01b", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua007", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua003", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua001", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua000", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "\ua000", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5032971848220781, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.01, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.01, 0.5, 0.2730447592465839, 0.35842892706785257], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5032971848220781, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5032971848220781, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257, 0.3333333333333333], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5032971848220781, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257, 0.3333333333333333], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5032971848220781, 0.2723487781630478, 0.2730447592465839, 0.35842892706785257, 0.3333333333333333], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.2730447592465839, 0.35842892706785257, 0.3333333333333333, 0.01], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.2730447592465839, 0.35842892706785257, 0.3333333333333333, 0.25], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.2730447592465839, 0.35842892706785257, 0.5, 0.25], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.2730447592465839, 0.5, 0.5, 0.25], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5, 0.5, 0.5, 0.25], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5, 0.5, 0.5, 0.5], "t": -0.0, "out": NaN}
{"test": "test_temp_scaler_output_bounds", "conf": [0.5, 0.5, 0.5, 0.5, 0.5], "t": -0.0, "out": NaN}
{"test": "test_token_count_monotonic_concat", "a": "Úùùå", "b": "M¬ñR√ó\u0006", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Úùùå", "b": "M¬ñR√ó\u0006", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Úùùå", "b": "00000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Úùùå", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ùùå", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩå", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩä", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩà", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩÜ", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩÑ", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏΩÇ", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº∏", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "ÏºÆ", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº™", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº®", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº¶", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº•", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº£", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïº°", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïºü", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïºû", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ïºû", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "auto_property_failure::test_feature_schema_props.py", "nodeid": "tests/property/test_feature_schema_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "error": "unsupported operand type(s) for |: 'ArrayF32WithShape' and 'NoneType'", "locals": {"__name__": "tests.property.test_feature_schema_props", "__doc__": "\nProperty-based tests for FusionFeatures serialization.\n", "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x104f86330>", "__spec__": "ModuleSpec(name='tests.property.test_feature_schema_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x104f86330>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/propert", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_feature_schema_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "np": "<module 'numpy' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/numpy/__init__.py'>", "pytest": "<module 'pytest' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/pytest/__init__.py'>"}}
{"test": "auto_property_failure::test_feature_schema_props.py", "nodeid": "tests/property/test_feature_schema_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "error": "unsupported operand type(s) for |: 'ArrayF32WithShape' and 'NoneType'", "locals": {"__name__": "tests.property.test_feature_schema_props", "__doc__": "\nProperty-based tests for FusionFeatures serialization.\n", "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x101b73620>", "__spec__": "ModuleSpec(name='tests.property.test_feature_schema_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x101b73620>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/propert", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_feature_schema_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "np": "<module 'numpy' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/numpy/__init__.py'>", "pytest": "<module 'pytest' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/pytest/__init__.py'>"}}
{"test": "auto_property_failure::test_sanitize_prompt_idempotent", "nodeid": "tests/property/test_validation_props.py::TestPromptSanitizationProperties::test_sanitize_prompt_idempotent", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py", "error": "Blocked pattern detected: {{", "locals": {"self": "<tests.property.test_validation_props.TestPromptSanitizationProperties object at 0x12f511970>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x12f502980>"}}
{"test": "auto_property_failure::test_feature_schema_props.py", "nodeid": "tests/property/test_feature_schema_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "error": "unsupported operand type(s) for |: 'ArrayF32WithShape' and 'NoneType'", "locals": {"__name__": "tests.property.test_feature_schema_props", "__doc__": "\nProperty-based tests for FusionFeatures serialization.\n", "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x105252900>", "__spec__": "ModuleSpec(name='tests.property.test_feature_schema_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x105252900>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/propert", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_feature_schema_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_feature_schema_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "np": "<module 'numpy' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/numpy/__init__.py'>", "pytest": "<module 'pytest' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/pytest/__init__.py'>"}}
{"test": "auto_property_failure::test_retrieval_invariants.py", "nodeid": "tests/property/test_retrieval_invariants.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_invariants.py", "error": "unable to open database file", "locals": {"__name__": "tests.property.test_retrieval_invariants", "__doc__": null, "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x105252900>", "__spec__": "ModuleSpec(name='tests.property.test_retrieval_invariants', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x105252900>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/propert", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_invariants.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_retrieval_invariants.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "annotations": "_Feature((3, 7, 0, 'beta', 1), None, 16777216)", "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "os": "<module 'os' (frozen)>"}}
{"test": "test_sanitize_prompt_accepts_response_input_unexpected_exception", "response": "}}", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: }}"}
{"test": "test_sanitize_prompt_accepts_response_input_unexpected_exception", "response": "}}", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: }}"}
{"test": "test_sanitize_prompt_accepts_response_input_unexpected_exception", "response": "{{", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: {{"}
{"test": "test_sanitize_prompt_accepts_response_input_unexpected_exception", "response": "{{", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: {{"}
{"test": "auto_property_failure::test_sanitize_prompt_accepts_response_input", "nodeid": "tests/property/test_validation_props.py::TestValidationProperties::test_sanitize_prompt_accepts_response_input", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py", "error": "Unexpected exception type: <class 'src.utils.prompt_sanitizer.SecurityError'>\nassert False\n +  where False = isinstance(SecurityError('Blocked pattern detected: {{'), (ValueError | TypeError))", "locals": {"self": "<tests.property.test_validation_props.TestValidationProperties object at 0x1064246b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x106400f40>"}}
{"test": "test_unicode_range_monotonicity", "text": "'ƒ¥Q\\U0008474f\\U0005acc4√Ö'", "a": "'ƒ¥Q'", "b": "'\\U0008474f\\U0005acc4√Ö'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç√ò\\U000600eb¬¢ƒÖX'", "a": "'¬π√ç√ò'", "b": "'\\U000600eb¬¢ƒÖX'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√û√öR¬¶\\U000e98f0ƒµ'", "a": "'√û√öR'", "b": "'¬¶\\U000e98f0ƒµ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç√ò\\U000600eb¬¢ƒÖX'", "a": "'¬π√ç√ò'", "b": "'\\U000600eb¬¢ƒÖX'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç√ò\\U000600eb¬¢ƒÖ'", "a": "'¬π√ç√ò'", "b": "'\\U000600eb¬¢ƒÖ'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç√ò\\U000600eb¬¢'", "a": "'¬π√ç'", "b": "'√ò\\U000600eb¬¢'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç√ò\\U000600ebƒÖ'", "a": "'¬π√ç'", "b": "'√ò\\U000600ebƒÖ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ç\\U000600eb¬¢ƒÖ'", "a": "'¬π√ç'", "b": "'\\U000600eb¬¢ƒÖ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π√ò\\U000600eb¬¢ƒÖ'", "a": "'¬π√ò'", "b": "'\\U000600eb¬¢ƒÖ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√ç√ò\\U000600eb¬¢ƒÖ'", "a": "'√ç√ò'", "b": "'\\U000600eb¬¢ƒÖ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬¢¬π√ç√òƒÖ\\U000600eb'", "a": "'¬¢¬π√ç'", "b": "'√òƒÖ\\U000600eb'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π√ç√òƒÖ\\U000600eb'", "a": "'0¬π√ç'", "b": "'√òƒÖ\\U000600eb'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00√ç√òƒÖ\\U000600eb'", "a": "'00√ç'", "b": "'√òƒÖ\\U000600eb'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'01√ç√òƒÖ\\U000600eb'", "a": "'01√ç'", "b": "'√òƒÖ\\U000600eb'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π0√òƒÖ\\U000600eb'", "a": "'0¬π0'", "b": "'√òƒÖ\\U000600eb'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π00ƒÖ\\U000600eb'", "a": "'0¬π0'", "b": "'0ƒÖ\\U000600eb'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000\\U000600eb'", "a": "'0¬π0'", "b": "'00\\U000600eb'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000∞í∫'", "a": "'0¬π0'", "b": "'00∞í∫'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000òöñ'", "a": "'0¬π0'", "b": "'00òöñ'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ¥'", "a": "'0¬π0'", "b": "'00ÎΩ¥'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ≤'", "a": "'0¬π0'", "b": "'00ÎΩ≤'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ∞'", "a": "'0¬π0'", "b": "'00ÎΩ∞'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩÆ'", "a": "'0¬π0'", "b": "'00ÎΩÆ'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ¨'", "a": "'0¬π0'", "b": "'00ÎΩ¨'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ™'", "a": "'0¬π0'", "b": "'00ÎΩ™'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩ†'", "a": "'0¬π0'", "b": "'00ÎΩ†'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎΩå'", "a": "'0¬π0'", "b": "'00ÎΩå'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Îº§'", "a": "'0¬π0'", "b": "'00Îº§'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Îªî'", "a": "'0¬π0'", "b": "'00Îªî'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î∏¥'", "a": "'0¬π0'", "b": "'00Î∏¥'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î∂î'", "a": "'0¬π0'", "b": "'00Î∂î'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000ÎµÑ'", "a": "'0¬π0'", "b": "'00ÎµÑ'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î¥ú'", "a": "'0¬π0'", "b": "'00Î¥ú'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î¥à'", "a": "'0¬π0'", "b": "'00Î¥à'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥æ'", "a": "'0¬π0'", "b": "'00Î≥æ'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥∫'", "a": "'0¬π0'", "b": "'00Î≥∫'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥π'", "a": "'0¬π0'", "b": "'00Î≥π'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π00Î≥π'", "a": "'0¬π'", "b": "'00Î≥π'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π000Î≥π'", "a": "'¬π0'", "b": "'00Î≥π'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬π00Î≥π'", "a": "'00¬π'", "b": "'00Î≥π'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'01000Î≥π'", "a": "'010'", "b": "'00Î≥π'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥∑'", "a": "'0¬π0'", "b": "'00Î≥∑'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥∂'", "a": "'0¬π0'", "b": "'00Î≥∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π00Î≥∂'", "a": "'0¬π'", "b": "'00Î≥∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬π000Î≥∂'", "a": "'¬π0'", "b": "'00Î≥∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬π00Î≥∂'", "a": "'00¬π'", "b": "'00Î≥∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'01000Î≥∂'", "a": "'010'", "b": "'00Î≥∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬π000Î≥∂'", "a": "'0¬π0'", "b": "'00Î≥∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "auto_property_failure::test_unicode_range_monotonicity", "nodeid": "tests/property/test_unicode_monotonicity_props.py::test_unicode_range_monotonicity", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_unicode_monotonicity_props.py", "error": "Unicode range violation: 5 -> 3 (reduction: 40.00%)\nassert 3 >= 5", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1109ad8a0>"}}
{"test": "test_token_count_monotonic_concat", "a": "√ΩC", "b": "√≥Òã∑Ñ√å√Ö¬∞", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "≤Éõ\u00066", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "≤Éõ\u00066", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "≤Éõ\u0006", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "≤Éõ", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "íÉõ", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "·£õ", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "‡£õ", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "—≠", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "»∂", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "¬ø√à√áJ√™√ç", "b": "»¥", "ca": 6, "cb": 3, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "000000", "b": "»¥", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "00000", "b": "»¥", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "»¥", "b": "000000", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "»¥", "b": "00000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "000000", "b": "»¥", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "»¥", "b": "000000", "ca": 3, "cb": 5, "cab": 3}
{"test": "auto_property_failure::test_monotonic_concat", "nodeid": "tests/property/test_token_count_props.py::test_monotonic_concat", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_token_count_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1136a9940>"}}
{"test": "test_validation_short_strings_unexpected_exception", "text": "}}", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: }}"}
{"test": "test_validation_short_strings_unexpected_exception", "text": "}}", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: }}"}
{"test": "test_validation_short_strings_unexpected_exception", "text": "{{", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: {{"}
{"test": "test_validation_short_strings_unexpected_exception", "text": "{{", "exc_type": "<class 'src.utils.prompt_sanitizer.SecurityError'>", "error": "Blocked pattern detected: {{"}
{"test": "auto_property_failure::test_validation_handles_short_strings", "nodeid": "tests/property/test_validation_props.py::TestValidationEdgeCases::test_validation_handles_short_strings", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py", "error": "Unexpected exception for short string: <class 'src.utils.prompt_sanitizer.SecurityError'>\nassert False\n +  where False = isinstance(SecurityError('Blocked pattern detected: {{'), (ValueError | TypeError))", "locals": {"self": "<tests.property.test_validation_props.TestValidationEdgeCases object at 0x1090593a0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x109054180>"}}
{"test": "auto_property_failure::test_mmr_rerank_preserves_metadata", "nodeid": "tests/property/test_retrieval_comprehensive_props.py::TestMMRRerankingProperties::test_mmr_rerank_preserves_metadata", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_comprehensive_props.py", "error": "Original metadata key '0' missing for content: 0, score: 0.0, doc_id: doc_6887\nassert '0' in {'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}", "locals": {"self": "<tests.property.test_retrieval_comprehensive_props.TestMMRRerankingProperties object at 0x122bf8770>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x122bf42c0>"}}
{"test": "test_unicode_monotonic_concat", "a": "Cv√¨¬èM√õ", "b": "\u0002√∫J√áT√ágÚ∏ßôÒûÜª¬§≥ò´√∏¬ù", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "Úπ∂Ω√¢¬å", "b": "¬¶¬∫", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'-Infinity'", "a": "'-Inf'", "b": "'inity'", "ca": 5, "cb": 4, "cab": 4}
{"test": "auto_property_failure::test_case_result_score_bounds", "nodeid": "tests/property/test_eval_schemas_props.py::TestCaseResultProperties::test_case_result_score_bounds", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_eval_schemas_props.py", "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value=' ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error", "locals": {"self": "<tests.property.test_eval_schemas_props.TestCaseResultProperties object at 0x118c95640>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x118c5b9c0>"}}
{"test": "auto_property_failure::test_quality_gates_no_config_always_pass", "nodeid": "tests/property/test_quality_gates_props.py::test_quality_gates_no_config_always_pass", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_quality_gates_props.py", "error": "assert False is True\n +  where False = QualityGateResult(passed=False, warnings=['‚ö†Ô∏è  f1_score: 0.000 below soft threshold 0.150'], errors=['‚ùå f1_score: 0.000 below hard threshold 0.100'], metrics={'f1_score': 0.0}).passed", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11a01c680>"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "0": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"6Ûë¨¶+Ò¨îñ√®¬°√™\u0015$": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"0": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": "¬ö¨ºÉ√ΩÛÆ•àÚ∂≠ÑÙèæ®√¨¬©Ûê¥Ä\u001cTÚê†Ö¬†Ú∑´ñ$4|Úåæ¶√π√°"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "Ú™°çZ√ß+Ò™ñàq": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": "", ";√û√ÑÒóøîÛåΩπ*¬ä": "", "0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "COM1", "orig_meta": {"COM1": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "ÚµüÇ", "score": 3.1537969713793087e-173, "doc_id": "doc_7143", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": ""}, "got_meta": {"0": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": "", "0": ""}, "got_meta": {"0": "", "ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": "", "0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "ÚµüÇ", "orig_meta": {"ÚµüÇ": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_3471", "key": "0", "orig_meta": {"0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "auto_property_failure::test_mmr_rerank_preserves_metadata", "nodeid": "tests/property/test_retrieval_comprehensive_props.py::TestMMRRerankingProperties::test_mmr_rerank_preserves_metadata", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_comprehensive_props.py", "error": "Original metadata key '0' missing for content: 0, score: 0.0, doc_id: doc_3471\nassert '0' in {'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}", "locals": {"self": "<tests.property.test_retrieval_comprehensive_props.TestMMRRerankingProperties object at 0x11a077ad0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11a0709a0>"}}
{"test": "auto_property_failure::test_component_health_none_is_unhealthy", "nodeid": "tests/property/test_robustness_checks_props.py::test_component_health_none_is_unhealthy", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_robustness_checks_props.py", "error": "given must be called with at least one argument", "locals": {"arguments": [], "kwargs": {}, "exc": "<class 'hypothesis.errors.InvalidArgument'>", "message": "given must be called with at least one argument"}}
{"test": "test_unicode_range_monotonicity", "text": "'\\U00099c05√∞i'", "a": "'\\U00099c05'", "b": "'√∞i'", "ca": 3, "cb": 4, "cab": 3}
{"test": "auto_property_failure::test_component_health_none_is_unhealthy", "nodeid": "tests/property/test_robustness_checks_props.py::test_component_health_none_is_unhealthy", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_robustness_checks_props.py", "error": "Using `@settings` on a test without `@given` is completely pointless."}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥:0ƒì√ò9ƒå¬§\\U00080476\\U000c56d5√à'", "a": "'¬≥:0ƒì√ò'", "b": "'9ƒå¬§\\U00080476\\U000c56d5√à'", "ca": 7, "cb": 3, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'ƒ≠ƒÖ\\U0005b5ea8M√ß/'", "a": "'ƒ≠ƒÖ\\U0005b5ea'", "b": "'8M√ß/'", "ca": 3, "cb": 5, "cab": 4}
{"test": "test_unicode_monotonic_concat", "a": "√¶v", "b": "ÒíØ≠¬¶¬Ñ", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'decision'", "a": "'deci'", "b": "'sion'", "ca": 4, "cb": 4, "cab": 3}
{"test": "auto_property_failure::test_qa_flow_props.py", "nodeid": "tests/property/test_qa_flow_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_qa_flow_props.py", "error": "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable", "locals": {"__name__": "tests.property.test_qa_flow_props", "__doc__": "\nProperty tests for simple QA flow start routing.\n", "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x103369c10>", "__spec__": "ModuleSpec(name='tests.property.test_qa_flow_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x103369c10>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_qa_flow_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_qa_flow_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "asyncio": "<module 'asyncio' from '/Users/danieljacobs/.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/asyncio/__init__.py'>", "pytest": "<module 'pytest' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/pytest/__init__.py'>"}}
{"test": "auto_property_failure::test_compose_layers_precedence", "nodeid": "tests/property/test_config_resolve_props.py::test_compose_layers_precedence", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_config_resolve_props.py", "error": "Hypothesis found 4 distinct failures. (4 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x113b35580>"}}
{"test": "auto_property_failure::test_resolve_dsn_picks_primary", "nodeid": "tests/property/test_db_dsn_props.py::test_resolve_dsn_picks_primary", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_db_dsn_props.py", "error": "assert '0' == '\\r'\n  \n  Strings contain only whitespace, escaping them using repr()\n  - '\\r'\n  + '0'", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x113e8c680>"}}
{"test": "auto_property_failure::test_resolve_dsn_none_when_unset", "nodeid": "tests/property/test_db_dsn_props.py::test_resolve_dsn_none_when_unset", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_db_dsn_props.py", "error": "given must be called with at least one argument", "locals": {"arguments": [], "kwargs": {}, "exc": "<class 'hypothesis.errors.InvalidArgument'>", "message": "given must be called with at least one argument"}}
{"test": "auto_property_failure::test_pack_respects_limits_and_headers", "nodeid": "tests/property/test_packer_props.py::test_pack_respects_limits_and_headers", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_packer_props.py", "error": "Missing header in block: '[doc:\\n] 0'\nassert None", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x125b90d60>"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": "k"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "\u0005¬∏¬á√èÒµµç√Ñ¬ù_íúêÒÉóæ>m¬Ñ√Ä¬ñÒ∑Ç•¬á¬ÇR%": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "r)", "0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", ";¬∫Ò±ÜΩ√™¬ª": "", "0": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "q√ñ¬ü0", "score": 0.6353207199657612, "doc_id": "doc_7979", "key": "¬äm\u0019¬™¬ê√ßP¬è", "orig_meta": {"¬äm\u0019¬™¬ê√ßP¬è": "¬¶t√≥WÒóàπ√ñ\u0019", "0": "", "z@√ß¬±ÚêøÆÛ≠ôõ¬•Ûï∏ûÛï∂ñ": ""}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "test_mmr_preserves_metadata_value_mismatch", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_val": "0", "got_val": ""}
{"test": "test_mmr_preserves_metadata_missing_key", "content": "0", "score": 0.0, "doc_id": "doc_821", "key": "0", "orig_meta": {"0": "0"}, "got_meta": {"ingest_run_id": "legacy", "chunk_variant": "legacy", "chunk_id": "3e638bd4166e880c"}}
{"test": "auto_property_failure::test_mmr_rerank_preserves_metadata", "nodeid": "tests/property/test_retrieval_comprehensive_props.py::TestMMRRerankingProperties::test_mmr_rerank_preserves_metadata", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_comprehensive_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"self": "<tests.property.test_retrieval_comprehensive_props.TestMMRRerankingProperties object at 0x126d94a10>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x126d5f600>"}}
{"test": "auto_property_failure::test_known_tags_parsing_variants", "nodeid": "tests/property/test_settings_props.py::test_known_tags_parsing_variants", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_settings_props.py", "error": "Hypothesis found 3 distinct failures. (3 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x308b3b240>"}}
{"test": "auto_property_failure::test_settings_defaults_nonempty_known_tags", "nodeid": "tests/property/test_settings_props.py::test_settings_defaults_nonempty_known_tags", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_settings_props.py", "error": "given must be called with at least one argument", "locals": {"arguments": [], "kwargs": {}, "exc": "<class 'hypothesis.errors.InvalidArgument'>", "message": "given must be called with at least one argument"}}
{"test": "test_unicode_monotonic_concat", "a": "\u0014Ò∂®ó", "b": "lorem ŸÑÿß ÿ®ÿ≥ŸÖ ÿßŸÑŸÑŸá ipsum ‰Ω†Â•Ω1234‰Ω†Â•Ω", "ca": 3, "cb": 21, "cab": 20}
{"test": "test_unicode_range_monotonicity", "text": "'d\\U000bbfd8¬™kl'", "a": "'d\\U000bbfd8'", "b": "'¬™kl'", "ca": 3, "cb": 5, "cab": 3}
{"test": "auto_property_failure::test_compose_layers_precedence", "nodeid": "tests/property/test_config_resolve_props.py::test_compose_layers_precedence", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_config_resolve_props.py", "error": "Hypothesis found 3 distinct failures. (3 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x13260f740>"}}
{"test": "auto_property_failure::test_case_result_score_bounds", "nodeid": "tests/property/test_eval_schemas_props.py::TestCaseResultProperties::test_case_result_score_bounds", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_eval_schemas_props.py", "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value=' ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error", "locals": {"self": "<tests.property.test_eval_schemas_props.TestCaseResultProperties object at 0x136519460>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x140b16c00>"}}
{"test": "auto_property_failure::test_pack_respects_limits_and_headers", "nodeid": "tests/property/test_packer_props.py::test_pack_respects_limits_and_headers", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_packer_props.py", "error": "Missing header in block: '[doc:0\\n] 0'\nassert None", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x141458540>"}}
{"test": "auto_property_failure::test_known_tags_parsing_variants", "nodeid": "tests/property/test_settings_props.py::test_known_tags_parsing_variants", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_settings_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1512ee980>"}}
{"test": "test_unicode_range_monotonicity", "text": "'Test content'", "a": "'Test c'", "b": "'ontent'", "ca": 4, "cb": 5, "cab": 4}
{"test": "test_unicode_range_monotonicity", "text": "'¬µƒìO√°¬£\\U0005b700¬¢O\\U000decdd'", "a": "'¬µƒìO√°'", "b": "'¬£\\U0005b700¬¢O\\U000decdd'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÛÜåü\u0004&", "ca": 7, "cb": 4, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÛÜåü\u0004&", "ca": 7, "cb": 4, "cab": 4}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÛÜåü\u0004", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÛÜåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåù", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåõ", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåô", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåó", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåï", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜåã", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜã∑", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜãè", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜâø", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜáü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÜÇü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÖ∏ü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÖ§ü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÑºü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÉ¨ü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÒÅåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ºåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "≤åü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ûåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "îåü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ë¨ü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "êúü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "Ô¥ü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "ÔØü", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "Ô¨ø", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "Ô¨ó", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0√†\u0014¬Ω√ùl√é√¢", "b": "Ô¨É", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "00000000", "b": "Ô¨É", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "0000000", "b": "Ô¨É", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ô¨É", "b": "00000000", "ca": 3, "cb": 6, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ô¨É", "b": "0000000", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "00000000", "b": "Ô¨É", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_token_count_monotonic_concat", "a": "Ô¨É", "b": "00000000", "ca": 3, "cb": 6, "cab": 3}
{"test": "auto_property_failure::test_monotonic_concat", "nodeid": "tests/property/test_token_count_props.py::test_monotonic_concat", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_token_count_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1106267a0>"}}
{"test": "test_unicode_range_monotonicity", "text": "'√∞√±\\U0003f88bƒñ'", "a": "'√∞√±'", "b": "'\\U0003f88bƒñ'", "ca": 4, "cb": 3, "cab": 3}
{"test": "auto_property_failure::test_unicode_edge_cases_character_tokenizer[a-\\u0301]", "nodeid": "tests/property/test_character_tokenizer_props.py::test_unicode_edge_cases_character_tokenizer[a-\\u0301]", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py", "error": "Unicode edge case violation: 'a' + 'ÃÅ' -> 1 + 1 = 2, got 1\nassert 1 == 2", "locals": {"a": "a", "b": "ÃÅ", "tokenizer": "UnicodeCharacterTokenizer(normalize_unicode=True, include_whitespace=True, include_control_chars=False)", "ca": 1, "cb": 1, "ab": 1, "expected": 2, "@py_assert1": false, "@py_format3": "1 == 2", "@py_format5": "Unicode edge case violation: 'a' + 'ÃÅ' -> 1 + 1 = 2, got 1\n>assert 1 == 2"}}
{"test": "auto_property_failure::test_unicode_edge_cases_character_tokenizer[e-\\u0300]", "nodeid": "tests/property/test_character_tokenizer_props.py::test_unicode_edge_cases_character_tokenizer[e-\\u0300]", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py", "error": "Unicode edge case violation: 'e' + 'ÃÄ' -> 1 + 1 = 2, got 1\nassert 1 == 2", "locals": {"a": "e", "b": "ÃÄ", "tokenizer": "UnicodeCharacterTokenizer(normalize_unicode=True, include_whitespace=True, include_control_chars=False)", "ca": 1, "cb": 1, "ab": 1, "expected": 2, "@py_assert1": false, "@py_format3": "1 == 2", "@py_format5": "Unicode edge case violation: 'e' + 'ÃÄ' -> 1 + 1 = 2, got 1\n>assert 1 == 2"}}
{"test": "auto_property_failure::test_unicode_edge_cases_character_tokenizer[c-\\u0327]", "nodeid": "tests/property/test_character_tokenizer_props.py::test_unicode_edge_cases_character_tokenizer[c-\\u0327]", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py", "error": "Unicode edge case violation: 'c' + 'Ãß' -> 1 + 1 = 2, got 1\nassert 1 == 2", "locals": {"a": "c", "b": "Ãß", "tokenizer": "UnicodeCharacterTokenizer(normalize_unicode=True, include_whitespace=True, include_control_chars=False)", "ca": 1, "cb": 1, "ab": 1, "expected": 2, "@py_assert1": false, "@py_format3": "1 == 2", "@py_format5": "Unicode edge case violation: 'c' + 'Ãß' -> 1 + 1 = 2, got 1\n>assert 1 == 2"}}
{"test": "auto_property_failure::test_unicode_edge_cases_character_tokenizer[e-\\u0301]", "nodeid": "tests/property/test_character_tokenizer_props.py::test_unicode_edge_cases_character_tokenizer[e-\\u0301]", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py", "error": "Unicode edge case violation: 'e' + 'ÃÅ' -> 1 + 1 = 2, got 1\nassert 1 == 2", "locals": {"a": "e", "b": "ÃÅ", "tokenizer": "UnicodeCharacterTokenizer(normalize_unicode=True, include_whitespace=True, include_control_chars=False)", "ca": 1, "cb": 1, "ab": 1, "expected": 2, "@py_assert1": false, "@py_format3": "1 == 2", "@py_format5": "Unicode edge case violation: 'e' + 'ÃÅ' -> 1 + 1 = 2, got 1\n>assert 1 == 2"}}
{"test": "auto_property_failure::test_compose_layers_precedence", "nodeid": "tests/property/test_config_resolve_props.py::test_compose_layers_precedence", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_config_resolve_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1060328e0>"}}
{"test": "auto_property_failure::test_pack_respects_limits_and_headers", "nodeid": "tests/property/test_packer_props.py::test_pack_respects_limits_and_headers", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_packer_props.py", "error": "Missing header in block: '[doc:0\\n] 0'\nassert None", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x12f288040>"}}
{"test": "auto_property_failure::test_known_tags_parsing_variants", "nodeid": "tests/property/test_settings_props.py::test_known_tags_parsing_variants", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_settings_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x13f6137e0>"}}
{"test": "auto_property_failure::test_case_result_score_bounds", "nodeid": "tests/property/test_eval_schemas_props.py::TestCaseResultProperties::test_case_result_score_bounds", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_eval_schemas_props.py", "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value=' ', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error", "locals": {"self": "<tests.property.test_eval_schemas_props.TestCaseResultProperties object at 0x1252e55b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1252d13a0>"}}
{"test": "auto_property_failure::test_known_tags_parsing_variants", "nodeid": "tests/property/test_settings_props.py::test_known_tags_parsing_variants", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_settings_props.py", "error": "2 validation errors for EvaluationSettings\nknown_tags.str\n  Input should be a valid string [type=string_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\nknown_tags.list[str]\n  Input should be a valid list [type=list_type, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/list_type", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1366b6020>"}}
{"test": "test_unicode_monotonic_concat", "a": "ÚòÖ©S\u0001", "b": "√µ¬öO", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥\\U000945fe√çi√Æ'", "a": "'√Æsƒõ\\U000ffcf9¬£ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi√Æ'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥\\U000945fe√çi√Æ'", "a": "'√Æsƒõ\\U000ffcf9¬£ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi√Æ'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥\\U000945fe√ç'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï\\U000b4271√≠√≥\\U000945fe√ç'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥\\U000945fei'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï\\U000b4271√≠√≥\\U000945fei'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠√≥√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï\\U000b4271√≠√≥√çi'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≠\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï\\U000b4271√≠\\U000945fe√çi'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï\\U000b4271√≥\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï\\U000b4271√≥\\U000945fe√çi'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£ƒï√≠√≥\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'ƒï√≠√≥\\U000945fe√çi'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9¬£\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9¬£'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ\\U000ffcf9ƒï\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'√Æsƒõ\\U000ffcf9ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'√Æsƒõ¬£ƒï\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'√Æsƒõ¬£ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'is¬£√ç√≠√Æ√≥ƒïƒõ\\U000945fe\\U000b4271'", "a": "'is¬£√ç√≠'", "b": "'√Æ√≥ƒïƒõ\\U000945fe\\U000b4271'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s√Æƒõ¬£ƒï\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'s√Æƒõ¬£ƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√Æƒõƒï\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'s¬£√Æƒõƒï'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√Æƒïƒõ\\U000b4271√≠√≥\\U000945fe√çi'", "a": "'s¬£√Æƒïƒõ'", "b": "'\\U000b4271√≠√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√ç√≠√Æ√≥ƒïƒõ\\U000945fe\\U000b4271i'", "a": "'s¬£√ç√≠√Æ'", "b": "'√≥ƒïƒõ\\U000945fe\\U000b4271i'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æƒïƒõ\\U000b4271√≥\\U000945fe√çi'", "a": "'s¬£√≠√Æƒï'", "b": "'ƒõ\\U000b4271√≥\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥ƒïƒõ\\U000b4271\\U000945fe√çi'", "a": "'s¬£√≠√Æ√≥'", "b": "'ƒïƒõ\\U000b4271\\U000945fe√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥ƒïƒõ\\U000945fe\\U000b4271√çi'", "a": "'s¬£√≠√Æ√≥'", "b": "'ƒïƒõ\\U000945fe\\U000b4271√çi'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥ƒïƒõ\\U000945fe\\U000b4271i√ç'", "a": "'s¬£√≠√Æ√≥'", "b": "'ƒïƒõ\\U000945fe\\U000b4271i√ç'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥ƒïƒõi\\U000b4271√ç\\U000945fe'", "a": "'s¬£√≠√Æ√≥'", "b": "'ƒïƒõi\\U000b4271√ç\\U000945fe'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥ƒïi√ç\\U000b4271ƒõ\\U000945fe'", "a": "'s¬£√≠√Æ√≥'", "b": "'ƒïi√ç\\U000b4271ƒõ\\U000945fe'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥i√çƒï\\U000b4271ƒõ\\U000945fe'", "a": "'s¬£√≠√Æ√≥'", "b": "'i√çƒï\\U000b4271ƒõ\\U000945fe'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æi√ç√≥ƒï\\U000b4271ƒõ\\U000945fe'", "a": "'s¬£√≠√Æi'", "b": "'√ç√≥ƒï\\U000b4271ƒõ\\U000945fe'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'s¬£√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'s¬£√≠√Æi√ç√≥ƒï\\U000945feƒõ\\U000b4271'", "a": "'s¬£√≠√Æi'", "b": "'√ç√≥ƒï\\U000945feƒõ\\U000b4271'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬£√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬£√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'00√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'01√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'01√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0R√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0R√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0)√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0)√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'0¬°√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬°√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢√≠√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢√≠√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢0√Æ√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢0√Æ√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00√≥i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢00√≥'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢000i√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢000'", "b": "'i√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢0000√çƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢000'", "b": "'0√çƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000ƒï\\U000945feƒõ\\U000b4271'", "a": "'0¬¢000'", "b": "'00ƒï\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢000000\\U000945feƒõ\\U000b4271'", "a": "'0¬¢000'", "b": "'000\\U000945feƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢0000000ƒõ\\U000b4271'", "a": "'0¬¢000'", "b": "'0000ƒõ\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U000b4271'", "a": "'0¬¢000'", "b": "'00000\\U000b4271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00034271'", "a": "'0¬¢000'", "b": "'00000\\U00034271'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014265'", "a": "'0¬¢000'", "b": "'00000\\U00014265'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014263'", "a": "'0¬¢000'", "b": "'00000\\U00014263'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014261'", "a": "'0¬¢000'", "b": "'00000\\U00014261'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U0001425f'", "a": "'0¬¢000'", "b": "'00000\\U0001425f'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U0001425d'", "a": "'0¬¢000'", "b": "'00000\\U0001425d'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U0001425b'", "a": "'0¬¢000'", "b": "'00000\\U0001425b'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014251'", "a": "'0¬¢000'", "b": "'00000\\U00014251'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U0001423d'", "a": "'0¬¢000'", "b": "'00000\\U0001423d'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014215'", "a": "'0¬¢000'", "b": "'00000\\U00014215'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U000141c5'", "a": "'0¬¢000'", "b": "'00000\\U000141c5'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00014125'", "a": "'0¬¢000'", "b": "'00000\\U00014125'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00013fe5'", "a": "'0¬¢000'", "b": "'00000\\U00013fe5'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00013d65'", "a": "'0¬¢000'", "b": "'00000\\U00013d65'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00013865'", "a": "'0¬¢000'", "b": "'00000\\U00013865'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\U00012e55'", "a": "'0¬¢000'", "b": "'00000\\U00012e55'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000ë©ï'", "a": "'0¬¢000'", "b": "'00000ë©ï'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000êôì'", "a": "'0¬¢000'", "b": "'00000êôì'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000Ô±è'", "a": "'0¬¢000'", "b": "'00000Ô±è'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000\\ufb0f'", "a": "'0¬¢000'", "b": "'00000\\ufb0f'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000Ô¨Ö'", "a": "'0¬¢000'", "b": "'00000Ô¨Ö'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢00000000Ô¨É'", "a": "'0¬¢000'", "b": "'00000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢0000000Ô¨É'", "a": "'0¬¢000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢000000Ô¨É'", "a": "'0¬¢00'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00000000Ô¨É'", "a": "'0000'", "b": "'0000Ô¨É'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬¢0000000Ô¨É'", "a": "'¬¢000'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00000000¬¢Ô¨É'", "a": "'00000'", "b": "'000¬¢Ô¨É'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬¢000000Ô¨É'", "a": "'00¬¢00'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000000000Ô¨É'", "a": "'00000'", "b": "'0000Ô¨É'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'010000000Ô¨É'", "a": "'01000'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0Q0000000Ô¨É'", "a": "'0Q000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0O0000000Ô¨É'", "a": "'0O000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0M0000000Ô¨É'", "a": "'0M000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0K0000000Ô¨É'", "a": "'0K000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0I0000000Ô¨É'", "a": "'0I000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0G0000000Ô¨É'", "a": "'0G000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0C0000000Ô¨É'", "a": "'0C000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0000000Ô¨É'", "a": "'0A000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A000000Ô¨É'", "a": "'0A00'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'A0000000Ô¨É'", "a": "'A000'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00000000AÔ¨É'", "a": "'00000'", "b": "'000AÔ¨É'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00A000000Ô¨É'", "a": "'00A00'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'080000000Ô¨É'", "a": "'08000'", "b": "'0000Ô¨É'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0000000Ô¨É'", "a": "'0A000'", "b": "'0000Ô¨É'", "ca": 6, "cb": 3, "cab": 3}
{"test": "auto_property_failure::test_unicode_range_monotonicity", "nodeid": "tests/property/test_unicode_monotonicity_props.py::test_unicode_range_monotonicity", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_unicode_monotonicity_props.py", "error": "Unicode range violation: 6 -> 3 (reduction: 50.00%)\nassert 3 >= 6", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1367b32e0>"}}
{"test": "auto_property_failure::test_sanitize_prompt_removes_dangerous_patterns", "nodeid": "tests/property/test_validation_props.py::TestPromptSanitizationProperties::test_sanitize_prompt_removes_dangerous_patterns", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py", "error": "Blocked pattern detected: <script>", "locals": {"self": "<tests.property.test_validation_props.TestPromptSanitizationProperties object at 0x1367f9670>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1367ea340>"}}
{"test": "test_unicode_monotonic_concat", "a": "√Ä\u000f.¬º√Å√∞«£", "b": "Úê©óπàÜ", "ca": 8, "cb": 3, "cab": 5}
{"test": "test_token_count_monotonic_concat", "a": "Û¥πñ¬Ç07√∑‚µ∑Ò≠§ü", "b": "¬¥√®", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0TY", "b": "lÒãßãÚÅ∂•¬≤Úêñ®", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ì√âP¬ñÚÆÅ¢¬ä", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ì√âP¬ñÚÆÅ¢¬ä", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ì√âP¬ñÚÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ì√âPÚÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ì√âÚÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "√ìÚÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÚÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÆÅ¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "óê±", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòò", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòñ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòî", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòí", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòê", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îòé", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎòÑ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îó∞", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îóà", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îï∏", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îìò", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îéò", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "Îâò", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÜ∏", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÖ®", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÖî", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÖä", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÖÜ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÎÖÖ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "„ÖÖ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "·ÖÖ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢†", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢û", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢ú", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢ö", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢ò", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡¢é", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡°∫", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡°í", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‡†Ç", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "›¢", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "‹í", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "€æ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "€¥", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "€∞", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "€Æ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "ÀÆ", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "À¨", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "À™", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "À®", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "À¶", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0000", "b": "À•", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨√Ñ", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞¬¨¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "√∞√Ñ¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "¬¨√Ñ¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "¬¨¬π√Ñ√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π√Ñ√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00√Ñ√∞", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "01√Ñ√∞", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0!√Ñ√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0\\√Ñ√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0¬∑√Ñ√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0√∞", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π00", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π01", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0p", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0n", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0l", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0j", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0h", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0f", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0b", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0a", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬π0", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0¬πa", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00a", "b": "À•", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "¬π0a", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00a¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00¬πa", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0a0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "000¬π", "b": "À•", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "010¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0Q0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0@0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0O0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0M0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0K0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0I0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0G0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0=0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0C0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0A0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0?0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_monotonic_concat", "a": "0A00", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0A01", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0A0", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "0A¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00¬π", "b": "À•", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "A0¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "00A¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "080¬π", "b": "À•", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0¬π", "ca": 3, "cb": 6, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0000", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A¬π", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "00¬π", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "A0¬π", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "00A¬π", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "000¬π", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "010¬π", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "080¬π", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A00", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A01", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0!", "ca": 3, "cb": 6, "cab": 4}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0\\", "ca": 3, "cb": 6, "cab": 4}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0¬∑", "ca": 3, "cb": 6, "cab": 4}
{"test": "test_unicode_monotonic_concat", "a": "0A0¬π", "b": "À•", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "À•", "b": "0A0¬π", "ca": 3, "cb": 6, "cab": 3}
{"test": "auto_property_failure::test_unicode_monotonic_concat", "nodeid": "tests/property/test_unicode_monotonicity_props.py::test_unicode_monotonic_concat", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_unicode_monotonicity_props.py", "error": "Hypothesis found 2 distinct failures. (2 sub-exceptions)", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x140854b80>"}}
{"test": "test_unicode_range_monotonicity", "text": "'ƒΩZs\\U00104b33¬∫\\U000c1b92'", "a": "'ƒΩZs'", "b": "'\\U00104b33¬∫\\U000c1b92'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002¬•Yƒí\\U0009d874'", "a": "'¬≥ƒ®¬∫ƒ†√πW'", "b": "'√â\\U00037002¬•Yƒí\\U0009d874'", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002¬•Yƒí\\U0009d874'", "a": "'¬≥ƒ®¬∫ƒ†√πW'", "b": "'√â\\U00037002¬•Yƒí\\U0009d874'", "ca": 7, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002¬•Yƒí'", "a": "'¬≥ƒ®¬∫ƒ†√π'", "b": "'W√â\\U00037002¬•Yƒí'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002¬•Y'", "a": "'¬≥ƒ®¬∫ƒ†√π'", "b": "'W√â\\U00037002¬•Y'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002¬•'", "a": "'¬≥ƒ®¬∫ƒ†'", "b": "'√πW√â\\U00037002¬•'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW√â\\U00037002'", "a": "'¬≥ƒ®¬∫ƒ†'", "b": "'√πW√â\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√πW\\U00037002'", "a": "'¬≥ƒ®¬∫'", "b": "'ƒ†√πW\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†√π√â\\U00037002'", "a": "'¬≥ƒ®¬∫'", "b": "'ƒ†√π√â\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫ƒ†W√â\\U00037002'", "a": "'¬≥ƒ®¬∫'", "b": "'ƒ†W√â\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®¬∫√πW√â\\U00037002'", "a": "'¬≥ƒ®¬∫'", "b": "'√πW√â\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥ƒ®ƒ†√πW√â\\U00037002'", "a": "'¬≥ƒ®ƒ†'", "b": "'√πW√â\\U00037002'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬≥¬∫ƒ†√πW√â\\U00037002'", "a": "'¬≥¬∫ƒ†'", "b": "'√πW√â\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'ƒ®¬∫ƒ†√πW√â\\U00037002'", "a": "'ƒ®¬∫ƒ†'", "b": "'√πW√â\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'W¬≥¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'W¬≥¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬≥¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'0¬≥¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'00¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'01¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'01¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0)¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'0)¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'0\"¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'0\"¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'0¬±¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'0¬±¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞¬∫√â√πƒ†ƒ®\\U00037002'", "a": "'0¬∞¬∫√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞0√â√πƒ†ƒ®\\U00037002'", "a": "'0¬∞0√â'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞00√πƒ†ƒ®\\U00037002'", "a": "'0¬∞00'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞01√πƒ†ƒ®\\U00037002'", "a": "'0¬∞01'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞07√πƒ†ƒ®\\U00037002'", "a": "'0¬∞07'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞03√πƒ†ƒ®\\U00037002'", "a": "'0¬∞03'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02√πƒ†ƒ®\\U00037002'", "a": "'0¬∞02'", "b": "'√πƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞020ƒ†ƒ®\\U00037002'", "a": "'0¬∞02'", "b": "'0ƒ†ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞0200ƒ®\\U00037002'", "a": "'0¬∞02'", "b": "'00ƒ®\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000\\U00037002'", "a": "'0¬∞02'", "b": "'000\\U00037002'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000\\U00016ff6'", "a": "'0¬∞02'", "b": "'000\\U00016ff6'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îê§'", "a": "'0¬∞02'", "b": "'000Îê§'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îê¢'", "a": "'0¬∞02'", "b": "'000Îê¢'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îê†'", "a": "'0¬∞02'", "b": "'000Îê†'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îêû'", "a": "'0¬∞02'", "b": "'000Îêû'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îêú'", "a": "'0¬∞02'", "b": "'000Îêú'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îêö'", "a": "'0¬∞02'", "b": "'000Îêö'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îêê'", "a": "'0¬∞02'", "b": "'000Îêê'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îèº'", "a": "'0¬∞02'", "b": "'000Îèº'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îè≤'", "a": "'0¬∞02'", "b": "'000Îè≤'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000ÎèÆ'", "a": "'0¬∞02'", "b": "'000ÎèÆ'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îè¨'", "a": "'0¬∞02'", "b": "'000Îè¨'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îè™'", "a": "'0¬∞02'", "b": "'000Îè™'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞02000Îè©'", "a": "'0¬∞02'", "b": "'000Îè©'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞0200Îè©'", "a": "'0¬∞0'", "b": "'200Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞0000Îè©'", "a": "'0¬∞0'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞2000Îè©'", "a": "'0¬∞2'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'002000Îè©'", "a": "'002'", "b": "'000Îè©'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬∞02000Îè©'", "a": "'¬∞02'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000002¬∞Îè©'", "a": "'0000'", "b": "'02¬∞Îè©'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬∞2000Îè©'", "a": "'00¬∞2'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞00200Îè©'", "a": "'0¬∞00'", "b": "'200Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'020¬∞000Îè©'", "a": "'020¬∞'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000200¬∞Îè©'", "a": "'0002'", "b": "'00¬∞Îè©'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬∞00002Îè©'", "a": "'0¬∞00'", "b": "'002Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0002000Îè©'", "a": "'0002'", "b": "'000Îè©'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0102000Îè©'", "a": "'0102'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬Æ02000Îè©'", "a": "'0¬Æ02'", "b": "'000Îè©'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000Îè©'", "a": "'0¬¨02'", "b": "'000Îè©'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨00000Îè©'", "a": "'0¬¨00'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨01000Îè©'", "a": "'0¬¨01'", "b": "'000Îè©'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000„è©'", "a": "'0¬¨02'", "b": "'000„è©'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000·èè'", "a": "'0¬¨02'", "b": "'000·èè'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000\\u0a0e'", "a": "'0¬¨02'", "b": "'000\\u0a0e'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘¢'", "a": "'0¬¨02'", "b": "'000‘¢'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘†'", "a": "'0¬¨02'", "b": "'000‘†'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘û'", "a": "'0¬¨02'", "b": "'000‘û'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘ú'", "a": "'0¬¨02'", "b": "'000‘ú'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘ö'", "a": "'0¬¨02'", "b": "'000‘ö'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘ò'", "a": "'0¬¨02'", "b": "'000‘ò'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000‘é'", "a": "'0¬¨02'", "b": "'000‘é'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000”∫'", "a": "'0¬¨02'", "b": "'000”∫'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨02000”∂'", "a": "'0¬¨02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨0200”∂'", "a": "'0¬¨0'", "b": "'200”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨0000”∂'", "a": "'0¬¨0'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨2000”∂'", "a": "'0¬¨2'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'002000”∂'", "a": "'002'", "b": "'000”∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'¬¨02000”∂'", "a": "'¬¨02'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000002¬¨”∂'", "a": "'0000'", "b": "'02¬¨”∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00¬¨2000”∂'", "a": "'00¬¨2'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨00200”∂'", "a": "'0¬¨00'", "b": "'200”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'020¬¨000”∂'", "a": "'020¬¨'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000200¬¨”∂'", "a": "'0002'", "b": "'00¬¨”∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¨00002”∂'", "a": "'0¬¨00'", "b": "'002”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0002000”∂'", "a": "'0002'", "b": "'000”∂'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0102000”∂'", "a": "'0102'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬™02000”∂'", "a": "'0¬™02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬®02000”∂'", "a": "'0¬®02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¶02000”∂'", "a": "'0¬¶02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬§02000”∂'", "a": "'0¬§02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0¬¢02000”∂'", "a": "'0¬¢02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0w02000”∂'", "a": "'0w02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0c02000”∂'", "a": "'0c02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0K02000”∂'", "a": "'0K02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0702000”∂'", "a": "'0702'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000”∂'", "a": "'0A02'", "b": "'000”∂'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00000”∂'", "a": "'0A00'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A01000”∂'", "a": "'0A01'", "b": "'000”∂'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ú'", "a": "'0A02'", "b": "'000 ú'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ö'", "a": "'0A02'", "b": "'000 ö'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ò'", "a": "'0A02'", "b": "'000 ò'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ñ'", "a": "'0A02'", "b": "'000 ñ'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ï'", "a": "'0A02'", "b": "'000 ï'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0200 ï'", "a": "'0A0'", "b": "'200 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0000 ï'", "a": "'0A0'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A2000 ï'", "a": "'0A2'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'002000 ï'", "a": "'002'", "b": "'000 ï'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'A02000 ï'", "a": "'A02'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000002A ï'", "a": "'0000'", "b": "'02A ï'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00A2000 ï'", "a": "'00A2'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00200 ï'", "a": "'0A00'", "b": "'200 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'020A000 ï'", "a": "'020A'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000200A ï'", "a": "'0002'", "b": "'00A ï'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00002 ï'", "a": "'0A00'", "b": "'002 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0002000 ï'", "a": "'0002'", "b": "'000 ï'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0102000 ï'", "a": "'0102'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0802000 ï'", "a": "'0802'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00000 ï'", "a": "'0A00'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A01000 ï'", "a": "'0A01'", "b": "'000 ï'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ì'", "a": "'0A02'", "b": "'000 ì'", "ca": 6, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0200 ì'", "a": "'0A0'", "b": "'200 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A0000 ì'", "a": "'0A0'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A2000 ì'", "a": "'0A2'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'002000 ì'", "a": "'002'", "b": "'000 ì'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'A02000 ì'", "a": "'A02'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000002A ì'", "a": "'0000'", "b": "'02A ì'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'00A2000 ì'", "a": "'00A2'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00200 ì'", "a": "'0A00'", "b": "'200 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'020A000 ì'", "a": "'020A'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'000200A ì'", "a": "'0002'", "b": "'00A ì'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00002 ì'", "a": "'0A00'", "b": "'002 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0002000 ì'", "a": "'0002'", "b": "'000 ì'", "ca": 4, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0102000 ì'", "a": "'0102'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0802000 ì'", "a": "'0802'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A00000 ì'", "a": "'0A00'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A01000 ì'", "a": "'0A01'", "b": "'000 ì'", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'0A02000 ì'", "a": "'0A02'", "b": "'000 ì'", "ca": 6, "cb": 3, "cab": 3}
{"test": "auto_property_failure::test_unicode_range_monotonicity", "nodeid": "tests/property/test_unicode_monotonicity_props.py::test_unicode_range_monotonicity", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_unicode_monotonicity_props.py", "error": "Unicode range violation: 6 -> 3 (reduction: 50.00%)\nassert 3 >= 6", "locals": {"f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x140855440>"}}
{"test": "auto_property_failure::test_pyd_ndarray_types_props.py", "nodeid": "tests/property/test_pyd_ndarray_types_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_pyd_ndarray_types_props.py", "error": "unsupported operand type(s) for |: 'ArrayF32WithShape' and 'NoneType'", "locals": {"__name__": "tests.property.test_pyd_ndarray_types_props", "__doc__": null, "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1029fe630>", "__spec__": "ModuleSpec(name='tests.property.test_pyd_ndarray_types_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1029fe630>, origin='/Users/danieljacobs/Code/ai-dev-tasks/tests/prop", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_pyd_ndarray_types_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_pyd_ndarray_types_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "annotations": "_Feature((3, 7, 0, 'beta', 1), None, 16777216)", "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "math": "<module 'math' (built-in)>"}}
{"test": "auto_property_failure::test_schema_type_invariants_props.py", "nodeid": "tests/property/test_schema_type_invariants_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_schema_type_invariants_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_schema_type_invariants_props.py:9: in <module>\n    from src.schemas.eval import CaseResult, GoldCase, Mode\nsrc/schemas/eval.py:111: in <module>\n    from src.schemas.settings import settings\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/schemas/settings.py\", line 6\nE       import json\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_character_tokenizer_props.py", "nodeid": "tests/property/test_character_tokenizer_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_character_tokenizer_props.py\", line 7\nE       from ._regression_capture import record_case\nE       ^^^^\nE   SyntaxError: invalid syntax"}
{"test": "auto_property_failure::test_config_resolve_props.py", "nodeid": "tests/property/test_config_resolve_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_config_resolve_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_config_resolve_props.py\", line 7\nE       import tempfile\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_consolidate_props.py", "nodeid": "tests/property/test_consolidate_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_consolidate_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_consolidate_props.py:5: in <module>\n    from src.memory_graphs.consolidate import collect_turns, run, summarize\nsrc/memory_graphs/consolidate.py:5: in <module>\n    from src.config.settings import get_settings\nsrc/config/__init__.py:5: in <module>\n    from .settings import get_settings\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/config/settings.py\", line 9\nE       import sys\nE       ^^^^^^\nE   SyntaxError: invalid syntax"}
{"test": "auto_property_failure::test_cross_encoder_circuit_props.py", "nodeid": "tests/property/test_cross_encoder_circuit_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_cross_encoder_circuit_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_cross_encoder_circuit_props.py:6: in <module>\n    from src.retrieval.cross_encoder_client import CircuitBreaker\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/cross_encoder_client.py\", line 7\nE       import numpy as np\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_deduplication_props.py", "nodeid": "tests/property/test_deduplication_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_deduplication_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_deduplication_props.py:6: in <module>\n    from src.retrieval.deduplication import HAS_SKLEARN, NearDuplicateFilter\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/deduplication.py\", line 4\nE       import numpy as np\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_intent_router_props.py", "nodeid": "tests/property/test_intent_router_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_router_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_intent_router_props.py:5: in <module>\n    from src.retrieval.intent_router import IntentRouter, IntentRouterConfig\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/intent_router.py\", line 5\nE       import hashlib\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_intent_router_type_props.py", "nodeid": "tests/property/test_intent_router_type_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_router_type_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_intent_router_type_props.py:7: in <module>\n    from src.retrieval.intent_router import IntentClassification, IntentRouter, IntentRouterConfig\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/intent_router.py\", line 5\nE       import hashlib\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_maintenance_database_e2e_props.py", "nodeid": "tests/property/test_maintenance_database_e2e_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_maintenance_database_e2e_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_maintenance_database_e2e_props.py:13: in <module>\n    from monitoring.maintenance_metrics import MaintenanceMetricsDB, store_maintenance_analysis\nsrc/monitoring/__init__.py:12: in <module>\n    from .health_endpoints import HealthEndpointManager\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/monitoring/health_endpoints.py\", line 10\nE       import psutil\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_maintenance_metrics_props.py", "nodeid": "tests/property/test_maintenance_metrics_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_maintenance_metrics_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_maintenance_metrics_props.py:11: in <module>\n    from monitoring.maintenance_metrics import MaintenanceMetricsDB, store_maintenance_analysis\nsrc/monitoring/__init__.py:12: in <module>\n    from .health_endpoints import HealthEndpointManager\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/monitoring/health_endpoints.py\", line 10\nE       import psutil\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_metrics_props.py", "nodeid": "tests/property/test_metrics_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_metrics_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_metrics_props.py:7: in <module>\n    from src.evaluation.enhanced_metrics import ECECalculator, NDCGCalculator, TemperatureScaler\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/evaluation/enhanced_metrics.py\", line 7\nE       from sklearn.calibration import calibration_curve\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_packer_props.py", "nodeid": "tests/property/test_packer_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_packer_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_packer_props.py:6: in <module>\n    from src.retrieval.packer import pack_candidates\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/packer.py\", line 2\nE       import re\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_prefilter_props.py", "nodeid": "tests/property/test_prefilter_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_prefilter_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_prefilter_props.py:5: in <module>\n    from src.retrieval.prefilter import PrefilterConfig, RecallFriendlyPrefilter\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/prefilter.py\", line 3\nE       from sklearn.feature_extraction.text import TfidfVectorizer\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_qa_flow_props.py", "nodeid": "tests/property/test_qa_flow_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_qa_flow_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_qa_flow_props.py\", line 6\nE       from src.flows.qa_graph import Draft, End, FlowState, Start  # type: ignore[import-untyped]\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_quality_gates_props.py", "nodeid": "tests/property/test_quality_gates_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_quality_gates_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_quality_gates_props.py:5: in <module>\n    from src.retrieval.quality_gates import QualityGateValidator, validate_evaluation_results\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/quality_gates.py\", line 4\nE       import pathlib\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_query_rewrite_props.py", "nodeid": "tests/property/test_query_rewrite_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_query_rewrite_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_query_rewrite_props.py\", line 7\nE       from ._regression_capture import record_case\nE       ^^^^\nE   SyntaxError: invalid syntax"}
{"test": "auto_property_failure::test_retrieval_invariants.py", "nodeid": "tests/property/test_retrieval_invariants.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_invariants.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_invariants.py\", line 11\nE       from typing import Any, Dict, List, Optional, Union\nE       ^^^^\nE   SyntaxError: invalid syntax"}
{"test": "auto_property_failure::test_retriever_config_props.py", "nodeid": "tests/property/test_retriever_config_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retriever_config_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retriever_config_props.py\", line 9\nE       import importlib\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_robustness_checks_props.py", "nodeid": "tests/property/test_robustness_checks_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_robustness_checks_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_robustness_checks_props.py:6: in <module>\n    from src.retrieval.robustness_checks import RobustnessChecker\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/robustness_checks.py\", line 6\nE       from retrieval.fusion import weighted_rrf\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_script_aware_tokenizer_props.py", "nodeid": "tests/property/test_script_aware_tokenizer_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_script_aware_tokenizer_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_script_aware_tokenizer_props.py\", line 7\nE       from ._regression_capture import record_case\nE       ^^^^\nE   SyntaxError: invalid syntax"}
{"test": "auto_property_failure::test_token_count_props.py", "nodeid": "tests/property/test_token_count_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_token_count_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_token_count_props.py:5: in <module>\n    from src.llm.token_count import make_counter\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/llm/token_count.py\", line 7\nE       import tiktoken  # type: ignore[import-untyped]\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_uncertainty_props.py", "nodeid": "tests/property/test_uncertainty_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_uncertainty_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_uncertainty_props.py:6: in <module>\n    from src.uncertainty.confidence_calibration import CalibrationConfig, ConfidenceCalibrator\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/uncertainty/confidence_calibration.py\", line 11\nE       from scipy.optimize import minimize\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_unicode_monotonicity_props.py", "nodeid": "tests/property/test_unicode_monotonicity_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_unicode_monotonicity_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_unicode_monotonicity_props.py:5: in <module>\n    from src.llm.token_count import make_counter\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/llm/token_count.py\", line 7\nE       import tiktoken  # type: ignore[import-untyped]\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_validation_props.py", "nodeid": "tests/property/test_validation_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:177: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:357: in _rewrite_test\n    tree = ast.parse(source, filename=strfn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../.local/share/uv/python/cpython-3.12.11-macos-aarch64-none/lib/python3.12/ast.py:52: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_validation_props.py\", line 7\nE       from src.utils.prompt_sanitizer import SecurityError\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_windowing_props.py", "nodeid": "tests/property/test_windowing_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_windowing_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_windowing_props.py:6: in <module>\n    from src.retrieval.windowing import DocumentWindower, count_tokens\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/windowing.py\", line 5\nE       import tiktoken\nE   IndentationError: unexpected indent"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "name 'ArrayTestModel' is not defined", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, 8.33943149141788e-114, 9.098613489371331e+175, -2.2999108198556052e+16, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, 8.33943149141788e-114, 9.098613489371331e+175, -2.2999108198556052e+16, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, 8.33943149141788e-114, 0.0, -2.2999108198556052e+16, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, 8.33943149141788e-114, 0.0, 5.4794395692197944e+268, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, -1.293968423681909e-208, 0.0, 5.4794395692197944e+268, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, -1.293968423681909e-208, 0.0, 5.4794395692197944e+268, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "name 'ArrayTestModel' is not defined", "input_values": [-1.293968423681909e-208, 8.84983548793058e+226, 4.41067020643037e+16, -7.180182250338226e+40, -1.293968423681909e-208, 0.0, 8.84983548793058e+226, 5.4794395692197944e+268]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "name 'ArrayTestModel' is not defined", "input_values": [0.0, 3.4094603594366976e+16, 6.020342417142579e+16, -0.0, 2.649824096681984e+16, -4.587877623136256e+16, -2.0000100135803223, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "name 'ArrayTestModel' is not defined", "input_values": [6.020342417142579e+16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "name 'ArrayTestModel' is not defined", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "name 'ArrayTestModel' is not defined", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "auto_property_failure::test_vec8_accepts_correct_shape_and_coerces_dtype", "nodeid": "tests/property/test_pyd_ndarray_types_props.py::TestPydanticArrayTypes::test_vec8_accepts_correct_shape_and_coerces_dtype", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_pyd_ndarray_types_props.py", "error": "name 'ArrayTestModel' is not defined", "locals": {"self": "<tests.property.test_pyd_ndarray_types_props.TestPydanticArrayTypes object at 0x107e0c350>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x108972980>"}}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"<√ó/": true}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": 0.5, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 308}, {"¬å¬áG√ß": 0.8988568302181756}, {"Ú¨©ÇÒàüΩ¬ß¬åG√ª": 475, "Ú¥∑õ": true, "√∑ì´ö√Åm'Ú≤ùÆ": 0.5, "b¬±Ûû∏üÊ†¥": "ÛÖûê¬™\u0005\\pÛûπæMk\u0000¬Æ\u0013", "√á¬ñf¬å¬Ç√ãÒΩêÆDµÉó\u0002TÙÅö°\u000b√ÖvÛã©º": 265, "|¬†√ª√§": 44, "w√ä¬í": "(ûÑß¬°¬û√á¬∑Y", "¬É√óÚ¥ãñÛ≥∑Ç": false, ",\u0006": 4, "√∏\u0013¬®§òî√∂^√≤j:√ÑSÙåûà√ª√ëÛ≠ÆÑ√ÅÛòΩñ": 759}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": 0.5, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 308}, {"¬å¬áG√ß": 0.8988568302181756}, {"Ú¨©ÇÒàüΩ¬ß¬åG√ª": 475, "Ú¥∑õ": true, "√∑ì´ö√Åm'Ú≤ùÆ": 0.5, "b¬±Ûû∏üÊ†¥": "ÛÖûê¬™\u0005\\pÛûπæMk\u0000¬Æ\u0013", "√á¬ñf¬å¬Ç√ãÒΩêÆDµÉó\u0002TÙÅö°\u000b√ÖvÛã©º": 265, "|¬†√ª√§": 44, "w√ä¬í": "(ûÑß¬°¬û√á¬∑Y", "¬É√óÚ¥ãñÛ≥∑Ç": false, ",\u0006": 4, "√∏\u0013¬®§òî√∂^√≤j:√ÑSÙåûà√ª√ëÛ≠ÆÑ√ÅÛòΩñ": 759}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": 0.5, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 308}, {"¬å¬áG√ß": 0.8988568302181756}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": 0.5, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 42}, {"¬å¬áG√ß": 0.8988568302181756}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": false, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 42}, {"¬å¬áG√ß": 0.8988568302181756}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": false, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 42}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.36965785761768194, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"|Ú†øéõ¶à": false, "¬£ÆÅß\u0013Û¶ôúe¬Ø9": "G7"}, {"}√¢¬çÃ´Úì∑±": 999, "√ü": false, "lÛ†àª√°¬ñ": "SELECT ", "1M3ÒÑó™!¬îq\u0012Q¬π": "6K", "¬∂¬ó": 554, "√•": false, "¬ö\u0001Òùò°": 42}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"\f¬ó": "", "\u001cN√´√™RXo¬Æ\u0003*\u0001\u000e¬•¬ö)\u001c√Ö¬ø√ò": 625, "c": false, "score": 1000, "≤ñ•√Å": false, "¬µ√Ω,√±Ò£óö\u0003": "~Û´üèG,kÒ¨®ç√ú√°ìæôÚß≥á", "p\u0006?P*√¢Ú≠â¥¬†": "Ùèúâ", "Ûñ±Ç©Ç†√í&~¬ªÛ§§è": "J√è\u0017\u0015√¥=√Ü¬ì¬Ñ∞î§¬¥|", "¬ûÒêâ®√¶": 0.30139706252280846, "¬π√ácoÛ≥èΩ¬å¬ò\rn": false}, {"\u0015πñü": "", "T¬§√™√¥": "¬∫Û∞∑Å¬ù"}, {"√ú\u0003√£{¬ã√∏": false, "√àS√é¬≠Úû®çQ™æØ¬∏*": ""}], "alpha": 0.0, "per_file_penalty": 0.30139706252280846, "k": 42, "tag": "s\f√Ü\u0003√ç", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_output_types_are_dicts_with_float_scores", "nodeid": "tests/property/test_retrieval_type_invariants_props.py::TestRetrievalTypeInvariants::test_mmr_rerank_output_types_are_dicts_with_float_scores", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_retrieval_type_invariants_props.TestRetrievalTypeInvariants object at 0x10415bd40>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10416af20>"}}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.5535283907854511, -0.9097545415982489, -0.6172489218232572, 0.2], "file_path": true, "chunk_id": 274, "score": 0.5, "filename": "¬ñD"}, {"file_path": true, "embedding": true, "chunk_id": 0.01563751126549851, "score": "√ø:¬ªcU¬ì£ãáDÙÑñ±;\u0006%ÚÖÉá√ã¬ºk√†"}, {"embedding": 1.1754943508222875e-38, "file_path": "?Ûùäº√è√ß", "score": 18, "filename": 967, "chunk_id": 966}, {"filename": [0.4, -0.30783285198493526, 0.5453904896465276, -0.22474314971183218, 0.8325937048385983, 0.320613505124159, 0.06289130781462116, 2.0934162218070583e-213], "file_path": "¬∞\u0017¬¢\u0006¬∑Mj√Ø\u0000√à(Òû¨É√π¬Ñ¬¨√´C¬ü6,¬©¬æ¬ød", "embedding": true, "chunk_id": 0.6658727756338002, "score": 256}, {"score": true, "file_path": [], "filename": 619, "chunk_id": [], "embedding": []}, {"chunk_id": "¬çÚ¥§ß", "file_path": 0.4248070046079332, "embedding": "", "filename": "X¬¢`", "score": "1kÁüã2Òò¥é@"}], "alpha": 0.6211266765637978, "per_file_penalty": 0.39595580420138565, "k": 43, "tag": "¬®¬ü¬Ω\u00174Ú∂µã¬™", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": 0.7326390583251979, "score": [0.6666882605418256, 0.0, 0.6339231939981738, 3.423477010463459e-73, 1.1125369292536007e-308, 5.374808228073364e-147, 5.7747415765150025e-108, 2.220446049250313e-16, -0.9300169089709378, 0.0], "embedding": [0.935008945586512, 0.05549743950209041, 1.1754943508222875e-38, 0.07352703679139849, -0.9602223772770677, 0.6, 0.8590003044472145, -0.03373170792291025], "chunk_id": [-0.5003843269840286, -0.12359714721212423, -0.08551491739399242, 0.9179605926100378, 5.960464477539063e-08], "filename": "Òíô∂\u0013}"}, {"embedding": 0.31945411178654753, "chunk_id": true, "filename": 1000, "score": 0.9319722288300207, "file_path": [0.5317669266177916, 0.5682325729621192, 0.0, 0.6920362493104979, 0.5813959654550676, -0.9647379737894957, -5.960464477539063e-08, -0.812397135088561]}, {"filename": false, "score": true, "embedding": true, "chunk_id": "√¶√§Òíèù"}, {"embedding": 181, "chunk_id": [-0.09036539178729774, 0.2963411007227521, -0.1441449496008811, 0.9405155938874357, 0.2422005854033149, 3.356228137369702e-261, 0.043640855808739554], "score": [-0.10666531777992394, -0.8205351557084342, -5.408580106507683e-139, -0.32891547253467424, 2.225073858507203e-309, -9.223505562814901e-212, -1.2116411227973864e-53, 2.969880671513952e-31, 0.7266736210961846, 0.20145082783084622], "filename": true, "file_path": false}, {"chunk_id": 287, "embedding": 1e-05, "score": 535}, {"score": [0.6, -0.689135931600978], "filename": [0.5, -0.6908937288509276, 1.697931310790596e-222, -0.40385358754154976, -0.636606995478465, -2.4104145657824736e-255, -0.9632685942901982, 0.6210811017819062, -0.6066789187344502, 0.6067318845680107], "chunk_id": "", "file_path": "√ñH¬ΩÚì¥ª¬∞√Ñ√õ¬úÚ´àü", "embedding": [-0.3701677427486193, 0.6977854540623816]}, {"embedding": "Òö°äV", "chunk_id": "Ú¨Éñ¬Ü", "score": true, "filename": 693}, {"filename": [0.059330574221577725], "file_path": "", "score": 0.18897154435115887, "chunk_id": true, "embedding": 989}, {"score": "√ë√®'", "chunk_id": 0, "file_path": false, "filename": "¬†'√π", "embedding": [-0.5907911800700066]}, {"chunk_id": 0.9600650985668742, "embedding": false, "filename": false, "score": "¬ë√∏d√ò¬ØÒã´ù\u0002B¬üO"}, {"filename": true, "score": "¬ØP\u001c¬í√ám", "embedding": 0.71153204305048, "file_path": 0.02761188238723867, "chunk_id": 148}, {"embedding": 665, "score": false, "chunk_id": 196}], "alpha": 0.12143067541238375, "per_file_penalty": 0.9295337219018516, "k": 26, "tag": "≥¨¢MÒíàÖ", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": [-3.5307675687414223e-211, -1.2425203336121218e-216, -0.5123582880212502, -0.6348129955659179, -0.8958001873273016, -0.7687511206766633, -0.761888553404428], "chunk_id": false}], "alpha": 0.6631244899356711, "per_file_penalty": 0.927003909964154, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": [-3.5307675687414223e-211, -0.5123582880212502, -0.5123582880212502, -0.6348129955659179, -0.8958001873273016, -0.7687511206766633, -0.761888553404428], "chunk_id": false}], "alpha": 0.6631244899356711, "per_file_penalty": 0.927003909964154, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": [-3.5307675687414223e-211, -0.5123582880212502, -0.5123582880212502, -0.6348129955659179, -0.8958001873273016, -0.7687511206766633, -0.761888553404428], "chunk_id": false}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": 0.7816277133464695, "chunk_id": false}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": 0.7816277133464695, "chunk_id": 0.0}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 323, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"file_path": false, "score": 3.521713141004793e-38, "chunk_id": 296, "embedding": "ÛÆæã√•√ø¬∂Ú°Å¥Û©øâ¬Ü|_¬ôÚó™Æ!Ûíãì", "filename": true}], "alpha": 0.3373605535139264, "per_file_penalty": 0.18920319268178082, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 323, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.18920319268178082, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 323, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.18920319268178082, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.18920319268178082, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(16, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "E&∑∑Ö√æ\u0018√å9"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(16, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": "", "score": false, "file_path": "√ÅF√ù√çÛí†õ¬öÒ≥âß√≤,ÙàÉ±", "chunk_id": false, "filename": []}, {"score": "ÛùπØ√åR√â", "chunk_id": true, "embedding": "ööö√ãW¬¢\u000fyÙäµìeÛèÑ∏\u001c√ê¬Ä√ã√§", "file_path": "vJÚΩ∑ô\u001c\"√¨√∂F¬ÉÛãµ¶ÒµÑêØ§ö√ìÛ∏æî", "filename": 132}, {"file_path": false, "chunk_id": 0.8870215904315999, "embedding": "ÒπÆ™i\u0012K", "score": "¬∏Û©ê≠Ï£ÆÙàÆõC@Úë°ÉÚëê∂¬•√Ø¬µ\u0007"}, {"filename": "", "file_path": [-0.031594044949941, 0.871647445600999, 1e-09, 0.47358862471372, 0.866606556630606, 0.21606661284184736, -0.47268127043892505], "score": 828, "chunk_id": "", "embedding": "√†\tu`¬Ü"}], "alpha": 0.7546590093816263, "per_file_penalty": 0.7792850882852311, "k": 31, "tag": "\u0002E", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": [0.48379853790834315, -0.12787406026127157, 0.12, 0.2550485801544371, -2.3934158348036574e-135, 0.4577573709597733, -0.96103617338149, 0.7313971864345166], "filename": 0.2650623909646848, "embedding": true, "score": 0.6525858726984116}, {"chunk_id": 0.0, "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.5808679998905238}, {"filename": [-1.1754943508222875e-38, 1.4671918824311916e-143, 0.523559242718735, -1e-05, 0.2834688435265711], "embedding": [], "score": 813, "chunk_id": [-6.100763261796345e-108, 5.4199665079248006e-21, 1.1605394170708074e-111, -9.482841702398245e-174, -0.10998489638550057, -0.2140285838373115, -0.6220179349846909, -0.6274053320151172, 0.359390889320369, -5.960464477539063e-08], "file_path": 0.5}], "alpha": 0.13286022920146892, "per_file_penalty": 0.8929076364244786, "k": 31, "tag": "Òµªõ√µ\u0007¬å", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.5808679998905238}, {"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.5808679998905238}], "alpha": 0.13286022920146892, "per_file_penalty": 0.8929076364244786, "k": 31, "tag": "Òµªõ√µ\u0007¬å", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.8929076364244786}, {"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.5808679998905238}], "alpha": 0.13286022920146892, "per_file_penalty": 0.8929076364244786, "k": 31, "tag": "Òµªõ√µ\u0007¬å", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": 0.7816277133464695, "chunk_id": 0.0}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.8929076364244786}, {"file_path": true, "embedding": [], "score": [0.6519850670036962], "filename": true, "chunk_id": 0.5808679998905238}], "alpha": 0.13286022920146892, "per_file_penalty": 0.8929076364244786, "k": 31, "tag": "Òµªõ√µ\u0007¬å", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.85, "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": "", "embedding": 0.7816277133464695, "chunk_id": 0.0}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": "", "chunk_id": 0.0}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": "", "chunk_id": ""}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "::", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": "", "chunk_id": ""}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 38, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": "", "chunk_id": ""}], "alpha": 0.6631244899356711, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.7816277133464695, "embedding": "", "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.0, "embedding": "", "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": "", "embedding": "", "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": "", "embedding": 0.0, "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 0.85, "score": 16, "file_path": [0.7384394962626533, -1.0], "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 16, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "chunk_id": 16, "file_path": [0.7384394962626533, -1.0], "score": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": "", "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"filename": 0.85, "score": 323, "chunk_id": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "file_path": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": 0.85, "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "file_path": 323, "filename": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "score": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": "", "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0.0, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0.38733103856952444, "embedding": "", "file_path": 589}], "alpha": 0.5, "per_file_penalty": 0.9482758169351886, "k": 39, "tag": "Ú∑ûÑ¬ë¬£¬ªÚØ∏Ñ", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '39cdda325e9e6a83', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '39cdda325e9e6a83', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0.38733103856952444, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '5bf50736544f87d4', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '5bf50736544f87d4', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0.24060378546978317, "embedding": 610, "file_path": 0.37184873302276716}, {"score": 0.33563630614147805, "file_path": 256, "chunk_id": 0.08708714198659907, "filename": false, "embedding": true}], "alpha": 0.5665414002908543, "per_file_penalty": 0.28476278767042046, "k": 42, "tag": "!√çÚ∫Éß\u0007", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0.24060378546978317, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": false, "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '5bf50736544f87d4', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '5bf50736544f87d4', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "E&∑∑Ö√æ\u0018√å9", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 16, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.3373605535139264, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": 0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": "√ín¬Ω¬ãoªµú¬Ø1√ï¬ó¬âS"}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, -1.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.7384394962626533, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": "", "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "chunk_id": "", "file_path": [0.0, 0.0], "score": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "chunk_id": [0.0, 0.0], "file_path": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": [0.0, 0.0], "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "chunk_id": "", "file_path": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": "", "chunk_id": "", "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": 0.0, "chunk_id": "", "file_path": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": 323}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "embedding": 323, "filename": "", "score": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": 0.0}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "embedding": 0.0, "file_path": "", "filename": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.3373605535139264, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": 0.0, "filename": "", "score": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": "", "filename": 0.0, "chunk_id": "", "score": "", "embedding": ""}, {"chunk_id": "", "filename": 0.0, "file_path": "", "score": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(323, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(1, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "file_path": 1, "filename": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": 0.0, "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "filename": 1, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "score": "", "chunk_id": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "chunk_id": 0.0, "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "file_path": 0.0, "chunk_id": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(1, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": 1, "filename": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": 1, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": 0.0, "filename": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0.0, "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 1.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0, "file_path": 0.0, "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0, "filename": "", "file_path": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0.0, "file_path": 0.0, "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0.0, "filename": "", "file_path": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": 1, "score": "", "file_path": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": 2, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": false, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": 0.0, "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "filename": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0, "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 1.0, "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0.0, "score": "", "file_path": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": 0.0, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "filename": 0, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": "", "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 0.0, "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 2, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": 1}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "embedding": 1, "filename": "", "score": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": 0.0}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "embedding": 0.0, "filename": "", "score": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 0, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": 0.0, "filename": "", "score": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0.0, "file_path": "", "score": "", "embedding": ""}, {"chunk_id": "", "filename": 0.0, "file_path": "", "score": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": 0.0, "filename": [0.0, 0.0], "score": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "e", "embedding": false, "file_path": 5e-324, "filename": "¬©"}, {"filename": true, "chunk_id": 812, "embedding": [-4.332031806857256e-111], "file_path": "lÚòïÑ√•\u0015√£√ô√àÒ®éπ¬∫¬ªt", "score": 0.08308896803160072}], "alpha": 0.016472108143536394, "per_file_penalty": 0.18671355104486456, "k": 11, "tag": "√∂", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "e", "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "score": 323, "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": 323, "filename": "", "score": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.3373605535139264, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0, 0.0], "filename": "", "embedding": ""}, {"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0, 0.0], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": [0.0, 0.0], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": [0.0, 0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": "", "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.0, "embedding": [0.0]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "embedding": 0.0, "filename": [0.0], "score": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "file_path": [0.0], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": 0.0, "filename": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0.0, "file_path": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": "", "filename": [0.0], "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0.0, "score": [0.0], "file_path": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 1.0, "file_path": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": 0, "file_path": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "filename": "", "file_path": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": [0.0], "score": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": "", "filename": "", "embedding": ""}, {"chunk_id": "", "score": 1, "file_path": "", "filename": "", "embedding": ""}], "alpha": 1.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance(1, float)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "score": 0.0, "file_path": [0.0], "filename": "", "embedding": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "unhashable type: 'list'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.0, "embedding": "", "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert (False or (False))\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, (<class 'str'>, <class 'int'>, <class 'float'>, <class 'bool'>, <class 'NoneType'>))\n +  and   False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, list)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": "", "embedding": "", "chunk_id": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "can't multiply sequence by non-int of type 'float'"}
{"test": "auto_property_failure::test_mmr_rerank_output_types_are_dicts_with_float_scores", "nodeid": "tests/property/test_retrieval_type_invariants_props.py::TestRetrievalTypeInvariants::test_mmr_rerank_output_types_are_dicts_with_float_scores", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "error": "Hypothesis found 4 distinct failures. (4 sub-exceptions)", "locals": {"self": "<tests.property.test_retrieval_type_invariants_props.TestRetrievalTypeInvariants object at 0x110b32ff0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x110b5b880>"}}
{"test": "mmr_rerank_output_types_failed", "rows": [], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "cannot access local variable 'item' where it is not associated with a value"}
{"test": "mmr_rerank_output_types_failed", "rows": [], "alpha": 0.45676488366097023, "per_file_penalty": 0.7278129347058574, "k": 6, "tag": "\tVòéû¬ù√á√≠¬ã√ü/oÒô•Ä", "error": "cannot access local variable 'item' where it is not associated with a value"}
{"test": "mmr_rerank_output_types_failed", "rows": [], "alpha": 0.45676488366097023, "per_file_penalty": 0.45676488366097023, "k": 6, "tag": "\tVòéû¬ù√á√≠¬ã√ü/oÒô•Ä", "error": "cannot access local variable 'item' where it is not associated with a value"}
{"test": "mmr_rerank_output_types_failed", "rows": [], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "cannot access local variable 'item' where it is not associated with a value"}
{"test": "mmr_rerank_output_types_failed", "rows": [], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "cannot access local variable 'item' where it is not associated with a value"}
{"test": "auto_property_failure::test_mmr_rerank_output_types_are_dicts_with_float_scores", "nodeid": "tests/property/test_retrieval_type_invariants_props.py::TestRetrievalTypeInvariants::test_mmr_rerank_output_types_are_dicts_with_float_scores", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "error": "cannot access local variable 'item' where it is not associated with a value", "locals": {"self": "<tests.property.test_retrieval_type_invariants_props.TestRetrievalTypeInvariants object at 0x1040a3050>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1040db880>"}}
{"test": "auto_property_failure::test_mmr_rerank_output_types_are_dicts_with_float_scores", "nodeid": "tests/property/test_retrieval_type_invariants_props.py::TestRetrievalTypeInvariants::test_mmr_rerank_output_types_are_dicts_with_float_scores", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "error": "It looks like this test is filtering out a lot of inputs. 7 inputs were generated successfully, while 50 inputs were filtered out. \n\nAn input might be filtered out by calls to assume(), strategy.filter(...), or occasionally by Hypothesis internals.\n\nApplying this much filtering makes input generation slow, since Hypothesis must discard inputs which are filtered out and try generating it again. It is also possible that applying this much filtering will distort the domain and/or distribution of the test, leaving your testing less rigorous than expected.\n\nIf you expect this many inputs to be filtered out during generation, you can disable this health check with @settings(suppress_health_check=[HealthCheck.filter_too_much]). See https://hypothesis.readthedocs.io/en/latest/reference/api.html#hypothesis.HealthCheck for details.", "locals": {"self": "<tests.property.test_retrieval_type_invariants_props.TestRetrievalTypeInvariants object at 0x10892ede0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10896b880>"}}
{"test": "auto_property_failure::test_retrieval_type_invariants_props.py", "nodeid": "tests/property/test_retrieval_type_invariants_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "error": "name 'hypothesis' is not defined", "locals": {"__name__": "tests.property.test_retrieval_type_invariants_props", "__doc__": null, "__package__": "tests.property", "__loader__": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1031c9e20>", "__spec__": "ModuleSpec(name='tests.property.test_retrieval_type_invariants_props', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1031c9e20>, origin='/Users/danieljacobs/Code/ai-dev-tasks/te", "__file__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_retrieval_type_invariants_props.py", "__cached__": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/__pycache__/test_retrieval_type_invariants_props.cpython-312.pyc", "__builtins__": {"_type": "dict", "len": 157, "keys": ["__name__", "__doc__", "__package__", "__loader__", "__spec__", "__build_class__", "__import__", "abs", "all", "any"]}, "annotations": "_Feature((3, 7, 0, 'beta', 1), None, 16777216)", "@py_builtins": "<module 'builtins' (built-in)>", "@pytest_ar": "<module '_pytest.assertion.rewrite' from '/Users/danieljacobs/Code/ai-dev-tasks/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>", "math": "<module 'math' (built-in)>"}}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user@host/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "Ò±ßì", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "¬á{Òôè£\u0010ÙÜùÄ", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "auto_property_failure::test_dsn_parse_returns_dict_with_string_values", "nodeid": "tests/property/test_dsn_parsing_type_invariants_props.py::TestDSNParsingTypeInvariants::test_dsn_parse_returns_dict_with_string_values", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_dsn_parsing_type_invariants_props.py", "error": "assert False\n +  where False = isinstance(5432, str)", "locals": {"self": "<tests.property.test_dsn_parsing_type_invariants_props.TestDSNParsingTypeInvariants object at 0x104083ce0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1048682c0>"}}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://user:pass@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://user@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://user:pass@host:5432/db", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "auto_property_failure::test_dsn_parse_port_is_integer_string", "nodeid": "tests/property/test_dsn_parsing_type_invariants_props.py::TestDSNParsingTypeInvariants::test_dsn_parse_port_is_integer_string", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_dsn_parsing_type_invariants_props.py", "error": "assert False\n +  where False = isinstance(5432, str)", "locals": {"self": "<tests.property.test_dsn_parsing_type_invariants_props.TestDSNParsingTypeInvariants object at 0x1048355b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x104868cc0>"}}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "(", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "√áY\fÚçÇ¨Òéò∫Òç¥É", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "≥∑ø¬â7\tÒπ∫´", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": ".CÙÉÆï", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ÒºØæ¬¨√ì√ΩÛ∏ï±\fÛó°òuÛ†ÆÆY", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ÙèÉÑ\u001b\n\u0000\u0001ÙÄΩ≤¬ôt¬ºÒâ¨°R√àOÛõäñ¬∏\u001b\u000e", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert False\n +  where False = isinstance(5432, str)"}
{"test": "auto_property_failure::test_dsn_parse_handles_invalid_dsns_gracefully", "nodeid": "tests/property/test_dsn_parsing_type_invariants_props.py::TestDSNParsingTypeInvariants::test_dsn_parse_handles_invalid_dsns_gracefully", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_dsn_parsing_type_invariants_props.py", "error": "assert False\n +  where False = isinstance(5432, str)", "locals": {"self": "<tests.property.test_dsn_parsing_type_invariants_props.TestDSNParsingTypeInvariants object at 0x104746a80>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x104869760>"}}
{"test": "auto_property_failure::test_intent_classification_type_invariants_props.py", "nodeid": "tests/property/test_intent_classification_type_invariants_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_classification_type_invariants_props.py", "error": ".venv/lib/python3.12/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:561: in import_path\n    mod = _import_module_using_spec(\n.venv/lib/python3.12/site-packages/_pytest/pathlib.py:725: in _import_module_using_spec\n    spec.loader.exec_module(mod)  # type: ignore[union-attr]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/property/test_intent_classification_type_invariants_props.py:10: in <module>\n    from src.retrieval.intent_router import IntentClassification, classify_intent\nE     File \"/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/intent_router.py\", line 5\nE       import hashlib\nE   IndentationError: unexpected indent"}
{"test": "auto_property_failure::test_intent_classification_type_invariants_props.py", "nodeid": "tests/property/test_intent_classification_type_invariants_props.py", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_classification_type_invariants_props.py", "error": "ImportError while importing test module '/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_classification_type_invariants_props.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\ntests/property/test_intent_classification_type_invariants_props.py:10: in <module>\n    from src.retrieval.intent_router import IntentClassification, classify_intent\nE   ImportError: cannot import name 'classify_intent' from 'src.retrieval.intent_router' (/Users/danieljacobs/Code/ai-dev-tasks/src/retrieval/intent_router.py)"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "0", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "¬ê√ºÒâç§√∫", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "database", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "\u0018nfW¬®ÚÄ∏É", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "√úÒäßûÚ†åê√ü¬íÚµ∑π!¬õ√ï¬Ñ√û√≤(\u001c√ò√£", "request_id": "≠ê™", "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "≠ê™", "request_id": "≠ê™", "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "√û\tK\\Úµº¶h√û¬´Òù≥è¬Ö√ñ¬§x", "request_id": "¬©", "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "¬©", "request_id": "¬©", "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "\u0018yîò¥¬∏", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "\\√°T√è\u0000", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "0", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "classify_intent_returns_intent_classification_failed", "query": "0", "request_id": null, "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_classify_intent_returns_intent_classification", "nodeid": "tests/property/test_intent_classification_type_invariants_props.py::TestIntentClassificationTypeInvariants::test_classify_intent_returns_intent_classification", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_intent_classification_type_invariants_props.py", "error": "IntentRouter.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_intent_classification_type_invariants_props.TestIntentClassificationTypeInvariants object at 0x1119358b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x111999d00>"}}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"1bi*": false, "updated_at": 0.33830624263027814, "Û´≤µ.Úúéü7": 207, "¬ë\u00159": [true, 18, 0.39665541580530894, ")¬∫3¬°i¬é√äl¬´", false, 50, 11, 0.5005197419357726, true, ""], "f\u001e¬ΩÒ´åö¬º√ñ¬Ñ‚∑Å¬´m": 0.9150926551318914, "√¶-√πÒê¢πm¬Æ\u001e\u0019√ò4JÛ±™¢\u0014Úè¶â{": "\"Ú´ä±√ñ¬Æ"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, false, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", "k4¬µÚá∏©P~%bxg\u0000", 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526}, {"Z/¬≠Píô≥\u0015": true}, {"ò∞¶'Û´•π√ùÒëáîîÖõ@": "o¬éØäóÙÖØ¨", "Ò™¥Ñ√∏\u0012": [0.12110097582516757, "9}Òùóà√í-"], "¬ï\u0004¬ÖÛïß∏/": ["\u0006\u0015Ûóã´√Ñ¬å\u0018Ú¢ïß", 58, 0.11708931165703731, false]}, {"Ô¥§¬ÇÛïΩÑÒ∫∏ÖØêΩ¬†": "", "D¬õ": true, ">¬õ√´\"¬ì√ï¬£`Ú§àµ√ú$¬ºÒí∏Å": ["y¬î", 0.08660479146003187, true], "ÛûÆµ": "ÚêΩÉ\u0005¬ï√ù", "ÙÇó©\u0012√™√íÙé´∏Ò¨£®\u0000B¬õ\u0004": 75, "trending": [0.7794340051613342, 5e-324]}, {"7": 0.05045982587323784}], "current_time": 784933627.9679127, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"1bi*": false, "updated_at": 0.33830624263027814, "Û´≤µ.Úúéü7": 207, "¬ë\u00159": [true, 18, 0.39665541580530894, ")¬∫3¬°i¬é√äl¬´", false, 50, 11, 0.5005197419357726, true, ""], "f\u001e¬ΩÒ´åö¬º√ñ¬Ñ‚∑Å¬´m": 0.9150926551318914, "√¶-√πÒê¢πm¬Æ\u001e\u0019√ò4JÛ±™¢\u0014Úè¶â{": "\"Ú´ä±√ñ¬Æ"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, false, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526}, {"Z/¬≠Píô≥\u0015": true}, {"ò∞¶'Û´•π√ùÒëáîîÖõ@": "o¬éØäóÙÖØ¨", "Ò™¥Ñ√∏\u0012": [0.12110097582516757, "9}Òùóà√í-"], "¬ï\u0004¬ÖÛïß∏/": ["\u0006\u0015Ûóã´√Ñ¬å\u0018Ú¢ïß", 58, 0.11708931165703731, false]}, {"Ô¥§¬ÇÛïΩÑÒ∫∏ÖØêΩ¬†": "", "D¬õ": true, ">¬õ√´\"¬ì√ï¬£`Ú§àµ√ú$¬ºÒí∏Å": ["y¬î", 0.08660479146003187, true], "ÛûÆµ": "ÚêΩÉ\u0005¬ï√ù", "ÙÇó©\u0012√™√íÙé´∏Ò¨£®\u0000B¬õ\u0004": 75, "trending": [0.7794340051613342, 5e-324]}, {"7": 0.05045982587323784}], "current_time": 784933627.9679127, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"1bi*": false, "updated_at": 0.33830624263027814, "Û´≤µ.Úúéü7": 207, "¬ë\u00159": [true, 18, 0.39665541580530894, ")¬∫3¬°i¬é√äl¬´", false, 50, 11, 0.5005197419357726, true, ""], "f\u001e¬ΩÒ´åö¬º√ñ¬Ñ‚∑Å¬´m": 0.9150926551318914, "√¶-√πÒê¢πm¬Æ\u001e\u0019√ò4JÛ±™¢\u0014Úè¶â{": "\"Ú´ä±√ñ¬Æ"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, false, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526}, {"Z/¬≠Píô≥\u0015": true}, {"ò∞¶'Û´•π√ùÒëáîîÖõ@": "o¬éØäóÙÖØ¨", "Ò™¥Ñ√∏\u0012": [0.12110097582516757, "9}Òùóà√í-"], "¬ï\u0004¬ÖÛïß∏/": ["\u0006\u0015Ûóã´√Ñ¬å\u0018Ú¢ïß", 58, 0.11708931165703731, false]}, {"Ô¥§¬ÇÛïΩÑÒ∫∏ÖØêΩ¬†": "", "D¬õ": true, ">¬õ√´\"¬ì√ï¬£`Ú§àµ√ú$¬ºÒí∏Å": ["y¬î", 0.08660479146003187, true], "ÛûÆµ": "ÚêΩÉ\u0005¬ï√ù", "ÙÇó©\u0012√™√íÙé´∏Ò¨£®\u0000B¬õ\u0004": 75, "trending": ["release", 5e-324]}, {"7": 0.05045982587323784}], "current_time": 784933627.9679127, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"1bi*": false, "updated_at": 0.33830624263027814, "Û´≤µ.Úúéü7": 207, "¬ë\u00159": [true, 18, 0.39665541580530894, ")¬∫3¬°i¬é√äl¬´", false, 50, 11, 0.5005197419357726, true, ""], "f\u001e¬ΩÒ´åö¬º√ñ¬Ñ‚∑Å¬´m": 0.9150926551318914, "√¶-√πÒê¢πm¬Æ\u001e\u0019√ò4JÛ±™¢\u0014Úè¶â{": "\"Ú´ä±√ñ¬Æ"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, false, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526, "0": ""}, {"0": ""}, {"9}Òùóà√í-": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"1bi*": false, "updated_at": 0.33830624263027814, "Û´≤µ.Úúéü7": 207, "¬ë\u00159": [true, 18, 0.39665541580530894, ")¬∫3¬°i¬é√äl¬´", false, 50, 11, 0.5005197419357726, true, ""], "f\u001e¬ΩÒ´åö¬º√ñ¬Ñ‚∑Å¬´m": 0.9150926551318914, "√¶-√πÒê¢πm¬Æ\u001e\u0019√ò4JÛ±™¢\u0014Úè¶â{": "\"Ú´ä±√ñ¬Æ"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, 18, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526, "0": ""}, {"0": ""}, {"9}Òùóà√í-": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, 18, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526, "0": ""}, {"0": ""}, {"9}Òùóà√í-": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "Û¥∑õTlb√æ", "results": [{"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"%Ò•≤â√ª√§": 0.109245565355816, "0": 2.7646020020626046e-63, "%\u001aPÒüßñ\u0004ßç™!nw\u001a√ïJ": 148, "$ÛÇ¨®": 0.7335448274217639, "√†√•√ô": "\u0010¬±Òßéê√É]Ú∫àæ¬Ç", "pHÚ©ôπÚöóö¬Ñ\u000eÙÇè§ÒùùÉ¬î,": 0.5468941019358026, "Z": "¬Ω\u0000\u0004¬óÚ°øùÛÆÜÑu\u0002\bF¬Ç\u000f\u0016]\u0018", "-Infinity": "\u0000¬Ω√Ω¬∞ÛÄïªÛç´Ñ√¨ÒÉº∂Òòã≠Q√ç]√∫¬®Û¢§à\u0017√∞√µ√†K"}, {"√ºÛ°áÜj.|¬ö@∂ëõ¬∞8¬ßï∫ñ\u001cÚõÑ≤\u0007(√éπΩú√áa": 0.32404239063265133, "¬µÛò™æ\u000bg2P√©Û©ºê¬ú": true, "R¬ÖzF¬∂g": 20, "T": true, "¬ïú†§√£\t": "", "\u001c": 594, "kÒôÆ±Áò∑ò∂ïÚ§íÄ√≠√É√Ω¬ÖÛõª£#√ø√ãuÚâ°Ü¬ΩÒµå±6": [2.417819693327043e-113, 18, 0.24386748246283202, 0.1, false, true, 0.9070734680240642, 2.2250738585072014e-308, true, 5], "true": [12, 0.11100762797880662, 96, 18, true, true], "?": ["%Y-%m-%d", ".√©9>Ûìà¨¬ë^pû≤ö@¬∏ ", true, 1.401298464324817e-45, 0.5277198255035683, true, 0.016184546243175117, 56, "√É\u001f", "release"], "(¬Ä2": 0.6093525181188112}, {">√Ñ¬üÛàãúc¬Æ√è¬æ": true, "Ùååà": 0.5436670859562526, "0": ""}, {"9}Òùóà√í-": ""}, {"9}Òùóà√í-": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "O¬®", "results": [{"\f√ª\u0014¬¨¬°°¥´£âÆ": "qLv¬°w¬´\\7Òµ∏é√Ω\u0017√Ös¬∑¬á", "U\u0001√≤ÒΩõøÙã´®\u001b<": false, "A¬¨": ["ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå", 14, 88, 37], "_R1UÛë£∑Úµªµ¬Ü√∏¬∑¬¢¬ò√ú": false, "f√â¬ü": [false, 17, "|¬ª√∑3√Æ¬Ü∂≥Ωs¬à¬∫", 38, true, true, 83, 0.2727353590215236, "Òóø∫ÚÖÜìu<6", 2.2250738585072014e-308], ")\u0005√ü": false, "g\u001c": "none", "reasoning": 0.4357888160794815, "ÚÑ¥£¬ì√∫¬ìÒ£©óÛ§ãó^§úÉ√±J": 0.1282898580095009, "¬ü*Úª∏ü\r": 1.1754943508222875e-38}, {"√ªS¬ÄF√≠^¬é√ô": true}, {"ÛùÇÆ√â¢¢∑iÛûè¥∆îPb": []}, {"√í8√ª¬ó?Z¬™√∞√í¬ú√ê": [66, 1, "U\b-KÒêçªw√Ñ¬ñtÚã¢∂¥ÆóW¬∫√ì\u000eGÛãªπF≤†õÚ¢öü"], "¬´": "√îÛù†ª\u0001", "r": [3.598960972336752e-284]}], "current_time": 1.147319088016899e-31, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "O¬®", "results": [{"\f√ª\u0014¬¨¬°°¥´£âÆ": "qLv¬°w¬´\\7Òµ∏é√Ω\u0017√Ös¬∑¬á", "U\u0001√≤ÒΩõøÙã´®\u001b<": false, "A¬¨": ["ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå", 14, 88, 37], "_R1UÛë£∑Úµªµ¬Ü√∏¬∑¬¢¬ò√ú": [], "f√â¬ü": [false, 17, "|¬ª√∑3√Æ¬Ü∂≥Ωs¬à¬∫", 38, true, true, 83, 0.2727353590215236, "Òóø∫ÚÖÜìu<6", 2.2250738585072014e-308], ")\u0005√ü": false, "g\u001c": "none", "reasoning": 0.4357888160794815, "ÚÑ¥£¬ì√∫¬ìÒ£©óÛ§ãó^§úÉ√±J": 0.1282898580095009, "¬ü*Úª∏ü\r": 1.1754943508222875e-38}, {"√ªS¬ÄF√≠^¬é√ô": true}, {"ÛùÇÆ√â¢¢∑iÛûè¥∆îPb": []}, {"√í8√ª¬ó?Z¬™√∞√í¬ú√ê": [66, 1, "U\b-KÒêçªw√Ñ¬ñtÚã¢∂¥ÆóW¬∫√ì\u000eGÛãªπF≤†õÚ¢öü"], "¬´": "√îÛù†ª\u0001", "r": [3.598960972336752e-284]}], "current_time": 1.147319088016899e-31, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_returns_tuple_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_returns_tuple_of_list_and_dict", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_returns_tuple_of_list_and_dict", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x1120ac500>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11224a7a0>"}}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": "\\√Ø¬é√æO√â", "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": false, "¬Ñ<": true, "hH": "n"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": false, "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": false, "¬Ñ<": true, "hH": "n"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": false, "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": "", "¬Ñ<": true, "hH": "n"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": false, "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": "", "¬Ñ<": false, "hH": "n"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": false, "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": false, "¬Ñ<": false, "hH": "n"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"√çg\u0012¬Ü¬∏": false, "¬ï\u0004ÙÅÅá": "p√ö]", "¬µ√†": false, "¬Ñ<": false, "0": ""}, {"0": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "√Æ\u0000√¥C√ß‡¨ú√ë\u0005\u0000ÚÖçö√°", "results": [{"0": ""}, {"0": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "MÒºµ¶√≠¬™", "results": [{"k": 0.4534654890385862, "√≥3Û≤íØ¬º": false, "t¬∏>√ô\u0016H\nZ√∑Á∂ç": false, "<T¬üÛçõª√Å'¬Ç¬ï": 0.6985703681846563, "\u000b¬ãûÑ∫√ÑÚã∂ç√ó√µ¬éÙåèò": 0.7727375354449799, "\u0000": "√ªÚîàª!", "ï¢Ö¬≤yÛñçä": 446, "~ÚâÄé√•": "¬ï", "√Å¬ø": 0.0, "√π√É!": 2.2250738585e-313}, {"+√úeÚπ°®¬æ": 501, "¬û": "\u0012", ",": 22, "¬±": 824}, {"\u000b¬∞": 0.522907569823657, "√•¬ã√∫Úúè∫Ô¨©Úé§Åq*b": false}, {"¬Ç": false, "s": 0.307334263226633, "ÚÖïâ¬ÉS√±k¬Ç¬®√∂tE¬ù": 148, "Z": 741, "¬´": 1.175494351e-38, "√ßÚ£¶∂√±l\u0012G√©": 538, "G": true}, {"n√¨$": true, "ÛàöúKen": 1.401298464324817e-45, "√≠": "Ûëñè√ø", "¬ø": 465, "ùó¨Úëíë": 4.7068133174446575e-107, "a¬Ä¬≥Ùáûä": 0.4, "¬∫": false, "7¬è#√≠òùãÒ¢ùä\u001c\u0016√†": "S¬äÚØôå", "Øíü~*:¬Ñ": 0.7042434469990843, "Úù±äØ≥∂ïøµ¬é\u001b\u0015¨≤®ø≠∂Z\"kÒ¨¶âN¬Ä": ""}, {"6": 626, "\u0007|√æ": 252, "¬®MΩßú¬é¬±l¬Å¬ß:+e¬ó": true, "¬≤x√™√õ": false, "¬ì√è@¬ç": "¬æ", "false": 384, "+¬Ä`√è": "√ì√åOÎñâ¬á9¬°¬ñ√¨√æÚÉø®Ûæí¢|"}, {"Òá∏¨¬¢,\u0015(J±éë": true, "Òæì†√º": "√´¬çYÒ¢îÄ", "√ê": 705, "Ú†∂É¬¶¬∞√≤¬©": false, "U\u0007Û´åüññµrW¬õ\u001a¬à¬∂": 144}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "MÒºµ¶√≠¬™", "results": [{"k": 0.4534654890385862, "√≥3Û≤íØ¬º": false, "t¬∏>√ô\u0016H\nZ√∑Á∂ç": false, "<T¬üÛçõª√Å'¬Ç¬ï": 0.6985703681846563, "\u000b¬ãûÑ∫√ÑÚã∂ç√ó√µ¬éÙåèò": 0.7727375354449799, "\u0000": "√ªÚîàª!", "ï¢Ö¬≤yÛñçä": 446, "~ÚâÄé√•": "¬ï", "√Å¬ø": 0.0, "√π√É!": 2.2250738585e-313}, {"+√úeÚπ°®¬æ": 501, "¬û": "\u0012", ",": 22, "¬±": 824}, {"\u000b¬∞": 0.522907569823657, "√•¬ã√∫Úúè∫Ô¨©Úé§Åq*b": false}, {"¬Ç": false, "s": 0.307334263226633, "ÚÖïâ¬ÉS√±k¬Ç¬®√∂tE¬ù": 148, "Z": 741, "¬´": 1.175494351e-38, "√ßÚ£¶∂√±l\u0012G√©": 538, "G": true}, {"n√¨$": true, "ÛàöúKen": 1.401298464324817e-45, "√≠": "Ûëñè√ø", "¬ø": 465, "ùó¨Úëíë": 4.7068133174446575e-107, "a¬Ä¬≥Ùáûä": 0.4, "¬∫": false, "7¬è#√≠òùãÒ¢ùä\u001c\u0016√†": "S¬äÚØôå", "Øíü~*:¬Ñ": 0.7042434469990843, "Úù±äØ≥∂ïøµ¬é\u001b\u0015¨≤®ø≠∂Z\"kÒ¨¶âN¬Ä": ""}, {"6": 626, "\u0007|√æ": 252, "¬®MΩßú¬é¬±l¬Å¬ß:+e¬ó": true, "¬≤x√™√õ": false, "¬ì√è@¬ç": "¬æ", "false": 384, "+¬Ä`√è": "√ì√åOÎñâ¬á9¬°¬ñ√¨√æÚÉø®Ûæí¢|"}, {"Òá∏¨¬¢,\u0015(J±éë": true, "Òæì†√º": "√´¬çYÒ¢îÄ", "√ê": 705, "Ú†∂É¬¶¬∞√≤¬©": false, "U\u0007Û´åüññµrW¬õ\u001a¬à¬∂": 446}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_scores_are_floats_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_scores_are_floats", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_scores_are_floats", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x111669ca0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x112249da0>"}}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"¬äÛ∫º®¬§": 639, "5": ":", "√Ü\u0003√∂√õÒçäó√Å": 128, ":√è": 0.604071364909644, "Û≤ºí": 0.5256473736628985, "√ö": 0.852776216288756, "ÛôûØzg": 688, "ÒêÉß√ªT√£¬†\u001ej††ß√†¬ôÒó©Ä\t¬ç*Ò§≤í¬ö¬ê¬†)4": 0.9641287432860646, "¬™": 0.9590485133819342, "√âÚÄû´\u0015": 359}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬∞¬°ÚîÄ°": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 0.0, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"¬äÛ∫º®¬§": 639, "5": ":", "√Ü\u0003√∂√õÒçäó√Å": 128, ":√è": 0.604071364909644, "Û≤ºí": 0.5256473736628985, "√ö": 0.852776216288756, "ÛôûØzg": 688, "√≤√ö√ö": 0.9641287432860646, "¬™": 0.9590485133819342, "√âÚÄû´\u0015": 359}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬∞¬°ÚîÄ°": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 0.0, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"¬äÛ∫º®¬§": 639, "5": ":", "√Ü\u0003√∂√õÒçäó√Å": 128, ":√è": 0.604071364909644, "Û≤ºí": 0.5256473736628985, "√ö": 0.9641287432860646, "ÛôûØzg": 688, "√≤√ö√ö": 0.9641287432860646, "¬™": 0.9590485133819342, "√âÚÄû´\u0015": 359}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬∞¬°ÚîÄ°": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 0.0, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"¬äÛ∫º®¬§": 639, "5": ":", "√Ü\u0003√∂√õÒçäó√Å": 128, ":√è": 0.604071364909644, "Û≤ºí": 0.5256473736628985, "√ö": 0.9641287432860646, "ÛôûØzg": 688, "√≤√ö√ö": 0.9641287432860646, "¬™": 0.9590485133819342, "√âÚÄû´\u0015": 359}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬∞¬°ÚîÄ°": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 2.2250738585072014e-308, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"¬äÛ∫º®¬§": 639, "5": ":", "√Ü\u0003√∂√õÒçäó√Å": 128, ":√è": 0.604071364909644, "Û≤ºí": 0.5256473736628985, "√ö": 0.9641287432860646, "ÛôûØzg": 688, "√≤√ö√ö": 0.9641287432860646, "¬™": 0.9590485133819342, "√âÚÄû´\u0015": 359}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬™": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 2.2250738585072014e-308, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"yesterday": false}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬™": 726, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 2.2250738585072014e-308, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "±æâ¬øÆ™£¬Ü,¬∞ÙÜîª¬ÜÛ©Äæb√íÙàë∏j\u0018ÛÖÄækÚπï≠HÚ™òón¬ïC\u001f¬≠_√øÒ≥ïªIÛ™î™¬§*Ú¶èÅ\u00058√ôÚøïë¬ê¬î s", "results": [{"yesterday": false}, {"Û§ª°(2L\bV": 0.8029217987419937, "¬≤": 574, "ö¶åH": 232, "¬™": 232, "S\u001b¬≤": 2.2250738585072014e-308, "¬£]": false, "ÚÇ¢äY": "√≤√ö√ö"}, {"yesterday": false}], "current_time": 2.2250738585072014e-308, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "Òü§Ø¬®√ú=√í√©z√∑", "results": [{"f3": "Íì°¬ëÒÜ∑ô", "¬™": 0.08914118773704917, "tÚõìöGhÛ∏åÇ": 0.8001660552746943, "\u00169": 352, "√ó'¬≠¬îÙÜáô√óΩΩ≠": true, "+¬≤": 0.5676365220566552}, {"¬•√¨√±": false, "√Ö¬ó": 20}, {"√ë¬º9±ï°ÚûÉì√íÛ∑ï¥Ò°ºΩÒ≠é™k¬æ √ØÛ¥∑î": "¬Ø√ÑÒó¥ë¬´¬æÒ©®Ö¬Æ\u0013\u001d_X¬ß", "√ç¬ö\u001c¬É√´√†¬≥√º¬õ#": 0.8740900719543421, "D√û¬ëF¬Ç(": 0.9277595715496016, "√ìu6¬Å\u000f": 90}, {"üºï": "√ø√∫\u0014\u001blM^\"J0¬¶¬πÒÉü©y¬≥,¬§PÚÄ§•¬üºàÆ", "=¬ÜÚÅæã√æ\u00078": true}, {"{A¬ö√§": 134, "cæî¢Ò•©ó": "√å\u000b\bëûäS√ä\u00055¬èW\u0007πΩ≤ÛöÜ¨Úà≠áÛ∑º∑¬Ω", "ÛèÄå√ë7s¬µ\u0019|¬°Û§Éí¬è¬¶Òóßµ=(": 4.672452040981864e-299, "\u0006√π": "√©\u001f√µ"}, {"√ÜÛÉòñk\u000b¬Å√§w√¶Z}\u0017iRlÚ•õÇV\u0007ÚõÆê¬âÛπãÑ": 0.5958375585004588, "Ûíô™\u0018=Y": 619, "y¬ô": 999, "√¥¬∫√¥ø£àÚã´¢H": "¬§¬≤√®√Ö√¨√∞√Ä√£q.¬ô", "ó≥±": true}, {"√∏¬ûz√õ": 0.9448544745207663}, {"u¬§": 0.39521750473223005, "¬É": 0.0}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "Òü§Ø¬®√ú=√í√©z√∑", "results": [{"f3": "Íì°¬ëÒÜ∑ô", "¬™": 0.08914118773704917, "tÚõìöGhÛ∏åÇ": 0.8001660552746943, "\u00169": 352, "√ó'¬≠¬îÙÜáô√óΩΩ≠": true, "+¬≤": 0.5676365220566552}, {"¬•√¨√±": false, "√Ö¬ó": 20}, {"√ë¬º9±ï°ÚûÉì√íÛ∑ï¥Ò°ºΩÒ≠é™k¬æ √ØÛ¥∑î": "¬Ø√ÑÒó¥ë¬´¬æÒ©®Ö¬Æ\u0013\u001d_X¬ß", "√ç¬ö\u001c¬É√´√†¬≥√º¬õ#": 0.8740900719543421, "D√û¬ëF¬Ç(": 0.9277595715496016, "√ìu6¬Å\u000f": 90}, {"üºï": "√ø√∫\u0014\u001blM^\"J0¬¶¬πÒÉü©y¬≥,¬§PÚÄ§•¬üºàÆ", "=¬ÜÚÅæã√æ\u00078": true}, {"{A¬ö√§": 134, "cæî¢Ò•©ó": "√å\u000b\bëûäS√ä\u00055¬èW\u0007πΩ≤ÛöÜ¨Úà≠áÛ∑º∑¬Ω", "ÛèÄå√ë7s¬µ\u0019|¬°Û§Éí¬è¬¶Òóßµ=(": 4.672452040981864e-299, "\u0006√π": "√©\u001f√µ"}, {"√ÜÛÉòñk\u000b¬Å√§w√¶Z}\u0017iRlÚ•õÇV\u0007ÚõÆê¬âÛπãÑ": 0.5958375585004588, "Ûíô™\u0018=Y": 619, "y¬ô": 999, "√¥¬∫√¥ø£àÚã´¢H": "¬§¬≤√®√Ö√¨√∞√Ä√£q.¬ô", "ó≥±": true}, {"√∏¬ûz√õ": 0.9448544745207663}, {"tÚõìöGhÛ∏åÇ": 0.39521750473223005, "¬É": 0.0}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_metadata_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_metadata_fields_are_serializable_primitives", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_metadata_fields_are_serializable_primitives", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x112245cd0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x112249260>"}}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Ò¢Öö[¬îwiXP", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Ûâº∑`c√¥", "results": [], "current_time": 803405477.6066619, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "@": 318, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"'&¬¢": false, "¬§\u001b¬∂:√õÛµ≥ã√á¬ìr_": false, "^/": 629, "√µ√≤#∏Ø∑!_9¬πo√¶o√î": 77, "ÒàÑü¬Ñ\u0019% Q√ës¬ø√π√ä\t¬†": "freshness_decay", "v": 398, "¬Æ√™¬õ": "Ùá°¨", "9\t3": true, "√Ñ√ö": 379, "¬¥∞ªú¬ö¬êi√õ√ã": 660}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "@": 318, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"'&¬¢": false, "¬§\u001b¬∂:√õÛµ≥ã√á¬ìr_": false, "√Ω¬î√ëÒà†≤o¬à": true, "√µ√≤#∏Ø∑!_9¬πo√¶o√î": 77, "ÒàÑü¬Ñ\u0019% Q√ës¬ø√π√ä\t¬†": "freshness_decay", "v": 398, "¬Æ√™¬õ": "Ùá°¨", "9\t3": true, "√Ñ√ö": 379, "¬¥∞ªú¬ö¬êi√õ√ã": 660}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "@": 176, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"'&¬¢": false, "¬§\u001b¬∂:√õÛµ≥ã√á¬ìr_": false, "√Ω¬î√ëÒà†≤o¬à": true, "√µ√≤#∏Ø∑!_9¬πo√¶o√î": 77, "ÒàÑü¬Ñ\u0019% Q√ës¬ø√π√ä\t¬†": "freshness_decay", "v": 398, "¬Æ√™¬õ": "Ùá°¨", "9\t3": true, "√Ñ√ö": 379, "¬¥∞ªú¬ö¬êi√õ√ã": 660}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "@": 176, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "¬Ω\u0004√èiÒºöç√ö": true, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 176, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "¬Ω\u0004√èiÒºöç√ö": true, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}], "current_time": 388249408.82162964, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "Úùâ±", "results": [{"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 176, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}, {"x\u0018Ú§ºì¬¢√ø¬óÆºÉ√ê√çÙÜàº": 176, "S¬ã8Ò¨óÑB": 4.926805998460413e-178, "¬á\u0017W¬Ç√ò√õ√ñ¬áÛ®Øç{XÚòÉà=/√ê√ñ": false}, {"¬ÅÚµÑ©ÒºïÆ\"¬ç¬®¬ü": 1.1754943508222875e-38, "\u0014\u0007¬≤¬ê√ì¬ÇÚèãä\u000b√ù\u001f\tÛ∫Çà√æ\b√ó": "¬æ", "¬Ω\u0004√èiÒºöç√ö": true, "√™\u0001:\nux\\B¬ìÒßûÜ¬í\u001d\u0012¬ñ9√¢": "Ò©ïö\u0002", "\u001b;√™&Òè±π√É7\t√ú¬ß¬ü√º√§ÒÖåò": 732, "_√ª~\u0005": 0.5796109875541492, "U¬≥Ú∏ªà¶ÑÅm": 814, "7¬≥\u0000¬∞√àf\u00027_L√ô¬Å": 628, "Ûëé∏J": "√æ"}, {"aÛ¢´≤Æéó": true, "Ú¨°†~√â:Ò¨úô": 65, "I": "ÛÇµ®}Ò§êô√Ø_", "√Ω¬î√ëÒà†≤o¬à": true, "¬£kºê¢": 2.220446049250313e-16, "%Y-%m-%d %H:%M:%S": 299, "¬Ω\u0004√èiÒºöç√ö": true, "ËùÑ¬¨¬û√ãûë≥!w¬¥\u001b": false, "√æd√ã¬ç|\u0003¬ÑÛú∞≠¬èÛÆ©≤s√ª)√∑¬æÛïÉÜ¬≤¬òcZ": 0.1586824670821814, "¬´\u001bh√ø4\u000bÚíöΩH\u0004sÚûÆÉ†£≤Hi": 891}], "current_time": 0.1586824670821814, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_applied_flags_list_of_strings_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_applied_flags_are_list_of_strings", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_applied_flags_are_list_of_strings", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x112245a00>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11224b240>"}}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"A¬™": "'√ê√Ç(√≥9Ú∏ÄÄ", "\t\u000f√•": 828, "]¬Å¬≥√∂": 794}, {"uÚç≠†": false, "¬ê*": false}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"A¬™": "'√ê√Ç(√≥9Ú∏ÄÄ", "\t\u000f√•": 828, "]¬Å¬≥√∂": 794}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"A¬™": "'√ê√Ç(√≥9Ú∏ÄÄ", "\t\u000f√•": 718, "]¬Å¬≥√∂": 794}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"A¬™": "'√ê√Ç(√≥9Ú∏ÄÄ", "\t\u000f√•": 718, "]¬Å¬≥√∂": 794}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "\r¬©Ú¶ß¨¬å\u001b6√¶√≠)`c Ò£òπ¬í¬Ü√Ü¬Ø√¥": true, "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "Úå§ñ\u001e¬§", "results": [{"y": "", "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}, {"y": false, "√ÜjÛ´π¥Òé¥ß¬±r;t√äs\u0004": "√ò¬é", "0": 718, "√Ñ\u000e√°\bZÒº•ò,ì¨ì>Òáö™¬ú√ãEa\u001d¬£¬±": 0.1, "\u0018": 0.01240726147849425, "L¬ß": "öæ¶T\u001cÒøñï9L¬∫ÙÇπ∂", "g√ßa": 0.07052296687033756, "Òû±π¬ä": "Û∑Æ†√êÚ™èΩ√øs", "}WL≠ãì": 0.5290243703642427}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": ", \u0000√£", "results": [{"¬ñ¬≠¬Ñr√ª": 279, "¬ë\\Úø∏üy†ûÜ\u0002^": "öçå9", "\u0002ÛÑê©w\u0012": 4.276690139022185e-263, "ÛΩõ±Ûéìß√õKv": "¬Ø", "W\u0003√çK\u001dÒÄÆ∫\u001eÚ¢´¶¬ºÛπø¥~√´o\b√≤¬•X§£ÖÚä•år": false, "√Ä¬¢Ò∫ÖÉ": 0.5335341518622211, "\t3": true, "\u0010¬†": "√àR", "[¬∑¬Å£ç†Ùè©ÉÛ¨•´Û¶∏úp\u0016√ô¬Ä": false, "MiÚ§ü∫U": 553}, {"¬∏√µ√öI|¬ü\u0017Òºõ∏t": 28, "p√ç": false, "iÒÆÇäoE√Ω2c¬ñ√Ø": false, "j√Ä¬°√î√â¬õ7": "Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±", "freshness_metadata": "¬ú√ò"}, {" X\b¬ü√ò": true, "Úπúö\u0016": false, "F¬á|": false, "\u0019b¬Ç| ": 0.16018870211598404, "if": "√á¬¨√∞Úë•∞√ã√òÚú∑Ö\u0003√π√ï", "H¬∫Û©ä∞¬Ö√Ü√â-¬ò√Ö": 568, "Ê°á": 357, "Ûª¢Ø%Øô®√Ö": "Úâ®±√••õº", "aÙÑ∂ç√àÒ¶≠ô{¬Æ¬∑Ú±ôç¬≥¬±kpgÒ©îû√®\u0011√®ÒçåÜ": 0.6, "¬¥": 0.4}], "current_time": 509395269.3850735, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": ", \u0000√£", "results": [{"¬ñ¬≠¬Ñr√ª": 279, "¬ë\\Úø∏üy†ûÜ\u0002^": "öçå9", "\u0002ÛÑê©w\u0012": 4.276690139022185e-263, "ÛΩõ±Ûéìß√õKv": "¬Ø", "W\u0003√çK\u001dÒÄÆ∫\u001eÚ¢´¶¬ºÛπø¥~√´o\b√≤¬•X§£ÖÚä•år": false, "√Ä¬¢Ò∫ÖÉ": 0.5335341518622211, "0": "", "Úπúö\u0016": false, "F¬á|": false, "\u0019b¬Ç| ": 0.16018870211598404}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_handles_empty_inputs_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_handles_empty_inputs_gracefully", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_handles_empty_inputs_gracefully", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x112245d00>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11224bc40>"}}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "updated", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√í": false}, {"Û•îï¬º¥ïö√π√á": "\u0004√•\u0017", "¬®¬≤,>Û≤¥î¬Ö√â√®√¢¬àJ": 0.20480989819608802}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 361, "√ên": 1.0, "¬ã": 0.8669338892677996, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "3¬§": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√í": false}, {"Û•îï¬º¥ïö√π√á": "\u0004√•\u0017", "¬®¬≤,>Û≤¥î¬Ö√â√®√¢¬àJ": 0.20480989819608802}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 2.2250738585072014e-308, "√ên": 1.0, "¬ã": 0.8669338892677996, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "3¬§": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"Û•îï¬º¥ïö√π√á": "\u0004√•\u0017", "¬®¬≤,>Û≤¥î¬Ö√â√®√¢¬àJ": 0.20480989819608802}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 2.2250738585072014e-308, "√ên": 1.0, "¬ã": 0.8669338892677996, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "3¬§": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"Û•îï¬º¥ïö√π√á": "\u0004√•\u0017", "¬®¬≤,>Û≤¥î¬Ö√â√®√¢¬àJ": 0.20480989819608802}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 2.2250738585072014e-308, "√ên": 1.0, "¬ã": 0.8669338892677996, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 2.2250738585072014e-308, "√ên": 1.0, "¬ã": 0.8669338892677996, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "p√ë", "results": [{"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"\\b\\d{4}\\b": "√è\"\n", "√â√¥": false}, {"√ê.:": 0.2972594154040525, "êèπZM": 812, "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": 737, "N√¢¬¢Û©ááfÛó°ù¬ø8√¥Ùååªs": false, "√â√¥": "√ê8¬≤√∫Y"}, {"√∫t>t√Ω1¬¥Úüº£¬Ω": 738, "\u0016": 2.2250738585072014e-308, "¬ì√Ç": 2.2250738585072014e-308, "√ên": 1.0, "¬ã": 2.2250738585072014e-308, "øï∞\u001c¬ª¬ï√¶√≠Úõ∑ì": "W¬öÒ≤ã¨√ì¬è{Ú∫â¶¬ñ", "O\u000f¬ò√™Û∫®ÉG^¬ÆÚâÉ°m¬π√æ√§~ÚÆµ≤": true, "0": "Òæó∏√ò√∫E"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "¬ªÛãß≥\u0002√ü96Û±≤ñ\u000b¬∞¬πu", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_is_deterministic_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_is_deterministic", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_is_deterministic", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x112246780>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x11224b740>"}}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"¬æ\u0017¬Ñ√´¬≥(√Å¬•¬Ö√ø?": "√âÒæÄÆ¬†√£&"}, {"*ææéÛõêß‡°ë8¥äîÛÉ∫É¬±√Ω√Ω": false}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"¬æ\u0017¬Ñ√´¬≥(√Å¬•¬Ö√ø?": "√âÒæÄÆ¬†√£&"}, {"¬æ\u0017¬Ñ√´¬≥(√Å¬•¬Ö√ø?": "√âÒæÄÆ¬†√£&"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"¬æ\u0017¬Ñ√´¬≥(√Å¬•¬Ö√ø?": "√âÒæÄÆ¬†√£&"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"0": ""}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"0": "0"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"0": "}\u0006ÒëãÅ<¬ê¬ø"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "}\u0006ÒëãÅ<¬ê¬ø", "results": [{"}\u0006ÒëãÅ<¬ê¬ø": "}\u0006ÒëãÅ<¬ê¬ø"}], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "Úá¨í√å@{¬¨√∂L6√§Û≥Öí√â¬∫,¬æ¬ã>Ò¨ÑñËºò", "results": [{"=´èä?¬ß": false, "}9Úõèø√ÜÚõ±óc": 583, "Ûõºà√Ñ√ùÒëπµÚéº≠¬¥\u0001√ç√Ä√ò": false, "√¢4": 0.9500083514204853, "ÛøÆö\u000eOÚÇ†èÛ¶çú": 269}, {"Xx√Å¬îÛôÑ¢√®\u0019C+21√±*√º√∏√¥√≤Úù§ê\u0016¬´": 0.3746222563245876, "¬≤¬∞B√á\u000fc\u000e\u001f√º∫®πXÈ∑≥√ö": 261}, {"\u0019@\u0005Òèï†c;<": 0.1, "date": false}, {"¬ë√éq√ü¬éÚë∑å": "öß∫¬Å¬ñ√≤Ò¨¢ï√Ä√°¬å√¶zÛÄê∑¬ì√¨Û∂àâ\u0016√∂√é@Úçñö", "*√ò√ÅE": false, "¬≥¬ì": 0.8526725787084217, "Ò•≥õù∑†m": 0.478020762931633, "¬≠?Û©∂âÛèöìc¬¨Ò°ª∑F": 206, "¬†¬£√ø\r>√ì√àI\u0013q√™<": 590, "√ìÚÇäè\u0016@": 43}, {"P¬Å¬∏\u0004": "*ÒÉ≤ïÒåπõ{", "√è¬ª√ª√ù√™.d": 264, "¬ùT√ù\u00196ÚºøÜ": 809}, {"Ûß©ê¬è": 1.192092896e-07, "sÒêàè√ç": 180, "1": 6.103515625e-05, "√±!": "CÚ∫Å∑pRÔ∞¨√Ät√ø$Òãí¥¬î¬ü·¥ªa", "√ßS√∞l√•$¬≥Ò∑Æß√êV": "", "\u0011c√à": 0.9610192952147771, "√∑": 921, "\u0015\u0006¬ì√∏¬µ": "\u0014", "Ú¶ü¨√´¬ï(¬†∞∞â": 859}, {"¬∑": "&√Å¬§√π", "¬ô3M√Ñ√≤K": 0.4761060320966274, "(L¬Ñ¬ã√ùM\u0003Ë∏™¬é": true, "[Zõµª∫æöC¬è√øq\u0006#.êê∏öÄ™Úáì∏oe\u0015": false, "¬¶": false, "√ú#ÛíÉù(": true, "B": false, "#\u0014¬ù¬¥": 0.8376181891700212}, {">": true, "¬ù¬îÒ°≥∞\u001d\u0007¬≠o¬ø": false, "\u001fÚõï∂`\u0000_\u0002√Ü": 0.11271337612153134}, {"F√á": 773, "\u001f\r": 0.07450792764647464, "∫¨è¬™√¢|√õÚãîúû∞∫Û®ºΩ0|g¬èI¬á-7√ñ¬ßw}": "{zd\t\u001c", "g": 860, "INF": true}, {"Ò´û≤": true, "¬à!¬•Ûàßï√ò": "√ûj¬ºÚçà•Ú†≥Ä¨∫Ñ¬¢", "w√ù\u0015": "Ûã®í$¬∏", "¬óvK,√°Û∫ö≥": 693, "\t¬º √úÛ¨àæ¬´¬º¬ú": 0.2}, {"o¬ª√™Ú©î∏": "hot", "{¬ëR\u000f}": "¬ã¬∞¬ã¬∞¬ñQ√™√Ø\u000bÎ°±√åd", "¬ö": "", "5√ù¬£p": 408, "¬ß\t": "¬≤√∞±áá¬è√ø√âúûã¬†¬Ü¬†:", "√Ø¬ôÛµº∫ÚîÄÇ¬πÚ¢Éä|√í√ã:d¬±L<√óu¬ãÒà™∑!√ò": 0.6914935882506686, "ÛûπªÚ™ï±¬ù": false, "ÚíÑ∂[√™√Ö\u0007ÌçÖ": false}, {"√©¬ïeÚ•±îC√≤\u0014Ûú∑¢,f": 485, "¬∫#Q ÙÅï¶ÚöíêCÚèª§]`\u0005%√¥¨â≤\u001d": 519, "¬ÉÒûñ¥XΩπ™™æµ√ñbH": "¬è", "√í\b\u0010√öÛéæÖ√∑": 0.7759577322961351, "√ò¬∑¬ú√õ\u0010/√≤√õ\u0001": 0.6750399389501965, "cH√ßÛÉ´§√ò\u001fπ¶úõò∂√£V": false, "¬Æ": 0.0009675439138389292, "¬ªïéÑ/i¬øRK": false, "Ò¨ÄæÛµâÆ": 1000}], "current_time": 496848382.6371049, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "Úá¨í√å@{¬¨√∂L6√§Û≥Öí√â¬∫,¬æ¬ã>Ò¨ÑñËºò", "results": [{"=´èä?¬ß": false, "}9Úõèø√ÜÚõ±óc": 583, "Ûõºà√Ñ√ùÒëπµÚéº≠¬¥\u0001√ç√Ä√ò": false, "√¢4": 0.9500083514204853, "ÛøÆö\u000eOÚÇ†èÛ¶çú": 269}, {"Xx√Å¬îÛôÑ¢√®\u0019C+21√±*√º√∏√¥√≤Úù§ê\u0016¬´": 0.3746222563245876, "¬≤¬∞B√á\u000fc\u000e\u001f√º∫®πXÈ∑≥√ö": 261}, {"\u0019@\u0005Òèï†c;<": 0.1, "date": false}, {"¬ë√éq√ü¬éÚë∑å": "öß∫¬Å¬ñ√≤Ò¨¢ï√Ä√°¬å√¶zÛÄê∑¬ì√¨Û∂àâ\u0016√∂√é@Úçñö", "*√ò√ÅE": false, "¬≥¬ì": 0.8526725787084217, "Ò•≥õù∑†m": 0.478020762931633, "¬≠?Û©∂âÛèöìc¬¨Ò°ª∑F": 206, "¬†¬£√ø\r>√ì√àI\u0013q√™<": 590, "√ìÚÇäè\u0016@": 43}, {"P¬Å¬∏\u0004": "*ÒÉ≤ïÒåπõ{", "√è¬ª√ª√ù√™.d": 264, "¬ùT√ù\u00196ÚºøÜ": 809}, {"Ûß©ê¬è": 1.192092896e-07, "sÒêàè√ç": 180, "1": 6.103515625e-05, "√±!": "CÚ∫Å∑pRÔ∞¨√Ät√ø$Òãí¥¬î¬ü·¥ªa", "√ßS√∞l√•$¬≥Ò∑Æß√êV": "", "\u0011c√à": 0.9610192952147771, "√∑": 921, "\u0015\u0006¬ì√∏¬µ": "\u0014", "Ú¶ü¨√´¬ï(¬†∞∞â": 859}, {"¬∑": "&√Å¬§√π", "¬ô3M√Ñ√≤K": 0.4761060320966274, "(L¬Ñ¬ã√ùM\u0003Ë∏™¬é": true, "[Zõµª∫æöC¬è√øq\u0006#.êê∏öÄ™Úáì∏oe\u0015": false, "¬¶": false, "√ú#ÛíÉù(": true, "B": false, "#\u0014¬ù¬¥": 0.8376181891700212}, {">": true, "¬ù¬îÒ°≥∞\u001d\u0007¬≠o¬ø": false, "\u001fÚõï∂`\u0000_\u0002√Ü": 0.11271337612153134}, {"F√á": 773, "\u001f\r": 0.07450792764647464, "∫¨è¬™√¢|√õÚãîúû∞∫Û®ºΩ0|g¬èI¬á-7√ñ¬ßw}": "{zd\t\u001c", "g": 860, "INF": true}, {"Ò´û≤": 0.0009675439138389292, "¬à!¬•Ûàßï√ò": "√ûj¬ºÚçà•Ú†≥Ä¨∫Ñ¬¢", "w√ù\u0015": "Ûã®í$¬∏", "¬óvK,√°Û∫ö≥": 693, "\t¬º √úÛ¨àæ¬´¬º¬ú": 0.2}, {"o¬ª√™Ú©î∏": "hot", "{¬ëR\u000f}": "¬ã¬∞¬ã¬∞¬ñQ√™√Ø\u000bÎ°±√åd", "¬ö": "", "5√ù¬£p": 408, "¬ß\t": "¬≤√∞±áá¬è√ø√âúûã¬†¬Ü¬†:", "√Ø¬ôÛµº∫ÚîÄÇ¬πÚ¢Éä|√í√ã:d¬±L<√óu¬ãÒà™∑!√ò": 0.6914935882506686, "ÛûπªÚ™ï±¬ù": false, "ÚíÑ∂[√™√Ö\u0007ÌçÖ": false}, {"√©¬ïeÚ•±îC√≤\u0014Ûú∑¢,f": 485, "¬∫#Q ÙÅï¶ÚöíêCÚèª§]`\u0005%√¥¨â≤\u001d": 519, "¬ÉÒûñ¥XΩπ™™æµ√ñbH": "¬è", "√í\b\u0010√öÛéæÖ√∑": 0.7759577322961351, "√ò¬∑¬ú√õ\u0010/√≤√õ\u0001": 0.6750399389501965, "cH√ßÛÉ´§√ò\u001fπ¶úõò∂√£V": false, "¬Æ": 0.0009675439138389292, "¬ªïéÑ/i¬øRK": false, "Ò¨ÄæÛµâÆ": 1000}], "current_time": 496848382.6371049, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "enhance_retrieval_results_output_json_serializable_failed", "query": "0", "results": [], "current_time": null, "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'"}
{"test": "auto_property_failure::test_enhance_retrieval_results_output_is_json_serializable", "nodeid": "tests/property/test_freshness_enhancer_type_invariants_props.py::TestFreshnessEnhancerTypeInvariants::test_enhance_retrieval_results_output_is_json_serializable", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_freshness_enhancer_type_invariants_props.py", "error": "FreshnessEnhancer.__init__() missing 1 required positional argument: 'config'", "locals": {"self": "<tests.property.test_freshness_enhancer_type_invariants_props.TestFreshnessEnhancerTypeInvariants object at 0x1122463f0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1122498a0>"}}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015√∞Û≠ïç&Úø≤Æ#iÛÇ∏¢": 0.0, "\b": 72, "Infinity": true, "¬™¬ø√º¬∑": true, "¬∂\u0019Òüåâ$`¬∏Òö∑â2¬ù¬ª¬°√ò¬¨¬îhyÚéÆú>¬∑": 0.99999}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 1.0, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 999, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015√∞Û≠ïç&Úø≤Æ#iÛÇ∏¢": 0.0, "\b": 72, "Infinity": true, "¬™¬ø√º¬∑": true, "¬∂\u0019Òüåâ$`¬∏Òö∑â2¬ù¬ª¬°√ò¬¨¬îhyÚéÆú>¬∑": 0.99999}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 1.0, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"\u0015√∞Û≠ïç&Úø≤Æ#iÛÇ∏¢": false, "\b": 72, "Infinity": true, "¬™¬ø√º¬∑": true, "¬∂\u0019Òüåâ$`¬∏Òö∑â2¬ù¬ª¬°√ò¬¨¬îhyÚéÆú>¬∑": 0.99999}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 1.0, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 1.0, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 0.5422207990568572, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 0.5422207990568572, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": false, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{" \u001c": "", "√ªÒâµë¬àÛ®¢ú¬ã&U±ö™\u0014Ø´ê√ú¬¶¬ÖÒΩõÆ¬é\u0003,L7¬£": 739, "√övÛÑ≠ëÚôûã_U¬±¬§": 5.525271642158467e-210, "!": "¬£", "\u001bÚÆºá™ï∏\u0011√π@√äÚíØ¢SU√æ√ë¶ëìÚÖü∏ ": true, "F": 934, "r": 0.5422207990568572, "¬∂√è¬õ¬Æ√ï¬†¬Ü&": 0.47720546582225276}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"√åo¬í¬§\u0007Û®ñ†": 0.21803358318430816, "\"ÒÅê¶y√ûÒÄ§®√£¬∞√ø√≤¬å√õÚÇöΩ¬ç¬üv3": false, "\u0004¬û¬Æ¬±": "¬ê¬û¬ñm", "ÙÉÑõ": 2.2250738585072014e-308, "≤âÇ£µ™¬ï¬õZ\u001e": "r¬ö%Òî∞≤¬≥"}, {"¬ç¬§\u0018": 938, "Ûïü™": 0.5422207990568572, "¬î√´¬´9": "¬åwÛîÄå√ÅÙÅ®π¬ô√Ç¬¢p√Ä√ê√£√∞¬±Ùé∫Ñ", "chunk_variant": "D√ë√ì√™/¬æ¬∑ÒîÆ•√∞√¢√úÚ¥ñ°M¬¥JÒÜò•DjA¬Ñ-$¬∫√º¬í√≠√∑M√æ", "¬¥±èæ": 235}, {"Ùèµü\u0000": ")√†\u001flÒÇÑ•Û£èú√∑", "¬ù¬É:√∞ÒÆ∫§\u0003": 226, "√ÅÛÅÖ°√ò|ÚÖò®Úú©áÌñÅ": 0.5765412711232524, "¬ªG√≥√ΩK\u000bS√ï": true, "eúºÜ¬†": ""}, {"o√Ω": "\f¬≥¬∫", "¬†Ùé∞º": 0.1671927726375875, "(Úº≠≠√ª√∑√ï": "_zN\u0014√≠Û∞†Ö", "Òó≠ê": 0.5422207990568572, "ó≤†;]#": 336, "\\": false, "¬à\u0000¬£": "ÙÖµ°", "CEÛò∏ÄÒõÉö(": 880, "¬èU¬´oxÚ∞±£ùñàl": 0.24904432681356053, "8öñá": "Ú´¶Ω¬∑√Æ"}], "alpha": 0.2, "per_file_penalty": 6.103515625e-05, "k": 27, "tag": "¬ùÒì¥µ¬™¬∫¬°\u001dÙÉù∞¬ñ\u001c¬àÒåíÉ√úÒ®£ü=", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_output_types_are_dicts_with_float_scores", "nodeid": "tests/property/test_reranker_type_invariants_props.py::TestRerankerTypeInvariants::test_mmr_rerank_output_types_are_dicts_with_float_scores", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_reranker_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_reranker_type_invariants_props.TestRerankerTypeInvariants object at 0x10421ed80>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10430e5c0>"}}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"ÙÑß∫√∫`´ì†.d": 886, "¬ª0√∑\u0003√§": "/¬ä¬ã2¬Él√ΩI", "¬ß\u0005N√ñi": 256, "üèªüëçüèª": 383, "\f": 3.905445426735822e-158, "Ò¨Äác√¢\u001eÒèú¨=√òÒéõø": false, "c|": "s=√£Íï∫√†√¥`√π%\u0011Úºç∞√ø"}], "alpha": 0.011288742504558915, "per_file_penalty": 0.34511726035172835, "k": 4, "tag": "^•∞∏¬π", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"ÙÑß∫√∫`´ì†.d": 886, "¬ª0√∑\u0003√§": "/¬ä¬ã2¬Él√ΩI", "¬ß\u0005N√ñi": 256, "üèªüëçüèª": 383, "\f": 3.905445426735822e-158, "Ò¨Äác√¢\u001eÒèú¨=√òÒéõø": false, "/¬ä¬ã2¬Él√ΩI": "s=√£Íï∫√†√¥`√π%\u0011Úºç∞√ø"}], "alpha": 0.011288742504558915, "per_file_penalty": 0.34511726035172835, "k": 4, "tag": "^•∞∏¬π", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"ÙÑß∫√∫`´ì†.d": 886, "¬ª0√∑\u0003√§": "/¬ä¬ã2¬Él√ΩI", "¬ß\u0005N√ñi": 256, "\f": 3.905445426735822e-158, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": 886, "¬ª0√∑\u0003√§": "/¬ä¬ã2¬Él√ΩI", "¬ß\u0005N√ñi": 256, "\f": 3.905445426735822e-158}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": 886, "¬ª0√∑\u0003√§": "/¬ä¬ã2¬Él√ΩI", "\f": 3.905445426735822e-158}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": 886, "¬ª0√∑\u0003√§": 0.0, "\f": 3.905445426735822e-158}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": 886, "¬ª0√∑\u0003√§": 3.905445426735822e-158, "\f": 3.905445426735822e-158}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"INSERT ": 0.7, "\u0018": 0.45403075062889, "Ò≤ñ∑": true, "ÚÆ≠ùv√∂√å": 825, "D¬ù¬æÚò∑≠": 545, "¬É¬ß√ñ√î": true, "√õÒü≤∂\nÚåõΩ": 0.6988552819981374, "\u000bÒÅíû": true, "¬∂√ÆÚçèélc√å√ã¬ª": 13, "√®ÙÇ§è": 0.6233690499299606}], "alpha": 0.1010179528219586, "per_file_penalty": 0.07096372666321173, "k": 13, "tag": "√¨¬îQ", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_alpha_bounds_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_alpha_bounds_are_respected", "nodeid": "tests/property/test_reranker_type_invariants_props.py::TestRerankerTypeInvariants::test_mmr_rerank_alpha_bounds_are_respected", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_reranker_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_reranker_type_invariants_props.TestRerankerTypeInvariants object at 0x10421e780>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x1041f3f60>"}}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"0": ""}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": "√î¬ö8√®Ûö¢π\u0019\u001a√ßÒ≠úÆ√Ö√Ωa√ày\u000fÛ¢ëëDÛ¨Ñ∏\u000e5\u0013¬î\u0003¥¢™v¬å\u001e\r"}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": true, "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": true, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"¬∏¬Ω√Å√ù|": 973, "√∏¬†": 235, "\u0005¬ç\u000f¬Ç¬ì%√ñÚü§ê.¬º\u0013¬âÛïÉ´eÒ°¢ª√ê": false, "¬∂√∂(": 0.5}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": "√î¬ö8√®Ûö¢π\u0019\u001a√ßÒ≠úÆ√Ö√Ωa√ày\u000fÛ¢ëëDÛ¨Ñ∏\u000e5\u0013¬î\u0003¥¢™v¬å\u001e\r"}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": true, "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": true, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": 0.0}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": true, "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": true, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": 0.0}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": true, "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": true, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"√Æ'": false, "¬ì√≤": 0.0}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": 0.0}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": "", "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": true, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"√Æ'": false, "¬ì√≤": 0.0}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": 0.0}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": "", "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": 708}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": false, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"√Æ'": false, "¬ì√≤": 0.0}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"√Æ'": false, "¬ì√≤": 0.0}, {"4∑£Æ¬π¬ü,¬¶Gi†≥ù¬£¬ê": 0.7622459926649332, "\u0002Òóóñ*‡®Ø√ì√Ä": "", "√ê,Òæ´º√Ω√™Y": 256, "Ò≥¥≥¥§•√∏√†Úèíπ√É√ùcM": false}, {"\u0000": 0.1, "\u001a\u0007z¬®Ûõ•ò2": false, "√´": 273}, {"√ñ": 0.8378522902471242, "FßØªÛê§ßÛ§á©H¬çÛêì™¬º√ê¬õ\u0017√èdÛ≥°çÒ°øÇÚ¢Å£√ß.√ø0": "∏π°", "Òëâº=√Ç√•√ï": false, "Ûëªã¬ü": false, "\u001b\u0017Íùè√úîß´√∞íÖù√ß\u0018√¶c\u0000n¬á": 276, "D¬±Ûöûñ√ß¬∞3√æ": false, "Úá±ÜÚÄßÅÚîéò4.Òú´ü¬áÚñ§õ": 221, "¬∂\u0004w¬™√¢2¬¢√™√ù¬ó": "√ün|¬ä\u0001%¬ä<", "√ö¶∏á√Å": "√†", "¬ñ\f¬∏¬†": "$√¶¬ø\u0018¬∂∂≤á√Ω¬¢"}, {"√Æ'": false, "¬ì√≤": 0.0}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"0": ""}], "error": "'score'"}
{"test": "mmr_rerank_empty_inputs_failed", "rows": [{"0": ""}], "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_handles_empty_inputs_gracefully", "nodeid": "tests/property/test_reranker_type_invariants_props.py::TestRerankerTypeInvariants::test_mmr_rerank_handles_empty_inputs_gracefully", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_reranker_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_reranker_type_invariants_props.TestRerankerTypeInvariants object at 0x10418e7b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10430e0c0>"}}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"¬µ\u0012Ú≤ûã": true, "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"¬∑¬Ö": false, "COM1": true, "√≥": 0.8668398341943839, "ÒòΩôÒëæ±√é`\u0002ºù≠√íBu¬ú": "√µÚæò¶¬≥Û∏ñàK¬¶√ï", "√µ": false, "¬ëNQ}u": "&√Ω"}, {"*\f¬ü•äù\u0002H√¢≤™ÜÒ∏å¥√±Ûãçù": 283, "¬é\u001e√ét¬øÚãñÑ¬®": 1.401298464324817e-45, "ÚªáÆÒÇÄüÚëÖø√ä?√øÒ§ÜØor\u0019Û¥Ñï√Ö": 330, "¬≥S": 151, "ÛÖçî¬™": 0.4332238429722953, "√Øk_": 0.1, "√§": false, "√ó": "¬∂\u001e", "x": 0.8769449209255327, "{": "√ñ√ò"}], "alpha": 0.043190247592724836, "per_file_penalty": 0.01962902869647932, "k": 6, "tag": "<>√ü¬âÒòª≥¬†", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"¬µ\u0012Ú≤ûã": true, "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": "", "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": ""}], "alpha": 0.8668398341943839, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": true, "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": "", "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": ""}], "alpha": 0.8668398341943839, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": true, "rÒèüß": "", "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": "", "rÒèüß": 130, "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": ""}], "alpha": 0.8668398341943839, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": true, "rÒèüß": "", "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": "¬ÇÒÑ∏ßÚ£ã©\u0007ùΩÑ√°√ãÚçÇÑ¬æ", "ÔÅ´¬∑√ë√é": ""}, {"0": ""}, {"0": ""}], "alpha": 0.8668398341943839, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": true, "rÒèüß": "", "¬™¬Ö": "filename", "¬†G¬ô": 549, "√Ä": 549, "ÔÅ´¬∑√ë√é": ""}, {"0": ""}, {"0": ""}], "alpha": 0.8668398341943839, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_is_deterministic_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_is_deterministic", "nodeid": "tests/property/test_reranker_type_invariants_props.py::TestRerankerTypeInvariants::test_mmr_rerank_is_deterministic", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_reranker_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_reranker_type_invariants_props.TestRerankerTypeInvariants object at 0x10423b6b0>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10430cc20>"}}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 978, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "[¬®": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√∏√®aoÚÅªø71W": "", "8": "", "none": 249, "\u0007": 855, "\u0006": "√´∑±õ&", "{\u000fdÒÇ•∑\u0010ÚùÉ®√∏": 256, "√©\u0003t\u0010¬±Ú®êØö≠µ": false, "¬ÖÚΩåÅ(√∏": 151, "Ú•É´¬º)\u001f√∫": false, "¬£¬Ñt¬Ä": 0.7960901382452961}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 978, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "[¬®": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 978, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "[¬®": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 978, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "[¬®": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 978, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 521, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "[¬®": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 978, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 521, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"\\√óf@√§√í√¶ôóî": false, "¬Ü„∏êÒü≤≤õèÇ√ì": 1.6168022469031686e-291, "I§íπÒ™Ø¥ÛôÇµñÅµ/9Û™Æ¢l\u0015mø∑áÙé°¨ÙàøØ": 0.3735268733211035, "\u0006Ô∏õ\u001aÒÇß¶ÚóÖØ¬§√Å√ê√ûõñïh√ê¬ªAv√ª\u0004¬™AÚ∞ö∑": true, "\rÒõ∞õ¬ß¬™√ëôè∂b\u0003": 2.3918877963967928e-167, "\u0013p¬êp~Úëéíw¬ÆÙÜñ∞Úç™ß": 0.0, "§∞£¬ß√ÇE": "ÙÅêá", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 34}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 978, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"√ó\u001d√úD√®√ê√á\f": true, "ingest_run_id": 245, ";\u0013oÙé¢ú√ã¬á": "√í", "¬ø\u0006\u0018¬Çg√Ä√¢R¢®û¬îÚ§¶µ\f\u0007ÚÑÑº\u000e\u001dyÒòÆ¥\u000ew": 521, "Û¶êπ√Ñ¬ñ\u0000=Cøû≥ÛáÄ´¬∂ªü∫¬≠¬õ¬ßy7": true, "√¥ÚóÖà": 976}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 978, "a": true}, {"¬±Òî∏õ√ä|z√ñ¬ú": "\u0007M¬ò&√ªÚ¨∞™¬ã¬àÒÖú¶e2√Év\u0013w\u000fÚÉûçÛçÑû", "PÒèàí√¥¬ò√ë¬©<√èK¬éÒìØ≥pQÚúô¢Û®É∂": 1.0, "¬ìL": true, "π≤ì√õ~¬∂√ë": 434, "~": true}, {"Û£òç": 0.45971956015938187, " ¬∞ÚÆº©ÚëÑ°√î": 1.1125369292536007e-308, "\u001a√Ø": "8", ".¬õ": "¬µ¬™√òÒìØª¬¢¬π"}, {"√ÖÚä´ú": true, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 746, "a": true}, {"√ÖÚä´ú": false, "¨çΩON√ôWÚú¶ª": "\u0000¬Ä\u000f", "meta_ops": 978, "a": true}, {"Ú≤èµ": 179, "Inf": "Ò¥±∞≤øî√∞√ä"}, {"NLÚ∂∏≠": 521, "√ó": 2.114425385350519e-193, "ZÚ•°§¬∏√µÛü∂º": true, "w√És√¨¬°√≤¬öqÚ§æìt¬¶√Å\u000fN\u0011%": 0.08063870239859906}, {"b\u001cÚª∞éÚΩã£R√è√®Ûö¨ûÛòßâ.¬ã¬úÚÜóπn∞Æ∑ÚÉñãÛëπº√ü": false, "¬í√ó": false, "¬ÉË≥ô?¬∞n": false, "¬∂\u0002√ñ": true, "&!¬Æ": 0.1, "Ûè§ë>¬´√´Ú¢áë\u0013¬ùf{": true, "z\u0003√î¬≤\t¬∞": 33, "C√Ø√Ω√î√öG\u0011¬¥\u0014ö™í": "T", "Is¬éÚö£ä¬µ√ß\u001b\u000eÙÇÜÅQÙèÅéÒê¥Ñ¬ª¬ÅR;ÚàûñT\u0005\u001a": 841, "√á": "ÚæØûÚ∏°∫"}, {"√∏rZ\u001eo√†L": "√∂¬é¬∫H", "√ç\u0005": "", "?¬õ¬∑)8": 0.40931155739034997}], "alpha": 0.7041191109725361, "per_file_penalty": 2.225073858507203e-309, "k": 16, "tag": "j)", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "auto_property_failure::test_mmr_rerank_output_is_json_serializable", "nodeid": "tests/property/test_reranker_type_invariants_props.py::TestRerankerTypeInvariants::test_mmr_rerank_output_is_json_serializable", "file": "/Users/danieljacobs/Code/ai-dev-tasks/tests/property/test_reranker_type_invariants_props.py", "error": "'score'", "locals": {"self": "<tests.property.test_reranker_type_invariants_props.TestRerankerTypeInvariants object at 0x10423b500>", "f": "<function given.<locals>.run_test_as_given.<locals>.wrapped_test at 0x10430fce0>"}}
