{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙}", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",򲍙", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "61", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014áÍ񻊪󤦿`", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014áÍ񻊪󤦿`", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014áÍ񻊪󤦿", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014áÍ񻊪", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014áÍ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014á", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014á", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊\u0014", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝󣉊", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢠝", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "”", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "M", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "=", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "6", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ";", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": ":7g𛠝󸩛çÂ½", "error": "assert 1 == 0\n +  where 1 = len({'db': ':7g\\U0001b81d\\U000f8a5bçÂ½'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "񌈃\u0018񔘜", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U0004c203\\x18\\U0005461c\\x99'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "·1E", "error": "assert 1 == 0\n +  where 1 = len({'db': '·1E'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "ᵘ", "error": "assert 1 == 0\n +  where 1 = len({'db': 'ᵘ'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\x9b'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¹G¯", "error": "assert 1 == 0\n +  where 1 = len({'db': '¹G¯'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "𤧒񦚖6M", "error": "assert 1 == 0\n +  where 1 = len({'db': '𤧒\\U000666966\\x86M\\x83'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "+", "error": "assert 1 == 0\n +  where 1 = len({'db': '+'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert 'port' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host", "error": "assert 'port' in {'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "qQ+þ\u0003ö𣛺\u00004", "error": "assert 'port' in {'db': 'qQ+þ\\x03ö𣛺\\x00\\x954'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'port' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "p򷧣\u0000\\񓃱#+", "error": "assert 'port' in {'db': 'p\\U000b79e3\\x00\\\\\\x9d\\x8f\\U000530f1'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'port' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": ":ÓÈ\f", "error": "assert 'port' in {'db': ':ÓÈ\\x0c'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'port' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "!×è󔌬\u0013", "error": "assert 'port' in {'db': '!\\ue332×è\\U000d432c\\x13'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "w", "error": "assert 'port' in {'db': 'w'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'port' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "*v®", "error": "assert 'port' in {'db': '*v®'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": ".ôÏ", "error": "assert 'port' in {'db': '.ôÏ'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "􁕊Ã𔈺", "error": "assert 'port' in {'db': '\\U0010154aÃ\\U0001423a'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 2.22507386e-313,  5.38148388e+016, -1.12955396e+038,\\n        6.12300879e+016,  3.00000000e+000, -7.06079539e+016,\\n       -8.91827823e+083,  3.72513304e+016], dtype='>f8').dtype\n +    where array([ 2.22507386e-313,  5.38148388e+016, -1.12955396e+038,\\n        6.12300879e+016,  3.00000000e+000, -7.06079539e+016,\\n       -8.91827823e+083,  3.72513304e+016], dtype='>f8') = ArrayTestModel(v8=array([ 2.22507386e-313,  5.38148388e+016, -1.12955396e+038,\\n        6.12300879e+016,  3.00000000e+000, -7.06079539e+016,\\n       -8.91827823e+083,  3.72513304e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [2.2250738585e-313, 5.381483884676786e+16, -1.1295539579988166e+38, 6.12300879092989e+16, 3.0, -7.0607953869778216e+16, -8.918278229157908e+83, 3.7251330360439736e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8').dtype\n +    where array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8') = ArrayTestModel(v8=array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8').dtype\n +    where array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8') = ArrayTestModel(v8=array([-8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83,\\n       -8.91827823e+83, -8.91827823e+83, -8.91827823e+83, -8.91827823e+83],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83, -8.918278229157908e+83]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8').dtype\n +    where array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.918278229157908e+83]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8').dtype\n +    where array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -8.91827823e+83],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.918278229157908e+83]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243,\\n       1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243],\\n      dtype='>f8').dtype\n +    where array([1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243,\\n       1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243],\\n      dtype='>f8') = ArrayTestModel(v8=array([1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243,\\n       1.54136958e-243, 1.54136958e-243, 1.54136958e-243, 1.54136958e-243],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243, 1.541369578183859e-243]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00,..., -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00,..., -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n        4.5199523e+16, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00,..., -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        4.5199523e+16,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        4.5199523e+16,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,...,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,...,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.00000...0000000e+00,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,...,  0.0000000e+00,\\n        0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-4.4470658e+16, -4.4470658e+16, -4.4470658e+16, -4.4470658e+16,\\n       -4.4470658e+16, -4.4470658e+16, -4.44706...4470658e+16, -4.4470658e+16,\\n       -4.4470658e+16, -4.4470658e+16, -4.4470658e+16, -4.4470658e+16],\\n      dtype='>f4').dtype\n +    where array([-4.4470658e+16, -4.4470658e+16, -4.4470658e+16, -4.4470658e+16,\\n       -4.4470658e+16, -4.4470658e+16, -4.44706...4470658e+16, -4.4470658e+16,\\n       -4.4470658e+16, -4.4470658e+16, -4.4470658e+16, -4.4470658e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-4.4470658e+16, -4.4470658e+16, -4.4470658e+16,..., -4.4470658e+16,\\n       -4.4470658e+16, -4.4470658e+16, -4.4470658e+16, -4.4470658e+16],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n       -0., -0., -0., -0., -0., -0., -0., -0.,..., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n       -0., -0., -0., -0., -0., -0., -0.], dtype=float16).dtype\n +    where array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n       -0., -0., -0., -0., -0., -0., -0., -0.,..., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n       -0., -0., -0., -0., -0., -0., -0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0... -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n       -0., -0., -0., -0., -0., -0., -0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4').dtype\n +    where array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 7.9779973e+15,  7.9779973e+15,  7.9...9973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4').dtype\n +    where array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 7.9779973e+15,  7.9779973e+15,  7.9...9973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4').dtype\n +    where array([[ 7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.977...79973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 7.9779973e+15,  7.9779973e+15,  7.9...9973e+15,  7.9779973e+15,\\n         7.9779973e+15,  7.9779973e+15,  7.9779973e+15,  7.9779973e+15]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.000...00100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4').dtype\n +    where array([[-2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.000...00100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-2.0000100e+00, -2.0000100e+00, -2.0...0100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.000...00100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4').dtype\n +    where array([[-2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.000...00100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-2.0000100e+00, -2.0000100e+00, -2.0...0100e+00, -2.0000100e+00,\\n        -2.0000100e+00, -2.0000100e+00, -2.0000100e+00, -2.0000100e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-1.0000000e+09, -1.0000000e+09, -1.0000000e+09, -1.0000000e+09,\\n        -1.0000000e+09, -1.0000000e+09, -1.000...00000e+09, -1.0000000e+09,\\n        -1.0000000e+09, -1.0000000e+09, -1.0000000e+09, -1.0000000e+09]],\\n      dtype='>f4').dtype\n +    where array([[-1.0000000e+09, -1.0000000e+09, -1.0000000e+09, -1.0000000e+09,\\n        -1.0000000e+09, -1.0000000e+09, -1.000...00000e+09, -1.0000000e+09,\\n        -1.0000000e+09, -1.0000000e+09, -1.0000000e+09, -1.0000000e+09]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.0000000e+09, -1.0000000e+09, -1.0...0000e+09, -1.0000000e+09,\\n        -1.0000000e+09, -1.0000000e+09, -1.0000000e+09, -1.0000000e+09]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4').dtype\n +    where array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.0000000e+00,  0.0000000e+00,  0.0...0000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  1.64445624e+16],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  6.92974529e+16,\\n        1.76583564e+16, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  0.00000000e+00,\\n        0.00000000e+00, -1.31255725e+69,  5.59516825e+16,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 608.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 404.0, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"chunk_id": [-0.8329572434013466, -0.4816074977566064, -0.025508959025623], "score": 0.5, "filename": "0.6077729524394001", "embedding": [0.1, 0.2, 0.3]}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 608.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"chunk_id": [-0.8329572434013466, -0.4816074977566064, -0.025508959025623], "score": 0.5, "filename": "0.6077729524394001", "embedding": [0.1, 0.2, 0.3]}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 608.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 624.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 624.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 624.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.0, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 342.0, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "embedding": [], "chunk_id": 0.5877899743810046, "score": 0.5}, {"filename": "0.5966842959384021", "file_path": "390", "embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "[0.037711913784204354, -0.6245688687637164, -0.2640408592888338, -0.7661831967900619, -0.8032447035109156, -0.7966422033899363, 0.7353980370675406, 0.4269883350249415, -5.538565346911285e-82, -0.5118583492224141]", "score": 624.0, "filename": "[0.2518417635429475, -2.9787200185931585e-239, -0.6358241840658012, 0.3745472467434523, -0.93312428874991, 1.401298464324817e-45, -0.9549708213609165, -0.6210447655842309, 0.8493813832267234, -0.5222641535023665]", "chunk_id": "test_chunk", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.5, "chunk_id": 122, "file_path": "134"}, {"filename": "򳎔U", "embedding": [0.729368997777208, 2.1221592638187125e-305, 0.09283289190035782, 0.1, -1.4044881588450095e-148], "score": 0.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 0.5, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"score": 0.5, "chunk_id": 626, "embedding": [0.1, 0.2, 0.3], "filename": "[0.98]", "file_path": "120"}, {"file_path": "0.7222645357912908", "score": 0.0, "embedding": [0.024155423236008167, 0.9731397540615685], "filename": "򚛄ñ򘍒󑗳𦆃𦜜ü욋þ÷", "chunk_id": [-0.4459659522289673, 0.5701768178721216, 0.6443971528294119, -9.835470810730854e-141, -8.888149086999902e-179, 0.5245868803814555, 0.7399831838420283, -0.7151606352776607, -0.6910518323284212, 0.62]}, {"filename": "True", "embedding": [0.1, 0.2, 0.3], "file_path": "False", "score": 0.5, "chunk_id": "test_chunk"}, {"score": 0.0, "embedding": [0.1, 0.2, 0.3], "filename": "/\u0011𗊇\u0007\u0013±^jtª󢓬", "chunk_id": 174, "file_path": "431"}, {"filename": "845", "embedding": [0.1, 0.2, 0.3], "file_path": "0.2", "score": 0.5, "chunk_id": [-3.1065429287744683e-75, -0.5778374528219489, 0.2, 0.6041454604113499, 0.2699561532350867, 0.6413775868052247, -0.8232880732800996, 0.7508147276282373, -1.390446507887405e-103, 0.9396929272428012]}, {"embedding": [0.1, 0.2, 0.3], "filename": "176", "score": 342.0, "file_path": "0.9374266499001147", "chunk_id": "test_chunk"}, {"filename": "170", "chunk_id": 342, "score": 0.5, "file_path": "legacy.adapter", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "449", "chunk_id": 0.4595755502309459, "score": 1.467003968324592e-199, "filename": "¦􏥵", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "True", "embedding": [0.1, 0.2, 0.3], "score": 180.0, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 636.0, "file_path": "0.16022219829119336", "chunk_id": false, "filename": "0.35812172361496436"}], "alpha": 0.3817461907629943, "per_file_penalty": 0.24224117023086517, "k": 50, "tag": "]\fK𩦮\u0015\u000b", "error": "assert False\n +  where False = isinstance({'chunk_id': '8d817807d6adca1a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"é¯W": 678}], "alpha": 0.9989525418871752, "per_file_penalty": 0.7, "k": 8, "tag": "©R°ñ󬰈吾", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"é¯W": 678}], "alpha": 0.9989525418871752, "per_file_penalty": 0.7, "k": 8, "tag": "é¯W", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"é¯W": 678}], "alpha": 0.9989525418871752, "per_file_penalty": 0.9989525418871752, "k": 8, "tag": "é¯W", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"é¯W": 8}], "alpha": 0.9989525418871752, "per_file_penalty": 0.9989525418871752, "k": 8, "tag": "é¯W", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"\u0017¢": 0.14812444769706049, "\u0004\u0015ó\u001e¦": 0.7085704080929195, "ô2ú\n9ÝÌtI򤃗yL": false}], "alpha": 0.32045828558519146, "per_file_penalty": 0.04280266731011718, "k": 19, "tag": "񶌦", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"\u0017¢": 0.7085704080929195, "\u0004\u0015ó\u001e¦": 0.7085704080929195, "ô2ú\n9ÝÌtI򤃗yL": false}], "alpha": 0.32045828558519146, "per_file_penalty": 0.04280266731011718, "k": 19, "tag": "񶌦", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": ",Ï\u001fkÁrì𾇫7¼", "mode": "reader", "query": "º\u00104񾅗", "tags": ["\u0004÷󓪇󲗨Î&õÇsÁÉ󜭔z-S򭻎", "񃲿)\f\u0011Ô\t񻶥}", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, ,Ï\u001fkÁrì𾇫7¼: reader mode requires gt_answer [type=value_error, input_value={'id': ',Ï\\x1f\\x84kÁrì...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": ",Ï\u001fkÁrì𾇫7¼", "mode": "reader", "query": "º\u00104񾅗", "tags": ["\u0004÷󓪇󲗨Î&õÇsÁÉ󜭔z-S򭻎", "ýQ", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, ,Ï\u001fkÁrì𾇫7¼: reader mode requires gt_answer [type=value_error, input_value={'id': ',Ï\\x1f\\x84kÁrì...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": ",Ï\u001fkÁrì𾇫7¼", "mode": "reader", "query": "º\u00104񾅗", "tags": ["\u0004÷󓪇󲗨Î&õÇsÁÉ󜭔z-S򭻎", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, ,Ï\u001fkÁrì𾇫7¼: reader mode requires gt_answer [type=value_error, input_value={'id': ',Ï\\x1f\\x84kÁrì...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "º\u00104񾅗", "tags": ["\u0004÷󓪇󲗨Î&õÇsÁÉ󜭔z-S򭻎", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "º\u00104񾅗", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...vÒ\\x04 f', 'D', 'ýQ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "ýQ"], "error": "assert ['¨nÆvÒ\\x04 f', 'D', 'ýQ'] == ['¨nÆvÒ\\x04 f...f', 'D', 'ýQ']\n  \n  At index 2 diff: 'ýQ' != '¨nÆvÒ\\x04 f'\n  Right contains 2 more items, first extra item: 'D'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...ÆvÒ\\x04 f', 'D', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode... '¨nÆvÒ\\x04 f', 'D']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode... '¨nÆvÒ\\x04 f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode... 'D', '¨nÆvÒ\\x04 f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...ÆvÒ\\x04 f', 'D', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...['¨nÆvÒ\\x04 f', 'D']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...['¨nÆvÒ\\x04 f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["¨nÆvÒ\u0004 f"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...gs': ['¨nÆvÒ\\x04 f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "D", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...ry': 'D', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, D: reader mode requires gt_answer [type=value_error, input_value={'id': 'D', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D", "0"], "error": "assert ['¨nÆvÒ\\x04 f', 'D', '0'] == ['¨nÆvÒ\\x04 f... f', 'D', '0']\n  \n  At index 2 diff: '0' != '¨nÆvÒ\\x04 f'\n  Right contains 2 more items, first extra item: 'D'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "D"], "error": "assert ['¨nÆvÒ\\x04 f', 'D'] == ['¨nÆvÒ\\x04 f...Ò\\x04 f', 'D']\n  \n  Right contains 2 more items, first extra item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f", "0"], "error": "assert ['¨nÆvÒ\\x04 f', 'D', '0'] == ['¨nÆvÒ\\x04 f...Ò\\x04 f', '0']\n  \n  At index 2 diff: '0' != '¨nÆvÒ\\x04 f'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "D", "¨nÆvÒ\u0004 f"], "error": "assert ['¨nÆvÒ\\x04 f', 'D'] == ['¨nÆvÒ\\x04 f...'¨nÆvÒ\\x04 f']\n  \n  Right contains one more item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["¨nÆvÒ\u0004 f", "0", "¨nÆvÒ\u0004 f"], "error": "assert ['¨nÆvÒ\\x04 f', '0'] == ['¨nÆvÒ\\x04 f...'¨nÆvÒ\\x04 f']\n  \n  Right contains one more item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "D", "tags": ["0", "0", "¨nÆvÒ\u0004 f"], "error": "assert ['0', '¨nÆvÒ\\x04 f'] == ['0', '0', '¨nÆvÒ\\x04 f']\n  \n  At index 1 diff: '¨nÆvÒ\\x04 f' != '0'\n  Right contains one more item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "D", "mode": "retrieval", "query": "0", "tags": ["0", "0", "¨nÆvÒ\u0004 f"], "error": "assert ['0', '¨nÆvÒ\\x04 f'] == ['0', '0', '¨nÆvÒ\\x04 f']\n  \n  At index 1 diff: '¨nÆvÒ\\x04 f' != '0'\n  Right contains one more item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "¨nÆvÒ\u0004 f"], "error": "assert ['0', '¨nÆvÒ\\x04 f'] == ['0', '0', '¨nÆvÒ\\x04 f']\n  \n  At index 1 diff: '¨nÆvÒ\\x04 f' != '0'\n  Right contains one more item: '¨nÆvÒ\\x04 f'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0']\n  \n  Right contains 2 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["\u001fm"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...', 'tags': ['\\x1fm']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["º󤀨³£𤸫"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...'º\\U000e4028³£𤸫']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["ïý®A𘣺"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...'tags': ['ïý®A𘣺']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "ïý®A𘣺", "mode": "reader", "query": "ïý®A𘣺", "tags": ["ïý®A𘣺"], "error": "1 validation error for GoldCase\n  Value error, ïý®A𘣺: reader mode requires gt_answer [type=value_error, input_value={'id': 'ïý®A𘣺', 'mo...'tags': ['ïý®A𘣺']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𝞹𜾓w\u0002õ\u001e¾Ì@VÓ󂧿5b", "mode": "reader", "query": "KäÓä򤵪ÏKÐíàHÆ", "tags": ["®", "✅ Auto-Started", "Ì", "񇐖]", "򅌢a¶â`ð", "q񺅻ý", "CÌtxÐf\u001f\u001f򙻩訾󴦂&", "\u0016\u0011o򛏦ô򂽽Î􈲫L򕻓Õ°%³Ú", "Ṹ𭿮E", "§^𡔝x%򐺳񕴅\u000eÐ\u0017򨇎򖾺"], "error": "1 validation error for GoldCase\n  Value error, 𝞹𜾓w\u0002õ\u001e¾Ì@VÓ󂧿5b: reader mode requires gt_answer [type=value_error, input_value={'id': '𝞹𜾓w\\x02õ\\x...00a81ce\\x81\\U00096fba']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["\u001fm"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...', 'tags': ['\\x1fm']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["\u001fm"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...', 'tags': ['\\x1fm']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "ïý®A𘣺", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...®A𘣺', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "º󤀨³£𤸫", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, º󤀨³£𤸫: reader mode requires gt_answer [type=value_error, input_value={'id': 'º\\U000e4028³£...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003", "tags": ["ZDC8", "Xû¬Q\u0004Ô\r", "\u0012\u0011Ýu#򲒹򒹃\u0010\u0002{", "񐙚Õ󤐍󽼪񞕳h", "\u0007%Á^", "?򙱗\u001cVÖ򂞕󸲔Ó", "B\u0004"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...0f8c94Ó', '\\x88B\\x04']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003", "tags": ["ZDC8", "Xû¬Q\u0004Ô\r", "\u0012\u0011Ýu#򲒹򒹃\u0010\u0002{", "񐙚Õ󤐍󽼪񞕳h", "\u0012\u0011Ýu#򲒹򒹃\u0010\u0002{", "?򙱗\u001cVÖ򂞕󸲔Ó", "B\u0004"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...0f8c94Ó', '\\x88B\\x04']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003", "tags": ["ZDC8", "Xû¬Q\u0004Ô\r", "\u0012\u0011Ýu#򲒹򒹃\u0010\u0002{", "񐙚Õ󤐍󽼪񞕳h", "\u0012\u0011Ýu#򲒹򒹃\u0010\u0002{", "?򙱗\u001cVÖ򂞕󸲔Ó", "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...c\\n\\U00069f59\\x03\\x8f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...x03\\x8f', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򹇂񝬰\u0004ôü𩥛񿻠å򠾼\n񩽙\u0003", "tags": ["򣉋("], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...'tags': ['\\U000a324b(']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򣉋(", "tags": ["򣉋("], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...'tags': ['\\U000a324b(']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򣉋(", "tags": ["򣉋("], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...'tags': ['\\U000a324b(']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "򣉋(", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...0a324b(', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "򣉋(", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 򣉋(: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a324b(', 'mo...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "¶,\u0016𣴸Ç", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",ó", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",ó", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",ó", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",ó", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "rg", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ã𪣥𰰌𞥣uæ󴜛", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "lÕ3³Åà^򍝋*a|𕶐", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "rg", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "r", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "(", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "B", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "@", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ">", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "<", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_token_count_monotonic_concat", "a": "Ù×\f¥", "b": "𵯹EnÑ\u0012âÉ¯¨c", "ca": 5, "cb": 3, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'Į\\U0001588fĢÈïĝăN'", "a": "'Į\\U0001588fĢÈ'", "b": "'ïĝăN'", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'óĿēõ'", "a": "'óĿ'", "b": "'ēõ'", "ca": 3, "cb": 4, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'İ-ďur\\U0007ec6dï\\U0010e54fà9'", "a": "'İ-ďur'", "b": "'\\U0007ec6dï\\U0010e54fà9'", "ca": 6, "cb": 3, "cab": 5}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "=içj#", "error": "assert 1 == 0\n +  where 1 = len({'db': '=içj'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "򲒆Bb«7jÒ󵌈\u0003ûð#", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U000b2486Bb«7jÒ\\U000f5308\\x03ûð'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "\u0004Å,4", "error": "assert 1 == 0\n +  where 1 = len({'db': 'Å,4\\x8c'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "U¦𢃆", "error": "assert 1 == 0\n +  where 1 = len({'db': 'U¦𢃆'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "ì\u0014\u000e\u0011R`w³󤇃;Î¢é􍦥ã½", "error": "assert 1 == 0\n +  where 1 = len({'db': 'ì\\x14\\x0e\\x82\\x11R`w³\\U000e41c3'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "X×󺒀򘯒y", "error": "assert 1 == 0\n +  where 1 = len({'db': 'X×\\U000fa480\\U00098bd2y'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "Í.", "error": "assert 1 == 0\n +  where 1 = len({'db': 'Í.\\x80'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "󛅵𴣛𽿂䬐", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U000db175\\U000348db\\U0003dfc2䬐'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "0", "error": "assert 'user' in {'db': '0'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "×\u0011\u0013", "error": "assert 'user' in {'db': '×\\x11\\x13'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "ê(ÚiiÈ¦µ", "error": "assert 'user' in {'db': 'ê(ÚiiÈ¦µ'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "dJP\u0012µ", "error": "assert 'user' in {'db': 'd\\x94JP\\x12µ'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'user' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "z l0", "error": "assert 'user' in {'db': 'z l\\x990'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "򇥎:󶊠l)", "error": "assert 'user' in {'db': '\\U0008794e:\\U000f62a0l)'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "򹀋Ø~÷Q|𚙼¦¶ù", "error": "assert 'user' in {'db': '\\U000b900bØ~÷Q|\\U0001a67c¦¶ù'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "\u0019h©`+G", "error": "assert 'user' in {'db': 'h©`\\x81+G'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "Cß", "error": "assert 'user' in {'db': '\\x8bCß'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "E", "error": "assert 'user' in {'db': 'E'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 5.1424228e+16,  2.0000000e-02,  2.0000000e-02,  1.1754944e-38,\\n        3.1246669e+16,  2.0000000e-02,  2.0000000e-02, -0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 5.1424228e+16,  2.0000000e-02,  2.0000000e-02,  1.1754944e-38,\\n        3.1246669e+16,  2.0000000e-02,  2.0000000e-02, -0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([ 5.1424228e+16,  2.0000000e-02,  2.0000000e-02,  1.1754944e-38,\\n        3.1246669e+16,  2.0000000e-02,  2.0000000e-02, -0.0000000e+00],\\n      dtype='>f4'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [5.142422755056026e+16, 0.019999999552965164, 0.019999999552965164, 1.1754943508222875e-38, 3.124666876244787e+16, 0.019999999552965164, 0.019999999552965164, -0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,\\n       0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.1246669e+16],\\n      dtype='>f4').dtype\n +    where array([0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,\\n       0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.1246669e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,\\n       0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.1246669e+16],\\n      dtype='>f4'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.124666876244787e+16]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 8.56597489e+015,  8.56597489e+015,  8.56597489e+015,\\n        8.56597489e+015,  8.56597489e+015,  8.56597489e+0...89e+015,  8.56597489e+015,  8.56597489e+015,\\n        8.56597489e+015,  8.56597489e+015,  8.56597489e+015], dtype='>f8').dtype\n +    where array([ 8.56597489e+015,  8.56597489e+015,  8.56597489e+015,\\n        8.56597489e+015,  8.56597489e+015,  8.56597489e+0...89e+015,  8.56597489e+015,  8.56597489e+015,\\n        8.56597489e+015,  8.56597489e+015,  8.56597489e+015], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 8.56597489e+015,  8.56597489e+015,  8.56597489....56597489e+015,  8.56597489e+015,\\n        8.56597489e+015,  8.56597489e+015,  8.56597489e+015], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7....2e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8').dtype\n +    where array([7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7....2e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([7.48086492e-106, 7.48086492e-106, 7.48086492e-1...8086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7....2e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8').dtype\n +    where array([7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7....2e-106, 7.48086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([7.48086492e-106, 7.48086492e-106, 7.48086492e-1...8086492e-106,\\n       7.48086492e-106, 7.48086492e-106, 7.48086492e-106, 7.48086492e-106],\\n      dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-4.8524691e+16, -4.8524691e+16, -4.8524691e+16, -4.8524691e+16,\\n        0.0000000e+00, -4.8524691e+16, -6.44461...8524691e+16, -4.8524691e+16,\\n       -4.8524691e+16, -4.8524691e+16, -4.8524691e+16, -4.8524691e+16],\\n      dtype='>f4').dtype\n +    where array([-4.8524691e+16, -4.8524691e+16, -4.8524691e+16, -4.8524691e+16,\\n        0.0000000e+00, -4.8524691e+16, -6.44461...8524691e+16, -4.8524691e+16,\\n       -4.8524691e+16, -4.8524691e+16, -4.8524691e+16, -4.8524691e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-4.8524691e+16, -4.8524691e+16, -4.8524691e+16,..., -4.8524691e+16,\\n       -4.8524691e+16, -4.8524691e+16, -4.8524691e+16, -4.8524691e+16],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[ 5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n... 5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]]).dtype\n +    where array([[ 5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n... 5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 5.15184327e+29,  5.15184327e+29,  5...5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[ 5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n... 5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]]).dtype\n +    where array([[ 5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n... 5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 5.15184327e+29,  5.15184327e+29,  5...5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29,  5.15184327e+29,\\n         5.15184327e+29,  5.15184327e+29]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.0000...00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]).dtype\n +    where array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.0000...00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0.00000000e+00, 0.00000000e+00, 0.00...0000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]).dtype\n +    where array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0...\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]).dtype\n +    where array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0...\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]).dtype\n +    where array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0...\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]).dtype\n +    where array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ],\\n ...,\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0. , 0. , 0. , 0. , 0. , 0. , 0. , 0...\\n       [0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ,\\n        0. , 0. , 0. , 0. , 0. , 0. , 0. ]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.20000000e+000,  1.21840488e+016,  7.97843190e-006,\\n       -1.10000000e+000,  6.66496989e-212], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 6.66496989e-212,\\n       6.66496989e-212, 6.66496989e-212, 6.66496989e-212, 6.66496989e-212],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 0.00000000e+000,\\n       0.00000000e+000, 0.00000000e+000, 0.00000000e+000, 6.66496989e-212],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.2587596378283075, "chunk_id": 607, "file_path": "418", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 27, "tag": "󠼊񍷟򍬁", "error": "assert False\n +  where False = isinstance({'chunk_id': '1fa223dfa1686981', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.2587596378283075, "chunk_id": 607, "file_path": "418", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 27, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '1fa223dfa1686981', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.5, "chunk_id": 607, "file_path": "418", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 27, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 27, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '1fa223dfa1686981', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '1fa223dfa1686981', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "451", "filename": "", "score": 0.5, "chunk_id": "", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.22756143903891785, "per_file_penalty": 1.9120575207846115e-299, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '1fa223dfa1686981', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"file_path": "󬓴󍧓", "score": 2.97166585187122e-242, "filename": "KÉ\u000f\u0016Ç󓮢\u0010\u0000񬢸", "chunk_id": "񺯳", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.8364423103025975, "per_file_penalty": 0.9437896745966021, "k": 20, "tag": "Âw", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ö𵓠󄳻񬿁𐭐_T`Y󟏚򈁬󾽑": 537, "N\u0002r": "", "󯞀iE􈘖󽡠)y îÕ㽳񋶴": false}, {"Ï": 847, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"graceful_handling": "yÖ®bB/ì\u001e([l«Kå\u0011Æ2>î~q", "]Y񺚥񢔪0󶧏󜠼": "ý󌸪"}], "alpha": 0.5319864656740844, "per_file_penalty": 0.7639174626054068, "k": 20, "tag": "솺]\u001cÎ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ö𵓠󄳻񬿁𐭐_T`Y󟏚򈁬󾽑": 537, "N\u0002r": "", "󯞀iE􈘖󽡠)y îÕ㽳񋶴": false}, {"Ï": 847, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}], "alpha": 0.5319864656740844, "per_file_penalty": 0.7639174626054068, "k": 20, "tag": "솺]\u001cÎ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"Ï": 847, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}], "alpha": 0.5319864656740844, "per_file_penalty": 0.7639174626054068, "k": 20, "tag": "솺]\u001cÎ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"Ï": 847, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"0": ""}, {"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"Ï": 0.8531499446339883, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"0": ""}, {"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"Ï": 0.8531499446339883, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"0": ""}, {"0": ""}], "alpha": 0.0, "per_file_penalty": 0.8531499446339883, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{" Ø񿉯Y": 0.8531499446339883, "ß\\𕼦󊣛}𻱌Ü1/𾺨`񧋍«`𣤽r-z": "é½·õ񹮱", "1 \u001d񖘎¨¸Í": 0.0, "îÍ𼜐S": "躌\u0004", "󳎗«\u0018": 13, "¶T󐅤": 128, "󢅬W]": 0.21541156010765855, "𱵟": true, "w\t񛇽ê񱇑s񯌯ÈS򦨴£Å\r5󄇁": true, "±ឭVÉ\f񈳦Q¾򱮝": "H.K"}, {"Ï": 0.8531499446339883, "g,ò'¬": 851, "": "'\u0012", "f£ï􌎯è": 0.5020376156859584, "Ó": true, "Scunthorpe": 0.0008317936949941986, "r\u000bAø򟲓򳾑¶6󖫠¯􍑑ἨÙE": false, "\u0005p\u000f¦": true, "¯󞳃\u0017`󐞿S~b": 0.03602320068200494, "¾􎥽ÒÙ񲩡>¾aL": false}, {"0": ""}, {"0": ""}, {"0": ""}], "alpha": 0.0, "per_file_penalty": 0.8531499446339883, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "J", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["~򗞆!", "/ð", "񟽴$È.Øs¿", ";󋖇±끮«𝣹", "पन्ह पन्ह त्र र्च कृकृ ड्ड न्हृे إلا بسم الله", "×\u0014Ñçèµ(", "Ë 򥚸%򴀲", "\u001f\u0019", "\u0012", "Q񟄁­¿Ã\u001a"], "error": "1 validation error for GoldCase\n  Value error, J: reader mode requires gt_answer [type=value_error, input_value={'id': 'J', 'mode': <Mode...U0005f101\\xad¿Ã\\x1a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "J", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["~򗞆!", "/ð", "񟽴$È.Øs¿", ";󋖇±끮«𝣹"], "error": "1 validation error for GoldCase\n  Value error, J: reader mode requires gt_answer [type=value_error, input_value={'id': 'J', 'mode': <Mode...0cb587±끮«\\x9b𝣹']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񟽴$È.Øs¿", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["~򗞆!", "/ð", "񟽴$È.Øs¿", ";󋖇±끮«𝣹"], "error": "1 validation error for GoldCase\n  Value error, 񟽴$È.Øs¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0005ff74$È.Øs...0cb587±끮«\\x9b𝣹']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񟽴$È.Øs¿", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["~򗞆!", "/ð", ";󋖇±끮«𝣹", ";󋖇±끮«𝣹"], "error": "1 validation error for GoldCase\n  Value error, 񟽴$È.Øs¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0005ff74$È.Øs...0cb587±끮«\\x9b𝣹']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񟽴$È.Øs¿", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 񟽴$È.Øs¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0005ff74$È.Øs...𠵘µl', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񟽴$È.Øs¿", "mode": "reader", "query": "b򔣥\u0011\r\r\u0000𠵘µl", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 񟽴$È.Øs¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0005ff74$È.Øs...𠵘µl', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񟽴$È.Øs¿", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 񟽴$È.Øs¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0005ff74$È.Øs...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["􉥳\u0010E𬰷½e񸂯򂤂򇥪p", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "𒟪𥆂", "\u0000", "®\u0001W%§󚆩𿲭", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["􉥳\u0010E𬰷½e񸂯򂤂򇥪p", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "𒟪𥆂", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["􉥳\u0010E𬰷½e񸂯򂤂򇥪p", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "U󈜼¬<򳺥,-É", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "U󈜼¬<򳺥,-É", "\u00165ú𽊮+tÁ", "U󈜼¬<򳺥,-É", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "U󈜼¬<򳺥,-É", "\u00165ú𽊮+tÁ", "U󈜼¬<򳺥,-É", "\u00165ú𽊮+tÁ", "俣Ë𞵦񟌑\u0003ÆE񏵧", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S", "U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...\\U00053d6a\\x959S', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "ú񓵪9S"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U..., 'ú\\U00053d6a\\x959S']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...0003d2ae+t\\x89Á', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "\u00165ú𽊮+tÁ"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...5ú\\U0003d2ae+t\\x89Á']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...89Á', '\\x94\\x00', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "\u0000"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...e+t\\x89Á', '\\x94\\x00']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...0003d2ae+t\\x89Á', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "\u00165ú𽊮+tÁ"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...5ú\\U0003d2ae+t\\x89Á']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...23\\U000f9ad7\\x17', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "}󹱻򢠣󹫗\u0017"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...00a2823\\U000f9ad7\\x17']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...9f\\\\\\U000e7a2dZx', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "\\󧨭Zx"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U..., '\\x9f\\\\\\U000e7a2dZx']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...0003d2ae+t\\x89Á', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "\u00165ú𽊮+tÁ"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...5ú\\U0003d2ae+t\\x89Á']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...x0e\\x14\\x8cx\\x7f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "\u0015\n򭼚Xé\u000e\u0014x"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...aXé\\x0e\\x14\\x8cx\\x7f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É", "0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...000b3ea5,-\\x8fÉ', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["U󈜼¬<򳺥,-É"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...¬<\\U000b3ea5,-\\x8fÉ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "qon¿򫾳è$", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...bfb3è$', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "俣Ë𞵦񟌑\u0003ÆE񏵧", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 俣Ë𞵦񟌑\u0003ÆE񏵧: reader mode requires gt_answer [type=value_error, input_value={'id': '俣Ë\\U0001ed66\\U...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "CB", "tags": ["񾘵x¾", "\u0005:", "\u0001?½", "¢<", "𖂕¼]", "\u000bÿ+P 񗙣򯤔", "\u0005", "񊕅󢶳\u000eÇÙ¸Ä>|?򄏕r©ë񽝝#Êj²ê", "\f"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode...7d75d#Êj²ê', '\\x0c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "CB", "tags": ["񾘵x¾", "\u0005:", "\u0001?½", "¢<", "𖂕¼]", "񊕅󢶳\u000eÇÙ¸Ä>|?򄏕r©ë񽝝#Êj²ê", "\u0005", "񊕅󢶳\u000eÇÙ¸Ä>|?򄏕r©ë񽝝#Êj²ê", "\f"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode...7d75d#Êj²ê', '\\x0c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "CB", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode...y': 'CB', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "0", "tags": ["undefined"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode..., 'tags': ['undefined']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "undefined", "tags": ["undefined"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode..., 'tags': ['undefined']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "undefined", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, undefined: reader mode requires gt_answer [type=value_error, input_value={'id': 'undefined', 'mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "9,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "9,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "9,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "9,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "0,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "0,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "older", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "|1򮶧", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "â", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "â", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "b", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "R", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "A", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "?", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "=", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ";", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_token_count_monotonic_concat", "a": "¯ª", "b": "3ê𡦹", "ca": 3, "cb": 5, "cab": 4}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¢^¥vH򹈍,?𙃔񂜆tí2â\b#􌽏󺱬»üõÿÁ", "error": "assert 1 == 0\n +  where 1 = len({'db': '¢^¥vH\\U000b920d,'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "D", "error": "assert 1 == 0\n +  where 1 = len({'db': 'D'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "_1񄵵", "error": "assert 1 == 0\n +  where 1 = len({'db': '_1\\x87\\U00044d75'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "􎊨Aក2¥Z9򚸹<Íláz%󴨳h", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U0010e2a8\\x80Aក2¥Z9\\U0009ae39\\x85<Íláz%\\U000f4a33h\\x93'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "񔝛", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U0005475b'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "`󻏭", "error": "assert 1 == 0\n +  where 1 = len({'db': '`\\U000fb3ed'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¦úÎõn0򱥃", "error": "assert 1 == 0\n +  where 1 = len({'db': '¦ú\\x94Îõn0\\U000b1943'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "R𠊆ý", "error": "assert 1 == 0\n +  where 1 = len({'db': 'R𠊆ý'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "CASES_FILE", "error": "assert 1 == 0\n +  where 1 = len({'db': 'CASES_FILE'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "«ü\u0000", "error": "assert 'user' in {'db': '«\\x8fü\\x00'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host", "error": "assert 'user' in {'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "_ù¡Õ$Á3񈀦Ba", "error": "assert 'user' in {'db': '_ù¡Õ$Á3\\U00048026Ba'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'user' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ö¹$\u000ba􋡗\b󼔷þ𐔵Ë󴪪򩏊񨥉", "error": "assert 'user' in {'db': 'ö¹$\\x0ba\\U0010b857\\x08\\U000fc537þ\\x85𐔵Ë\\U000f4aaa\\U000a93ca\\U00068949'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "\r", "error": "assert 'user' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "õDQ»D8\u0013r󺽗", "error": "assert 'user' in {'db': 'õDQ»D8\\x13r\\U000faf57'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ᵭ¦", "error": "assert 'user' in {'db': 'ᵭ¦\\x94'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "¯", "error": "assert 'user' in {'db': '¯'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "·", "error": "assert 'user' in {'db': '·'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 9.13308021e+276, -1.84313770e+016, -6.49575365e+016,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8').dtype\n +    where array([ 9.13308021e+276, -1.84313770e+016, -6.49575365e+016,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8') = ArrayTestModel(v8=array([ 9.13308021e+276, -1.84313770e+016, -6.49575365e+016,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [9.1330802057787e+276, -1.843137702714877e+16, -6.4957536487878824e+16, 1.0691812372273379e+26, 1.7079624901403214e-63, -1.6283862914685368e+16, -2.6780352714048624e+16, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8').dtype\n +    where array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8') = ArrayTestModel(v8=array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -1.62838629e+016,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [9.1330802057787e+276, -1.843137702714877e+16, -5.960464477539063e-08, 1.0691812372273379e+26, 1.7079624901403214e-63, -1.6283862914685368e+16, -2.6780352714048624e+16, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8').dtype\n +    where array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8') = ArrayTestModel(v8=array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -2.67803527e+016, -5.96046448e-008], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [9.1330802057787e+276, -1.843137702714877e+16, -5.960464477539063e-08, 1.0691812372273379e+26, 1.7079624901403214e-63, -5.960464477539063e-08, -2.6780352714048624e+16, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -5.96046448e-008, -5.96046448e-008], dtype='>f8').dtype\n +    where array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -5.96046448e-008, -5.96046448e-008], dtype='>f8') = ArrayTestModel(v8=array([ 9.13308021e+276, -1.84313770e+016, -5.96046448e-008,\\n        1.06918124e+026,  1.70796249e-063, -5.96046448e-008,\\n       -5.96046448e-008, -5.96046448e-008], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [9.1330802057787e+276, -1.843137702714877e+16, -5.960464477539063e-08, 1.0691812372273379e+26, 1.7079624901403214e-63, -5.960464477539063e-08, -5.960464477539063e-08, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.06918124e+26,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8').dtype\n +    where array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.06918124e+26,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.06918124e+26,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.7079624901403214e-63, -1.843137702714877e+16, -5.960464477539063e-08, 1.0691812372273379e+26, 1.7079624901403214e-63, -5.960464477539063e-08, -5.960464477539063e-08, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8').dtype\n +    where array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        1.70796249e-63, -5.96046448e-08, -5.96046448e-08, -5.96046448e-08],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.7079624901403214e-63, -1.843137702714877e+16, -5.960464477539063e-08, 1.7079624901403214e-63, 1.7079624901403214e-63, -5.960464477539063e-08, -5.960464477539063e-08, -5.960464477539063e-08]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        0.00000000e+00, -5.96046448e-08, -5.96046448e-08,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        0.00000000e+00, -5.96046448e-08, -5.96046448e-08,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 1.70796249e-63, -1.84313770e+16, -5.96046448e-08,  1.70796249e-63,\\n        0.00000000e+00, -5.96046448e-08, -5.96046448e-08,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.7079624901403214e-63, -1.843137702714877e+16, -5.960464477539063e-08, 1.7079624901403214e-63, 0.0, -5.960464477539063e-08, -5.960464477539063e-08, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]).dtype\n +    where array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]) = ArrayTestModel(v8=array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1024.0, 453769062593606.0, -3.305836907473014e+16, 2.00001, -5.421423344916749e+41, 2.225073858507203e-309, 3.8197260244742257e+56, -2.00001]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]).dtype\n +    where array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]) = ArrayTestModel(v8=array([ 1.02400000e+003,  4.53769063e+014, -3.30583691e+016,\\n        2.00001000e+000, -5.42142334e+041,  2.22507386e-309,\\n        3.81972602e+056, -2.00001000e+000]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1024.0, 453769062593606.0, -3.305836907473014e+16, 2.00001, -5.421423344916749e+41, 2.225073858507203e-309, 3.8197260244742257e+56, -2.00001]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 3.50000000e-001,  3.50000000e-001,  3.50000000e-001,\\n        1.36552179e+015,  3.50000000e-001,  3.50000000e-0...00e-001,  3.50000000e-001,  3.50000000e-001,\\n        3.50000000e-001,  3.50000000e-001,  3.50000000e-001], dtype='>f8').dtype\n +    where array([ 3.50000000e-001,  3.50000000e-001,  3.50000000e-001,\\n        1.36552179e+015,  3.50000000e-001,  3.50000000e-0...00e-001,  3.50000000e-001,  3.50000000e-001,\\n        3.50000000e-001,  3.50000000e-001,  3.50000000e-001], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 3.50000000e-001,  3.50000000e-001,  3.50000000....50000000e-001,  3.50000000e-001,\\n        3.50000000e-001,  3.50000000e-001,  3.50000000e-001], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 5.50953487e+016,  5.50953487e+016,  5.50953487e+016,\\n        5.50953487e+016,  5.50953487e+016,  5.50953487e+0...     5.50953487e+016,  5.50953487e+016,  5.50953487e+016,\\n        5.50953487e+016,  5.50953487e+016,  5.50953487e+016]).dtype\n +    where array([ 5.50953487e+016,  5.50953487e+016,  5.50953487e+016,\\n        5.50953487e+016,  5.50953487e+016,  5.50953487e+0...     5.50953487e+016,  5.50953487e+016,  5.50953487e+016,\\n        5.50953487e+016,  5.50953487e+016,  5.50953487e+016]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 5.50953487e+016,  5.50953487e+016,  5.50953487...3487e+016,  5.50953487e+016,  5.50953487e+016,\\n        5.50953487e+016,  5.50953487e+016,  5.50953487e+016]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]).dtype\n +    where array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16,...+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]).dtype\n +    where array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16,...+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.000000...0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]).dtype\n +    where array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.000000...0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00,...+00, 0.00000000e+00, 0.00000000e+00,\\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]).dtype\n +    where array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.509534...5.50953487e+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([5.50953487e+16, 5.50953487e+16, 5.50953487e+16,...+16, 5.50953487e+16, 5.50953487e+16,\\n       5.50953487e+16, 5.50953487e+16, 5.50953487e+16, 5.50953487e+16]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.00000...0000000e+00, -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-0.0000000e+00, -0.0000000e+00, -0.0000000e+00,..., -0.0000000e+00,\\n       -0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045, -4.16425153e...       -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8').dtype\n +    where array([[-4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045, -4.16425153e...       -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-4.16425153e-045, -4.16425153e-045, ...      -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045, -4.16425153e...       -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8').dtype\n +    where array([[-4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045, -4.16425153e...       -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-4.16425153e-045, -4.16425153e-045, ...      -4.16425153e-045, -4.16425153e-045, -4.16425153e-045,\\n        -4.16425153e-045, -4.16425153e-045]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8').dtype\n +    where array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.61910133e+024, -1.61910133e+024, ...      -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8').dtype\n +    where array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.61910133e+024, -1.61910133e+024, ...      -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8').dtype\n +    where array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.61910133e+024, -1.61910133e+024, ...      -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8').dtype\n +    where array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.61910133e+024, -1.61910133e+024, ...      -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8').dtype\n +    where array([[-1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024, -1.61910133e...       -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-1.61910133e+024, -1.61910133e+024, ...      -1.61910133e+024, -1.61910133e+024, -1.61910133e+024,\\n        -1.61910133e+024, -1.61910133e+024]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[ 9.53827846e+280,  9.53827846e+280,  9.53827846e+280,\\n         9.53827846e+280,  9.53827846e+280,  9.53827846e...27846e+280,\\n         9.53827846e+280,  9.53827846e+280,  9.53827846e+280,\\n         9.53827846e+280,  9.53827846e+280]]).dtype\n +    where array([[ 9.53827846e+280,  9.53827846e+280,  9.53827846e+280,\\n         9.53827846e+280,  9.53827846e+280,  9.53827846e...27846e+280,\\n         9.53827846e+280,  9.53827846e+280,  9.53827846e+280,\\n         9.53827846e+280,  9.53827846e+280]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 9.53827846e+280,  9.53827846e+280, ...7846e+280,\\n         9.53827846e+280,  9.53827846e+280,  9.53827846e+280,\\n         9.53827846e+280,  9.53827846e+280]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n         0.00000000e+000,  0.00000000e+000,  0.00000000e...00000e+000,\\n         0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n         0.00000000e+000,  0.00000000e+000]]).dtype\n +    where array([[ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n         0.00000000e+000,  0.00000000e+000,  0.00000000e...00000e+000,\\n         0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n         0.00000000e+000,  0.00000000e+000]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.00000000e+000,  0.00000000e+000, ...0000e+000,\\n         0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n         0.00000000e+000,  0.00000000e+000]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n        8.84461617e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016, -2.63065065e+015, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.90950265e+016,  0.00000000e+000, -1.59203989e-181,\\n       -2.63065065e+015, -5.87049394e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "\\\u000b𚤀򠵁÷Q򖬣.Î6Z\u001eê"}], "alpha": 0.2913586809811311, "per_file_penalty": 0.0, "k": 21, "tag": "£", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "À򋯰â򒻧áº\u0004"}], "alpha": 0.2913586809811311, "per_file_penalty": 0.0, "k": 21, "tag": "£", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "À򋯰â򒻧áº\u0004"}], "alpha": 0.2913586809811311, "per_file_penalty": 0.0, "k": 21, "tag": "À򋯰â򒻧áº\u0004", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "À򋯰â򒻧áº\u0004"}], "alpha": 0.2913586809811311, "per_file_penalty": 0.0, "k": 1, "tag": "À򋯰â򒻧áº\u0004", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "À򋯰â򒻧áº\u0004"}], "alpha": 0.2913586809811311, "per_file_penalty": 0.0, "k": 1, "tag": "À򋯰â򒻧áº\u0004", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "À򋯰â򒻧áº\u0004", "score": 257.0, "embedding": [0.1, 0.2, 0.3], "file_path": "", "filename": "À򋯰â򒻧áº\u0004"}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "À򋯰â򒻧áº\u0004", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 0.0, "embedding": [-9.933403431341185e-98, 0.011750047506840167], "filename": "False", "file_path": "86", "chunk_id": "񎸐LX§="}, {"file_path": "CìeJ\u0017򃿞", "chunk_id": "򭇻w\u000fÙ󻘽«򤞉\u0002", "embedding": [0.1, 0.2, 0.3], "score": 0.5}, {"chunk_id": [-0.0, -0.17446932591986308, -2.993560138112045e-86], "file_path": "[-0.026265153286257226]", "embedding": [0.1, 0.2, 0.3], "score": 0.5}, {"filename": "True", "score": 1.0, "chunk_id": 934, "file_path": "[-0.6723352825975581, 2.2250738585072014e-308]", "embedding": [0.1, 0.2, 0.3]}], "alpha": 2.0280257544244267e-50, "per_file_penalty": 6.538877217414169e-26, "k": 2, "tag": "´񇯐󁐋e[9³ÿ򠁽öl", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"TeÖ ": ""}, {"|P\u0018<È": "a1gM"}, {"þ6󬠯ðf": 883, "P\\nø": true}, {"󽯛U󵎙񭜤`򅣩򯤵bNûs¦C򘘚": "ʞ&", "Óz/": 0.0, "¢": false, "}󗡟": "Édqý\u0012񬑈ÐÓ", "羽𫋊": 0.7393805974092121, "񶏒\u0018񠴎񧢾¢ý\u0016]\u001f+\r": 0.99999, "\u00163򈂠\u0017@򍆯": 360, "THö;񤱦æË\nïHþ𲬇": 805, "󹜗񾻷$2": 0.4052645633752189, "¦~*­e¿ÜÁa": false}, {"\u0017S-\f": "Ç", "\u001bLN?\nkfÇ򼔝c򀁶5u󳂳􌕊>": "Û", "󭯠g": "񩺹^"}, {"¨": true, "½ò򎳔": 71, "񇚆Y򌵠£􀎔ÿ(GµÎôg¯򪥱3U±": false, "¢򓄝wôÁ󱬇ë0􏸦": 92, "EÕI¨": 634, "Sc³": "É\"𽬳þ󿔫", "􈙽񡷴񉯐񿈄¤ç򒆻±": "", "𪷍": 169, "³©": 0.03968022711303255, "\fk«;²] ": "¾􉍖#´â"}, {"\u000e": 854, "else": false, "[󕪅7àYs򝗤񺵧Ç𞭃󿆪򠬩\u0005)": false, "\u0003": "\u0013", "Ú±þÂ¿\n": 230, "yT񧇰Ê": true, "7󨙪": true, "3򩮒񬹉": 441, "i\u0000\n": false, "b": 456}, {"É": 0.16218122553906514, "Fí𡗜äGÄÉ\u0015¸åÈ9CÇK;éÖû": 457, "ó": false, "êè򖣼k\u0014Æ󝘄": false, "¨<Ì": false, "²󈣱": 965}], "alpha": 0.7374648631972726, "per_file_penalty": 0.13786377841980182, "k": 1, "tag": "􅖃;\u0006ë &'¢£æu", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"TeÖ ": ""}, {"|P\u0018<È": "a1gM"}, {"þ6󬠯ðf": 883, "P\\nø": true}, {"󽯛U󵎙񭜤`򅣩򯤵bNûs¦C򘘚": "ʞ&", "Óz/": 0.13786377841980182, "¢": false, "}󗡟": "Édqý\u0012񬑈ÐÓ", "羽𫋊": 0.7393805974092121, "񶏒\u0018񠴎񧢾¢ý\u0016]\u001f+\r": 0.99999, "\u00163򈂠\u0017@򍆯": 360, "THö;񤱦æË\nïHþ𲬇": 805, "󹜗񾻷$2": 0.4052645633752189, "¦~*­e¿ÜÁa": false}, {"\u0017S-\f": "Ç", "\u001bLN?\nkfÇ򼔝c򀁶5u󳂳􌕊>": "Û", "󭯠g": "񩺹^"}, {"¨": true, "½ò򎳔": 71, "񇚆Y򌵠£􀎔ÿ(GµÎôg¯򪥱3U±": false, "¢򓄝wôÁ󱬇ë0􏸦": 92, "EÕI¨": 634, "Sc³": "É\"𽬳þ󿔫", "􈙽񡷴񉯐񿈄¤ç򒆻±": "", "𪷍": 169, "³©": 0.03968022711303255, "\fk«;²] ": "¾􉍖#´â"}, {"\u000e": 854, "else": false, "[󕪅7àYs򝗤񺵧Ç𞭃󿆪򠬩\u0005)": false, "\u0003": "\u0013", "Ú±þÂ¿\n": 230, "yT񧇰Ê": true, "7󨙪": true, "3򩮒񬹉": 441, "i\u0000\n": false, "b": 456}, {"É": 0.16218122553906514, "Fí𡗜äGÄÉ\u0015¸åÈ9CÇK;éÖû": 457, "ó": false, "êè򖣼k\u0014Æ󝘄": false, "¨<Ì": false, "²󈣱": 965}], "alpha": 0.7374648631972726, "per_file_penalty": 0.13786377841980182, "k": 1, "tag": "􅖃;\u0006ë &'¢£æu", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"sÉd": false, "§񒜳nðéL\u0018򓬌򝶅\n\u000eᨈ": 983, "Vî±&": ""}, {"?󧌈": false, "n¿": 244, "¯úd": 673, "¥çA\u0000\u000f񵯺¹Ãò},uÑ": 814, "dV": true, "j[¯": "", "竁è𽤚É": 1.192092896e-07, "oracle_ctx_count": 0.49326994796003343, "mÊ\u0003CêP!jù\u000bÜ\u0003øV": 0.4534117495786355, "ÅÓ4¡îÛëÛI¹Ú": "󐯼󵉸õR񸇨ù\u001dÛ󺸟±ß ÑÒ\u0015a\"𴫣"}, {"\u0019": 932, "\u001a»\u0000Ð": 0.3261802431495138, "x򅒙": 0.46118215045649225, "󬞪Ï󽌱􍔩Ìí𶛇": 0.62, "\u001a(\u0000ºÉ;\u0010´ó`aÜø·ð;#6": 0.70279773868424, "#®񉟇v𦴕𮩜": 0, "wñ": "\u001f\u0007¬\u0014°", "=𺩱𖜻": ";񢝄\u000bÿ", "þ": false, "c/ý#\tÔ􂿻P󂯨¡": 0.37984614017543994}, {"񂗂": 0.4241075837597402, "ÙÅ¡": false, "8M񶯮º(ÑW": 0.3333333333333333, "팋": true}, {" Ó\u0003\u0006­$\u000bÑ󉓡«5򘟃": "mçä¶򘲂P", "undefined": true, "3􎡾ú\u0006񵌁§\u0007Ý\\\\ü»Û\u0012S./ø": 160, ".ÛSI": 0.7225900359854697}, {"Ëibâ": false}, {"l!Pz𗆼ç": 1e-05, "2򨍁Øo.Õ򜾺􄑢f": 0.5548404250204338, "񙲰(¦򘰪\b¤\u00028¹񢣏½)": 0.19633992317456955, "8": "", "D𻫌ýO": 806, "8􏋟¿󒴜򗓒®": false, "ß񔑋ÁÁo": 626, "NULL": 580, "Â񇨩󴐂\u0010(": 0.7169647154588686, "挭": true}, {"\u001b𰩘\"𕨧ý": 0.649671074421628}, {"Ø󓺒@`񟧚᪰񭬘æ񬑌ÿ򕐆k": 423, "+×#gà򋼵}𡧝?󃝻𹳿\u001aÈ%󙭝􅔽h󉳃¾": true, "5°󃞄ÖÞB󬅪»0Ó򚁺": "=L"}], "alpha": 3.217285500546203e-162, "per_file_penalty": 0.38608993589228413, "k": 6, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "CITATIONS:\\s*(.+)$", "tags": ["𴁙|9Ç􎙫­", "\u0005"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...0e66b\\x8d\\xad', '\\x05']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­", "\u0005"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...0e66b\\x8d\\xad', '\\x05']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­", "𴁙|9Ç􎙫­"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...9Ç\\U0010e66b\\x8d\\xad']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𴁙|9Ç􎙫­", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­", "𴁙|9Ç􎙫­"], "error": "1 validation error for GoldCase\n  Value error, 𴁙|9Ç􎙫­: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00034059|9Ç\\U0...9Ç\\U0010e66b\\x8d\\xad']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­", "\u0005"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...0e66b\\x8d\\xad', '\\x05']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­", "0"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...0010e66b\\x8d\\xad', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["𴁙|9Ç􎙫­"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...9Ç\\U0010e66b\\x8d\\xad']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "𴁙|9Ç􎙫­", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...x8d\\xad', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "êÿ¹", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, êÿ¹: reader mode requires gt_answer [type=value_error, input_value={'id': 'êÿ¹', 'mode': ...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "&Uï", "tags": ["¶éÜø 5¨"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...tags': ['¶éÜø 5¨']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "&Uï", "tags": ["\\𷌈Ö񒰧â"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...0037308Ö\\U00052c27â']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "\\𷌈Ö񒰧â", "tags": ["\\𷌈Ö񒰧â"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...0037308Ö\\U00052c27â']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "&Uï", "tags": ["\\𷌈Ö񒰧â"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...0037308Ö\\U00052c27â']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "&Uï", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...Uï\\x95', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "\\𷌈Ö񒰧â", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, \\𷌈Ö񒰧â: reader mode requires gt_answer [type=value_error, input_value={'id': '\\\\\\U00037308Ö\\U0...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["è", "Ü󤁆\u0000𑛿󋠠¸\u0002𝎙E¼«ÕO", "Ïã􉋧\u001b򏮕)K\u001d", "ÑÌdñ", "􂉚"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...ÑÌdñ', '\\U0010225a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["ÒM򊄠X", "Ü󤁆\u0000𑛿󋠠¸\u0002𝎙E¼«ÕO", "Ïã􉋧\u001b򏮕)K\u001d", "ÑÌdñ", "􂉚"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...ÑÌdñ', '\\U0010225a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "Ü󤁆\u0000𑛿󋠠¸\u0002𝎙E¼«ÕO", "Ïã􉋧\u001b򏮕)K\u001d", "ÑÌdñ", "􂉚"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...ÑÌdñ', '\\U0010225a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "Ïã􉋧\u001b򏮕)K\u001d", "Ïã􉋧\u001b򏮕)K\u001d", "ÑÌdñ", "􂉚"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...ÑÌdñ', '\\U0010225a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "Ïã􉋧\u001b򏮕)K\u001d", "Ïã􉋧\u001b򏮕)K\u001d"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...7\\x1b\\U0008fb95)K\\x1d']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "ÒM򊄠X", "Ïã􉋧\u001b򏮕)K\u001d"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...7\\x1b\\U0008fb95)K\\x1d']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "ÒM򊄠X", "Ïã􉋧\u001b򏮕)K\u001d"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...7\\x1b\\U0008fb95)K\\x1d']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "ÒM򊄠X", "0"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...M\\U0008a120\\x89X', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "ÒM򊄠X"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89..., 'ÒM\\U0008a120\\x89X']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚", "0"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...s': ['\\U0010225a', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["􂉚"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89... 'tags': ['\\U0010225a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "kµºHº%y|Fh", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...º%y|Fh', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ÒM򊄠X", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ÒM򊄠X: reader mode requires gt_answer [type=value_error, input_value={'id': 'ÒM\\U0008a120\\x89...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb`", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmpb", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èmp", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,èm", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,è", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁~,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc񭘁,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Äc,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ä,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "Ⱥ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "\u0010ãÚãH𡱒ª", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "Ⱥ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": " ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "J", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_unicode_monotonic_concat", "a": "񬉦ºÏ", "b": "gý\u001d\"𖰏F񩵉", "ca": 3, "cb": 6, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'ødĞ\\U0008e896\\U00081846Â'", "a": "'ødĞ'", "b": "'\\U0008e896\\U00081846Â'", "ca": 5, "cb": 3, "cab": 3}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "m򴜥𾞗", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\x85m\\U000b4725\\U0003e797'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "tF", "error": "assert 1 == 0\n +  where 1 = len({'db': 'tF'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "\fY", "error": "assert 1 == 0\n +  where 1 = len({'db': 'Y'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "&򒄟򌑀¹𪳻$¶úPO{f", "error": "assert 1 == 0\n +  where 1 = len({'db': '&\\U0009211f\\U0008c440¹𪳻\\x88\\x90$¶ú\\x94PO{\\x8bf'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "À½", "error": "assert 1 == 0\n +  where 1 = len({'db': 'À½\\x84'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "Z򊨍", "error": "assert 1 == 0\n +  where 1 = len({'db': 'Z\\U0008aa0d'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "id", "error": "assert 1 == 0\n +  where 1 = len({'db': 'id'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "îKÓÉ󊻓0\u0002,a_", "error": "assert 1 == 0\n +  where 1 = len({'db': 'îKÓ\\x8bÉ\\U000caed3\\x9b\\x810\\x02,a\\x9e_'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "i", "error": "assert 1 == 0\n +  where 1 = len({'db': 'i'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert 'scheme' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'db' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "𐗒\u0018򒫸", "error": "assert 'scheme' in {'db': '\\U000105d2\\x18\\x8f\\U00092af8'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "Î'5", "error": "assert 'scheme' in {'db': \"Î'5\"}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "\u0003", "error": "assert 'scheme' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'db' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "þ+", "error": "assert 'scheme' in {'db': 'þ+'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'scheme' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "l󮍤æ", "error": "assert 'scheme' in {'db': 'l\\x94\\U000ee364æ'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "]qt򂾯èê5À.8«Y¸u", "error": "assert 'scheme' in {'db': ']qt\\x7f\\U00082fafèê5À.8«Y¸u'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'scheme' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "c%÷Æ}\u001f", "error": "assert 'scheme' in {'db': 'c%÷Æ\\x9b}\\x1f'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'db' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "򈥿¯", "error": "assert 'scheme' in {'db': '\\U0008897f\\x94¯'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "r􋱭 ÿrÄ", "error": "assert 'scheme' in {'db': 'r\\U0010bc6d ÿrÄ'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'db' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'db' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 0.0000000e+00,  7.0167423e+15,  4.3651578e+16, -0.0000000e+00,\\n        2.4239799e+16,  5.2210512e+16,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 0.0000000e+00,  7.0167423e+15,  4.3651578e+16, -0.0000000e+00,\\n        2.4239799e+16,  5.2210512e+16,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([ 0.0000000e+00,  7.0167423e+15,  4.3651578e+16, -0.0000000e+00,\\n        2.4239799e+16,  5.2210512e+16,  0.0000000e+00,  0.0000000e+00],\\n      dtype='>f4'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 7016742295437312.0, 4.36515779903488e+16, -0.0, 2.423979898621133e+16, 5.221051150840627e+16, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([ 5.0000000e+00,  5.0000000e+00,  5.0000000e+00,  5.0000000e+00,\\n        5.0000000e+00,  5.0000000e+00,  5.00000...0000000e+00,  5.0000000e+00,\\n        5.0000000e+00,  5.0000000e+00,  5.0000000e+00,  5.0000000e+00],\\n      dtype='>f4').dtype\n +    where array([ 5.0000000e+00,  5.0000000e+00,  5.0000000e+00,  5.0000000e+00,\\n        5.0000000e+00,  5.0000000e+00,  5.00000...0000000e+00,  5.0000000e+00,\\n        5.0000000e+00,  5.0000000e+00,  5.0000000e+00,  5.0000000e+00],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 5.0000000e+00,  5.0000000e+00,  5.0000000e+00,...,  5.0000000e+00,\\n        5.0000000e+00,  5.0000000e+00,  5.0000000e+00,  5.0000000e+00],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-2.82541899e-036, -2.82541899e-036, -2.82541899e-036,\\n       -5.83401620e+194, -2.82541899e-036, -2.82541899e-0...99e-036,  2.50000000e+000, -2.82541899e-036,\\n       -2.82541899e-036, -2.82541899e-036, -2.82541899e-036], dtype='>f8').dtype\n +    where array([-2.82541899e-036, -2.82541899e-036, -2.82541899e-036,\\n       -5.83401620e+194, -2.82541899e-036, -2.82541899e-0...99e-036,  2.50000000e+000, -2.82541899e-036,\\n       -2.82541899e-036, -2.82541899e-036, -2.82541899e-036], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-2.82541899e-036, -2.82541899e-036, -2.82541899....50000000e+000, -2.82541899e-036,\\n       -2.82541899e-036, -2.82541899e-036, -2.82541899e-036], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  2.50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....50000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-6.7021139e+16, -6.7021139e+16, -6.7021139e+16, -6.7021139e+16,\\n         0.0000000e+00, -6.7021139e+16, -6.702...21139e+16, -6.7021139e+16,\\n        -6.7021139e+16, -6.7021139e+16, -6.7021139e+16,  5.3499049e+16]],\\n      dtype='>f4').dtype\n +    where array([[-6.7021139e+16, -6.7021139e+16, -6.7021139e+16, -6.7021139e+16,\\n         0.0000000e+00, -6.7021139e+16, -6.702...21139e+16, -6.7021139e+16,\\n        -6.7021139e+16, -6.7021139e+16, -6.7021139e+16,  5.3499049e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-6.7021139e+16, -6.7021139e+16, -6.7...1139e+16, -6.7021139e+16,\\n        -6.7021139e+16, -6.7021139e+16, -6.7021139e+16,  5.3499049e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4').dtype\n +    where array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.0000000e+00,  0.0000000e+00,  0.0...0000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,\\n         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.0...0e+00,  0.00000e+00,  0.00000e+00,\\n         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00]],\\n      dtype='>f4').dtype\n +    where array([[ 0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,\\n         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.0...0e+00,  0.00000e+00,  0.00000e+00,\\n         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.00000e+00,  0.00000e+00,  0.00000...e+00,  0.00000e+00,  0.00000e+00,\\n         0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-5.88697e+16, -5.88697e+16, -5.88697e+16, -5.88697e+16,\\n        -5.88697e+16, -5.88697e+16, -5.88697e+16, -5.8...7e+16, -5.88697e+16, -5.88697e+16,\\n        -5.88697e+16, -5.88697e+16, -5.88697e+16, -5.88697e+16]],\\n      dtype='>f4').dtype\n +    where array([[-5.88697e+16, -5.88697e+16, -5.88697e+16, -5.88697e+16,\\n        -5.88697e+16, -5.88697e+16, -5.88697e+16, -5.8...7e+16, -5.88697e+16, -5.88697e+16,\\n        -5.88697e+16, -5.88697e+16, -5.88697e+16, -5.88697e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-5.88697e+16, -5.88697e+16, -5.88697...e+16, -5.88697e+16, -5.88697e+16,\\n        -5.88697e+16, -5.88697e+16, -5.88697e+16, -5.88697e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[5.3339804e+16, 5.3339804e+16, 5.3339804e+16, 5.3339804e+16,\\n        5.3339804e+16, 5.3339804e+16, 5.3339804e+1... 5.3339804e+16, 5.3339804e+16,\\n        5.3339804e+16, 5.3339804e+16, 5.3339804e+16, 5.3339804e+16]],\\n      dtype='>f4').dtype\n +    where array([[5.3339804e+16, 5.3339804e+16, 5.3339804e+16, 5.3339804e+16,\\n        5.3339804e+16, 5.3339804e+16, 5.3339804e+1... 5.3339804e+16, 5.3339804e+16,\\n        5.3339804e+16, 5.3339804e+16, 5.3339804e+16, 5.3339804e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[5.3339804e+16, 5.3339804e+16, 5.3339...5.3339804e+16, 5.3339804e+16,\\n        5.3339804e+16, 5.3339804e+16, 5.3339804e+16, 5.3339804e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        3.26765572e+016,  3.26765572e+016, -1.25897621e+014,\\n        1.79769313e+308,  3.26765572e+016], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 1.79769313e+308, 3.72667467e-116],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 1.79769313e+308, 3.72667467e-116],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 1.79769313e+308, 3.72667467e-116],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 0.00000000e+000, 3.72667467e-116],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 0.00000000e+000, 3.72667467e-116],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, 3.72667467e-116,\\n       3.72667467e-116, 0.00000000e+000, 0.00000000e+000, 3.72667467e-116],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_query_rewrite_regex_nonempty", "raw": "200", "tokens": ["200"]}
{"test": "test_query_rewrite_regex_nonempty", "raw": "200", "tokens": ["200"]}
{"test": "test_query_rewrite_regex_nonempty", "raw": "000", "tokens": ["000"]}
{"test": "test_query_rewrite_regex_nonempty", "raw": "000", "tokens": ["000"]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 354, "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375], "file_path": "è¿", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "è¿", "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375], "file_path": "è¿", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "󸙎\u0018\u001b^á", "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375], "file_path": "è¿", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "󸙎\u0018\u001b^á", "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375], "file_path": "[0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375]", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "󸙎\u0018\u001b^á", "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, 0.112], "file_path": "[0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375]", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": [], "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, 0.112], "file_path": "[0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375]", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_id': 'f303983aacd8896b', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375], "embedding": [0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, 0.112], "file_path": "[0.99999, 1e-07, 0.112, -0.06995541029398233, 0.44717364375340973, -0.79504233694656, 4.237956731541129e-186, 0.5491964209754276, -0.9456401814612394, -0.5090107015488375]", "score": 0.5}], "alpha": 0.6387973460667132, "per_file_penalty": 1.5879213672488582e-110, "k": 37, "tag": "󸙎\u0018\u001b^á", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"score": 1.0, "filename": "[1.165084051274305e-271]", "embedding": [0.1, 0.2, 0.3], "chunk_id": "test_chunk"}], "alpha": 0.9999999999999999, "per_file_penalty": 0.24684233759073365, "k": 48, "tag": "\u001c\f", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"Þ򱥗": "򢄂Câ\u0007", "\u0015􌨽çÙ¤\u0017": 723, "ÿ\u0012ð¶󥎘\f": 0.5273155255836733, "\u001fo\u001a\u0002": "§nÉ 򊭱󅦏\u0019¤wÏ", "ð": "(󷣼󳴊ï¤ 򶴮Tå5!q򟂊񙩺«", "K¦D": true, "ã򃡆â񝦲Rt񌊱h\u0006񲓋^q𣜘񡿳": "𳱎(𘯀\u0017¸񡳸älM\u0013.¥", "à񢃐Äî𖵛>󟐎Í": true, "ÎjÎ2#": 841}], "alpha": 0.2878829428105663, "per_file_penalty": 4.5277903920596246e-160, "k": 6, "tag": "_ìÄM", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"Þ򱥗": "򢄂Câ\u0007", "\u0015􌨽çÙ¤\u0017": 723, "ð": 0.5273155255836733, "\u001fo\u001a\u0002": "§nÉ 򊭱󅦏\u0019¤wÏ", "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"Þ򱥗": "򢄂Câ\u0007", "\u0015􌨽çÙ¤\u0017": 723, "ð": 0.0, "\u001fo\u001a\u0002": "§nÉ 򊭱󅦏\u0019¤wÏ", "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"Þ򱥗": "򢄂Câ\u0007", "\u0015􌨽çÙ¤\u0017": 723, "ð": "", "\u001fo\u001a\u0002": "§nÉ 򊭱󅦏\u0019¤wÏ", "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ð": "򢄂Câ\u0007", "\u0015􌨽çÙ¤\u0017": 723, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "0", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}, {"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{":ê\f󇳕x򪹜": 128, "m񵡷": "", "񟛁Ã]": 860, "´": 435, "󥔚": false, "\u0015 􇂵\u0001\u000b®": 0.6165202827281785, "õâ¢#񛉵Ö񬯓": true, "null": 0.5, "pûç¤ø": true, "򕪰+Z5": 0.3893025522279837}, {"K": 468, "񘒟񗌮": 0.16809996956075793, "D·l󍩪]ªÌ©": 500}, {"9»􎀥V": 428}, {"Ã@ÂÉu": true}], "alpha": 0.2535479185582839, "per_file_penalty": 0.916415339221514, "k": 7, "tag": "񽫉y", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{":ê\f󇳕x򪹜": 128, "m񵡷": "", "񟛁Ã]": 860, "´": 435, "󥔚": false, "\u0015 􇂵\u0001\u000b®": 0.6165202827281785, "õâ¢#񛉵Ö񬯓": true, "K": 468, "pûç¤ø": true, "򕪰+Z5": 0.3893025522279837}, {"K": 468, "񘒟񗌮": 0.16809996956075793, "D·l󍩪]ªÌ©": 500}, {"9»􎀥V": 428}, {"Ã@ÂÉu": true}], "alpha": 0.2535479185582839, "per_file_penalty": 0.916415339221514, "k": 7, "tag": "񽫉y", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "¦񙘿𺝉ðÁ󳼍;b㙔±²u7", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "򏠁򵄬ýÃV\u0012¼£", "è񞛝񝺋I+򓩅×", "×"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...bI+\\U00093a45×', '×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "¦񙘿𺝉ðÁ󳼍;b㙔±²u7", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "򏠁򵄬ýÃV\u0012¼£", "𐡑󣷁", "×"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...'𐡑\\U000e3dc1', '×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "򏠁򵄬ýÃV\u0012¼£", "𐡑󣷁", "×"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...'𐡑\\U000e3dc1', '×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁", "𐡑󣷁", "×"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...'𐡑\\U000e3dc1', '×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁", "𐡑󣷁"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...dc1', '𐡑\\U000e3dc1']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "鳖%񒌗", "𐡑󣷁"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...317', '𐡑\\U000e3dc1']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "𐡑󣷁", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "鳖%񒌗", "𐡑󣷁"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...317', '𐡑\\U000e3dc1']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁", "𐡑󣷁"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...dc1', '𐡑\\U000e3dc1']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "retrieval", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁", "𐡑󣷁"], "error": "assert ['鳖%\\U0005231...'𐡑\\U000e3dc1'] == ['鳖%\\U0005231...'𐡑\\U000e3dc1']\n  \n  Right contains one more item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁", "0"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ... '𐡑\\U000e3dc1', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "𐡑󣷁"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...x0f\", '𐡑\\U000e3dc1']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f", "0"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...*gKÒ\\x95¯'\\x0f\", '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "\u0006\u001e*gKÒ¯'\u000f"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...6\\x1e*gKÒ\\x95¯'\\x0f\"]}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗", "0"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...['鳖%\\U00052317', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["鳖%񒌗"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...gs': ['鳖%\\U00052317']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "×", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...y': '×', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 𐡑󣷁: reader mode requires gt_answer [type=value_error, input_value={'id': '𐡑\\U000e3dc1', ...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "retrieval", "query": "×", "tags": ["鳖%񒌗", "0", "𐡑󣷁", "𐡑󣷁"], "error": "assert ['鳖%\\U0005231...'𐡑\\U000e3dc1'] == ['鳖%\\U0005231...'𐡑\\U000e3dc1']\n  \n  Right contains one more item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "retrieval", "query": "×", "tags": ["0", "0", "𐡑󣷁", "𐡑󣷁"], "error": "assert ['0', '𐡑\\U000e3dc1'] == ['0', '0', '𐡑...'𐡑\\U000e3dc1']\n  \n  At index 1 diff: '𐡑\\U000e3dc1' != '0'\n  Right contains 2 more items, first extra item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "𐡑󣷁", "mode": "retrieval", "query": "0", "tags": ["0", "0", "𐡑󣷁", "𐡑󣷁"], "error": "assert ['0', '𐡑\\U000e3dc1'] == ['0', '0', '𐡑...'𐡑\\U000e3dc1']\n  \n  At index 1 diff: '𐡑\\U000e3dc1' != '0'\n  Right contains 2 more items, first extra item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "𐡑󣷁", "𐡑󣷁"], "error": "assert ['0', '𐡑\\U000e3dc1'] == ['0', '0', '𐡑...'𐡑\\U000e3dc1']\n  \n  At index 1 diff: '𐡑\\U000e3dc1' != '0'\n  Right contains 2 more items, first extra item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "𐡑󣷁", "0"], "error": "assert ['0', '𐡑\\U000e3dc1'] == ['0', '0', '𐡑\\U000e3dc1', '0']\n  \n  At index 1 diff: '𐡑\\U000e3dc1' != '0'\n  Right contains 2 more items, first extra item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "𐡑󣷁"], "error": "assert ['0', '𐡑\\U000e3dc1'] == ['0', '0', '𐡑\\U000e3dc1']\n  \n  At index 1 diff: '𐡑\\U000e3dc1' != '0'\n  Right contains one more item: '𐡑\\U000e3dc1'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0", "0"], "error": "assert ['0'] == ['0', '0', '0']\n  \n  Right contains 2 more items, first extra item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "§򸒈Ù򼸆\u000fR(Ë", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["袙𘡑򾪐îò", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["袙𘡑򾪐îò", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "\u0012\u0005m󋮨g􌰆", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["袙𘡑򾪐îò", "q\u0002Ùa«$", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["袙𘡑򾪐îò", "ð°\u0018󪝥ç", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "\u0012\u0005m󋮨g􌰆"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000cbba8g\\U0010cc06']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\x18\\U000ea765ç', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "ð°\u0018󪝥ç"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...'ð°\\x18\\U000ea765ç']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U000bea90îò', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "袙𘡑򾪐îò"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...袙𘡑\\U000bea90îò']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...042db2\\U0004e8e5', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "ÐØB񂶲񎣥"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...B\\U00042db2\\U0004e8e5']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...04af7c\\U000452d4', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "*A𤆾񊽼񅋔"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...\\U0004af7c\\U000452d4']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...', 'q\\x02Ùa«$', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "q\u0002Ùa«$"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...['¹³', 'q\\x02Ùa«$']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³", "0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109..., 'tags': ['¹³', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["¹³"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...îò', 'tags': ['¹³']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "袙𘡑򾪐îò", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...a90îò', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "𸽞􉌓", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 𸽞􉌓: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00038f5e\\U00109...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "c\u0005", "mode": "baseline", "precision": null, "recall": null, "f1": 0.4, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "c\u0005", "mode": "baseline", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "c\u0005", "mode": "baseline", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "c\u0005", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\n', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\x0c', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_json_serialization_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#ÀnqÝÏv", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#ÀnqÝÏv", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#ÀnqÝÏv", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#ÀnqÝÏ", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#ÀnqÝ", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#Ànq", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#Àn", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#À", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼#", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr𾀼", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åDr", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",åD", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",å", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e򠯢f󴃑\u0017", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "_è𣌏òä񹑍𣰏FAµh", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e򠯢f󴃑\u0017", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e򠯢f󴃑", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e򠯢f", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e򠯢", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3e", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ3", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'ÿ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£'", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟£", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú󅇟", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".Ú", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ".", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "<", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "4", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "6", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_token_count_monotonic_concat", "a": "󈬵ó", "b": "HSN@èW`%å\u0014ê<", "ca": 3, "cb": 11, "cab": 10}
{"test": "test_token_count_monotonic_concat", "a": "QÆ񊉁õÚ|­ 򰶃𨤗£øÛI", "b": "󻸮59ã\u0015¥Z򪪨", "ca": 9, "cb": 3, "cab": 7}
{"test": "test_token_count_monotonic_concat", "a": "ù\u001d¹ß򩿕", "b": "Scunthorpe", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_range_monotonicity", "text": "'`Íć\\U000f1befįáÚæĴÁĽ\\U000f80d8𭆗'", "a": "'`Íć\\U000f1befįá'", "b": "'ÚæĴÁĽ\\U000f80d8𭆗'", "ca": 5, "cb": 3, "cab": 4}
{"test": "test_unicode_range_monotonicity", "text": "'ħ³ë𝑄'", "a": "'ħ³'", "b": "'ë𝑄'", "ca": 4, "cb": 3, "cab": 3}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\x9c'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "wÙ5ðï©񧞂Ì", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\x94wÙ5\\x9bðï©\\U00067782Ì'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "a?\u0000;kgúöÛº", "error": "assert 1 == 0\n +  where 1 = len({'db': 'a'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¤(", "error": "assert 1 == 0\n +  where 1 = len({'db': '¤('})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "v­;%õ\u0017", "error": "assert 1 == 0\n +  where 1 = len({'db': 'v\\xad'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "Xû\rÆÏ𭚷Î󛊤-læ\u0005aÔ%򅩟k򌫈3", "error": "assert 1 == 0\n +  where 1 = len({'db': 'XûÆÏ𭚷Î\\U000db2a4-læ\\x05aÔ%\\U00085a5fk\\U0008cac8\\x9d3'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "þ󑮁", "error": "assert 1 == 0\n +  where 1 = len({'db': 'þ\\U000d1b81'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "🏻👍🏻", "error": "assert 1 == 0\n +  where 1 = len({'db': '🏻👍🏻'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "S򞮹\u0001GØV", "error": "assert 1 == 0\n +  where 1 = len({'db': 'S\\U0009ebb9\\x88\\x01GØV'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'port' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host", "error": "assert 'port' in {'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "Ï×Váj񚁿·", "error": "assert 'scheme' in {'db': 'Ï×Váj\\U0005a07f·'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "W\u0000", "error": "assert 'scheme' in {'db': 'W\\x00\\x8c'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'scheme' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'scheme' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'port' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "GP\u000f􉰚5", "error": "assert 'scheme' in {'db': 'GP\\x0f\\U00109c1a5'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "򦘽-", "error": "assert 'scheme' in {'db': '\\U000a663d\\x94-\\x9e'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "°", "error": "assert 'scheme' in {'db': '°\\x88'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "í%\u0017񸶦nê󊘨󟒝^ÏÏJ", "error": "assert 'scheme' in {'db': 'í%\\x17\\U00078da6n\\x9fê\\U000ca628\\U000df49d^ÏÏJ'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "`󹴙32󞑲áaÙ÷kï", "error": "assert 'scheme' in {'db': '`\\U000f9d19\\x9432\\U000de472áaÙ÷kï'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "Õ¨F", "error": "assert 'scheme' in {'db': 'Õ¨F'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'port' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f2", "error": "assert dtype('>f2') == <class 'numpy.float32'>\n +  where dtype('>f2') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f2", "error": "assert dtype('>f2') == <class 'numpy.float32'>\n +  where dtype('>f2') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -1.44986356e-080,\\n        3.79999370e+130,  7.67848414e+101]).dtype\n +    where array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -1.44986356e-080,\\n        3.79999370e+130,  7.67848414e+101]) = ArrayTestModel(v8=array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -1.44986356e-080,\\n        3.79999370e+130,  7.67848414e+101]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 1.1125369292536007e-308, -2.9505556494273224e+16, -1.2306911576103271e-05, 1.7976931348623157e+308, -1.4498635572321857e-80, 3.799993697901507e+130, 7.678484142138863e+101]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308,  1.11253693e-308,\\n        3.79999370e+130,  7.67848414e+101]).dtype\n +    where array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308,  1.11253693e-308,\\n        3.79999370e+130,  7.67848414e+101]) = ArrayTestModel(v8=array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308,  1.11253693e-308,\\n        3.79999370e+130,  7.67848414e+101]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 1.1125369292536007e-308, -2.9505556494273224e+16, -1.2306911576103271e-05, 1.7976931348623157e+308, 1.1125369292536007e-308, 3.799993697901507e+130, 7.678484142138863e+101]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]).dtype\n +    where array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]) = ArrayTestModel(v8=array([-1.17549435e-038,  1.11253693e-308, -2.95055565e+016,\\n       -1.23069116e-005,  1.79769313e+308, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 1.1125369292536007e-308, -2.9505556494273224e+16, -1.2306911576103271e-05, 1.7976931348623157e+308, -2.9505556494273224e+16, 3.799993697901507e+130, 7.678484142138863e+101]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  0.00000000e+000, -2.95055565e+016,\\n       -1.23069116e-005,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]).dtype\n +    where array([-1.17549435e-038,  0.00000000e+000, -2.95055565e+016,\\n       -1.23069116e-005,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]) = ArrayTestModel(v8=array([-1.17549435e-038,  0.00000000e+000, -2.95055565e+016,\\n       -1.23069116e-005,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  7.67848414e+101]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 0.0, -2.9505556494273224e+16, -1.2306911576103271e-05, 0.0, -2.9505556494273224e+16, 3.799993697901507e+130, 7.678484142138863e+101]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  0.00000000e+000]).dtype\n +    where array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  0.00000000e+000]) = ArrayTestModel(v8=array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -2.95055565e+016,\\n        3.79999370e+130,  0.00000000e+000]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 0.0, 0.0, 0.0, 0.0, -2.9505556494273224e+16, 3.799993697901507e+130, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.79999370e+130,  0.00000000e+000]).dtype\n +    where array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.79999370e+130,  0.00000000e+000]) = ArrayTestModel(v8=array([-1.17549435e-038,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.79999370e+130,  0.00000000e+000]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [-1.1754943508222875e-38, 0.0, 0.0, 0.0, 0.0, 0.0, 3.799993697901507e+130, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-2.87461715e-193, -4.95608706e+016, -4.95608706e+016,\\n       -4.95608706e+016, -4.95608706e+016, -4.95608706e+0...06e+016, -4.95608706e+016, -4.95608706e+016,\\n       -4.95608706e+016, -4.95608706e+016, -4.95608706e+016], dtype='>f8').dtype\n +    where array([-2.87461715e-193, -4.95608706e+016, -4.95608706e+016,\\n       -4.95608706e+016, -4.95608706e+016, -4.95608706e+0...06e+016, -4.95608706e+016, -4.95608706e+016,\\n       -4.95608706e+016, -4.95608706e+016, -4.95608706e+016], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-2.87461715e-193, -4.95608706e+016, -4.95608706....95608706e+016, -4.95608706e+016,\\n       -4.95608706e+016, -4.95608706e+016, -4.95608706e+016], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-3.0215643e+16, -3.0215643e+16, -3.0215643e+16, -3.0215643e+16,\\n        -3.0215643e+16, -3.0215643e+16, -3.021...15643e+16, -3.0215643e+16,\\n        -3.0215643e+16, -3.0215643e+16, -3.0215643e+16, -3.0215643e+16]],\\n      dtype='>f4').dtype\n +    where array([[-3.0215643e+16, -3.0215643e+16, -3.0215643e+16, -3.0215643e+16,\\n        -3.0215643e+16, -3.0215643e+16, -3.021...15643e+16, -3.0215643e+16,\\n        -3.0215643e+16, -3.0215643e+16, -3.0215643e+16, -3.0215643e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-3.0215643e+16, -3.0215643e+16, -3.0...5643e+16, -3.0215643e+16,\\n        -3.0215643e+16, -3.0215643e+16, -3.0215643e+16, -3.0215643e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[-6.53677813e+165, -6.53677813e+165, -6.53677813e+165,\\n        -6.53677813e+165, -6.53677813e+165, -6.53677813e...       -6.53677813e+165, -6.53677813e+165, -6.53677813e+165,\\n        -6.53677813e+165, -6.53677813e+165]], dtype='>f8').dtype\n +    where array([[-6.53677813e+165, -6.53677813e+165, -6.53677813e+165,\\n        -6.53677813e+165, -6.53677813e+165, -6.53677813e...       -6.53677813e+165, -6.53677813e+165, -6.53677813e+165,\\n        -6.53677813e+165, -6.53677813e+165]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-6.53677813e+165, -6.53677813e+165, ...      -6.53677813e+165, -6.53677813e+165, -6.53677813e+165,\\n        -6.53677813e+165, -6.53677813e+165]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.0000...00000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\\n      dtype='>f8').dtype\n +    where array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.0000...00000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\\n      dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0.00000000e+00, 0.00000000e+00, 0.00...0000e+00, 0.00000000e+00,\\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],\\n      dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[-2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n...-2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16]]).dtype\n +    where array([[-2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n...-2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-2.64443960e+16, -2.64443960e+16, -2...2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16, -2.64443960e+16,\\n        -2.64443960e+16, -2.64443960e+16]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.7510...75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]]).dtype\n +    where array([[1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.7510...75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[1.75101685e+16, 1.75101685e+16, 1.75...5101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.7510...75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]]).dtype\n +    where array([[1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.7510...75101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[1.75101685e+16, 1.75101685e+16, 1.75...5101685e+16, 1.75101685e+16, 1.75101685e+16,\\n        1.75101685e+16, 1.75101685e+16, 1.75101685e+16, 1.75101685e+16]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 1.40000000e+000, 1.29103879e+015, 3.03680545e+016]).dtype\n +    where array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 1.40000000e+000, 1.29103879e+015, 3.03680545e+016]) = ArrayTestModel(v8=array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 1.40000000e+000, 1.29103879e+015, 3.03680545e+016]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 0.00000000e+000, 0.00000000e+000, 3.03680545e+016]).dtype\n +    where array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 0.00000000e+000, 0.00000000e+000, 3.03680545e+016]) = ArrayTestModel(v8=array([            inf,            -inf,             nan, 6.33500271e+163,\\n       2.80000000e-001, 0.00000000e+000, 0.00000000e+000, 3.03680545e+016]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "", "file_path": "ä¼½à񩋪N¼", "score": 0.8593723367251485, "chunk_id": "G", "embedding": [0.1, 0.2, 0.3]}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "True", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "True", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "0.0", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "0.0", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.4519604238568179, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": 0.0, "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "0.0", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "False", "chunk_id": "(eü±â4¼񅅩á", "score": 0.4519604238568179, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": 0.0, "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "True"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "0.0", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "False", "chunk_id": 0.0, "score": 0.46701764143493796, "embedding": [0.1, 0.2, 0.3], "file_path": "0.0"}, {"file_path": "0.5298320201658427", "chunk_id": false, "filename": "0.0", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"filename": "0.4519604238568179", "score": 0.6997041323752765, "embedding": [0.1, 0.2, 0.3], "file_path": "/񙽏", "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "score": 635.0, "chunk_id": [0.9154663557710405]}], "alpha": 1.401298464324817e-45, "per_file_penalty": 1.1754943508222875e-38, "k": 48, "tag": "\u0010", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ë": "", "þÖSgE2Ö\n1\u001d𖸒!¸´򉷆": false, "°\f¶Ô𔕹\u0017¼Ê¡\u0018򹻒ÓÆ%¼\u0012": true}], "alpha": 0.6528273110892812, "per_file_penalty": 1.1754943508222875e-38, "k": 5, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ë": "", "þÖSgE2Ö\n1\u001d𖸒!¸´򉷆": false, "°\f¶Ô𔕹\u0017¼Ê¡\u0018򹻒ÓÆ%¼\u0012": false}], "alpha": 0.6528273110892812, "per_file_penalty": 1.1754943508222875e-38, "k": 5, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ë": false, "þÖSgE2Ö\n1\u001d𖸒!¸´򉷆": false, "°\f¶Ô𔕹\u0017¼Ê¡\u0018򹻒ÓÆ%¼\u0012": false}], "alpha": 0.6528273110892812, "per_file_penalty": 1.1754943508222875e-38, "k": 5, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"ë": false, "þÖSgE2Ö\n1\u001d𖸒!¸´򉷆": false, "°\f¶Ô𔕹\u0017¼Ê¡\u0018򹻒ÓÆ%¼\u0012": false}], "alpha": 0.6528273110892812, "per_file_penalty": 0.6528273110892812, "k": 5, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "b\u0012_", "tags": ["Y", "¼\u00162", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "aþ", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af... 'aþ', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "b\u0012_", "tags": ["Y", "¼\u00162", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "¼\u00162", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Ãä\u0015", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Ãä\u0015", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x15', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "Ãä\u0015"], "error": "assert ['Y', '¥𥻹\\U00... 'Ã\\x97ä\\x15'] == ['Y', 'Y', '¥... 'Ã\\x97ä\\x15']\n  \n  At index 1 diff: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b' != 'Y'\n  Right contains 2 more items, first extra item: 'Ã\\x97ä\\x15'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...', 'Ã\\x97ä\\x15', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...\\x1b', 'Ã\\x97ä\\x15']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...𗛤_G×èÂ\\x1b', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...4«Ü𗛤_G×èÂ\\x1b']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y", "0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...'tags': ['Y', 'Y', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "Y"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...'Y', 'tags': ['Y', 'Y']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y", "0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...'Y', 'tags': ['Y', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["Y"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...ry': 'Y', 'tags': ['Y']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "Y", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...ry': 'Y', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 򯛾򯨂ìx¸\u0015é: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000af6fe\\U000af...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015", "0"], "error": "assert ['Y', '¥𥻹\\U00...97ä\\x15', '0'] == ['Y', 'Y', '¥...97ä\\x15', '0']\n  \n  At index 1 diff: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b' != 'Y'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "Ãä\u0015"], "error": "assert ['Y', '¥𥻹\\U00... 'Ã\\x97ä\\x15'] == ['Y', 'Y', '¥... 'Ã\\x97ä\\x15']\n  \n  At index 1 diff: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b' != 'Y'\n  Right contains one more item: 'Ã\\x97ä\\x15'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b", "0"], "error": "assert ['Y', '¥𥻹\\U00...×èÂ\\x1b', '0'] == ['Y', 'Y', '¥...×èÂ\\x1b', '0']\n  \n  At index 1 diff: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b' != 'Y'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "¥𥻹󟹜𨆯ç󒪄«Ü𗛤_G×èÂ\u001b"], "error": "assert ['Y', '¥𥻹\\U00...«Ü𗛤_G×èÂ\\x1b'] == ['Y', 'Y', '¥...«Ü𗛤_G×èÂ\\x1b']\n  \n  At index 1 diff: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b' != 'Y'\n  Right contains one more item: '¥𥻹\\U000dfe5c𨆯ç\\x99\\U000d2a84«Ü𗛤_G×èÂ\\x1b'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y", "0"], "error": "assert ['Y', '0'] == ['Y', 'Y', '0']\n  \n  At index 1 diff: '0' != 'Y'\n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "Y", "tags": ["Y", "Y"], "error": "assert ['Y'] == ['Y', 'Y']\n  \n  Right contains one more item: 'Y'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򯛾򯨂ìx¸\u0015é", "mode": "retrieval", "query": "0", "tags": ["Y", "Y"], "error": "assert ['Y'] == ['Y', 'Y']\n  \n  Right contains one more item: 'Y'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["Y", "Y"], "error": "assert ['Y'] == ['Y', 'Y']\n  \n  Right contains one more item: 'Y'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "total_size_mb", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "w"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...\\U000eab8b\\x07à', 'w']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "total_size_mb", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "T򂆳󥽪´õ¤Ï󪮋\u0007à", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "T򂆳󥽪´õ¤Ï󪮋\u0007à", "tags": ["T򂆳󥽪´õ¤Ï󪮋\u0007à", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "T򂆳󥽪´õ¤Ï󪮋\u0007à", "tags": ["T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": ["T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à", "0"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...\\U000eab8b\\x07à', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "T򂆳󥽪´õ¤Ï󪮋\u0007à"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...¤Ï\\U000eab8b\\x07à']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "=", "0"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...òr§ë\\x8f', '=', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "="], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...'\\xa0òr§ë\\x8f', '=']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë", "0"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...'\\xa0òr§ë\\x8f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": [" òr§ë"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...s': ['\\xa0òr§ë\\x8f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "NaN", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...': 'NaN', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "NaN", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, NaN: reader mode requires gt_answer [type=value_error, input_value={'id': 'NaN', 'mode': <Mo...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "󙄲¬", "mode": "baseline", "precision": 0.5, "recall": 0.2111337573628838, "f1": 0.07976638666670334, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "baseline", "precision": 0.5, "recall": 0.2111337573628838, "f1": 0.07976638666670334, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "baseline", "precision": 0.5, "recall": 0.5, "f1": 0.07976638666670334, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "baseline", "precision": 0.5, "recall": 0.07976638666670334, "f1": 0.07976638666670334, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "baseline", "precision": 0.5, "recall": 0.07976638666670334, "f1": 0.5, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "baseline", "precision": 0.5, "recall": 0.5, "f1": 0.07976638666670334, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "rag", "precision": 0.5, "recall": 0.5, "f1": 0.07976638666670334, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": 0.5, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "2 validation errors for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "\r", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\ncase_id\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "caseresult_roundtrip_failed", "case_id": "0", "mode": "rag", "precision": null, "recall": null, "f1": null, "error": "1 validation error for CaseResult\nquery\n  Value error, empty [type=value_error, input_value='\\r', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "\u001b+¶1J", "mode": "reader", "query": "§񚈇", "tags": ["ô~", "'Ó¥\u0015eVI ©+Ð#\u0012񄵇\u0004\nÐÍÑá"], "error": "1 validation error for GoldCase\n  Value error, \u001b+¶1J: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x1b+¶1J', 'mode...0044d47\\x04\\nÐÍÑá\"]}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "\u001b+¶1J", "mode": "reader", "query": "§񚈇", "tags": ["ô~", "§񚈇"], "error": "1 validation error for GoldCase\n  Value error, \u001b+¶1J: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x1b+¶1J', 'mode...['ô~', '§\\U0005a207']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "\u001b+¶1J", "mode": "reader", "query": "ô~", "tags": ["ô~", "§񚈇"], "error": "1 validation error for GoldCase\n  Value error, \u001b+¶1J: reader mode requires gt_answer [type=value_error, input_value={'id': '\\x1b+¶1J', 'mode...['ô~', '§\\U0005a207']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ô~", "mode": "reader", "query": "ô~", "tags": ["ô~", "§񚈇"], "error": "1 validation error for GoldCase\n  Value error, ô~: reader mode requires gt_answer [type=value_error, input_value={'id': 'ô~', 'mode': <Mo...['ô~', '§\\U0005a207']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ô~", "mode": "reader", "query": "ô~", "tags": ["ô~"], "error": "1 validation error for GoldCase\n  Value error, ô~: reader mode requires gt_answer [type=value_error, input_value={'id': 'ô~', 'mode': <Mo... 'ô~', 'tags': ['ô~']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "=񙄕ª򝀬", "mode": "reader", "query": "Ñ򃴰ò\u0007", "tags": ["+nÔ", "򸔃-\n\u001b", "^â´򎥇\u000f¨d£ÇX", "þ񼻩þ", "¶򾑫\u0018WÛ\u0010fó", "k¯Ô", "(\r\u00199񕥙À\u000eú򖡗kX񃀤eo¾\u001bØÞY񰫸H@â񬦜", "m", "󄊰𫹅", "] \u001cc"], "error": "1 validation error for GoldCase\n  Value error, =񙄕ª򝀬: reader mode requires gt_answer [type=value_error, input_value={'id': '=\\U00059115\\x91ª...b0𫹅', '] \\x1c\\x92c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ô~", "mode": "reader", "query": "ô~", "tags": ["ô~"], "error": "1 validation error for GoldCase\n  Value error, ô~: reader mode requires gt_answer [type=value_error, input_value={'id': 'ô~', 'mode': <Mo... 'ô~', 'tags': ['ô~']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ô~", "mode": "reader", "query": "ô~", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ô~: reader mode requires gt_answer [type=value_error, input_value={'id': 'ô~', 'mode': <Mo...': 'ô~', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "ô~", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ô~: reader mode requires gt_answer [type=value_error, input_value={'id': 'ô~', 'mode': <Mo...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó󊡘", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´Ó", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",´", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG􃞫8𛊼\u0016", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG􃞫8𛊼\u0016", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG􃞫8𛊼", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG􃞫8", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG􃞫", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001iG", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001i", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004\u0001", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾\u0004", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񴪾", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𴪾", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𔪾", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "䊾", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ʾ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "¾", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ">", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "6", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "7", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "<", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "000", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_unicode_range_monotonicity", "text": "'qDSR¬ÓļĖj\\U000876acÆÐº\\U00058b3b'", "a": "'qDSR¬Óļ'", "b": "'Ėj\\U000876acÆÐº\\U00058b3b'", "ca": 7, "cb": 3, "cab": 3}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "R\u0002v¸\u0002·񬎪4|·", "error": "assert 1 == 0\n +  where 1 = len({'db': 'R\\x02v¸\\x02·\\U0006c3aa4\\x9f|·'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "fCø򘋉_}¥eþ\t\u000fÇ􅴷񹂺ÒhÆ\u0010򜡭񖇃3\bê󅋆򄗿º%£󳑁nvà", "error": "assert 1 == 0\n +  where 1 = len({'db': 'fCø\\U000982c9_}¥e\\x92\\x8dþ\\x0fÇ\\U00105d37\\U000790baÒhÆ\\x97\\x10\\U0009c86d\\U000561c33\\x08ê\\U000c52c6\\U000845ffº%£\\U000f3441nvà\\x82'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "Páã", "error": "assert 1 == 0\n +  where 1 = len({'db': 'Páã'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "­9Ü񕦼*", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\xad9Ü\\U000559bc*'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "E", "error": "assert 1 == 0\n +  where 1 = len({'db': 'E'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "y", "error": "assert 1 == 0\n +  where 1 = len({'db': 'y'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "from ", "error": "assert 1 == 0\n +  where 1 = len({'db': 'from '})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "ÿÿ", "error": "assert 1 == 0\n +  where 1 = len({'db': 'ÿÿ'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "è^·", "error": "assert 'user' in {'db': 'è^·'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "𡨾3󱗵񴈈U", "error": "assert 'user' in {'db': '𡨾3\\U000f15f5\\U00074208U'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": ";>¢JBKÒú×񡯬𬳈", "error": "assert 'user' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "\"vacuum analyze\"", "error": "assert 'user' in {'db': '\"vacuum analyze\"'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'user' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "3", "error": "assert 'user' in {'db': '\\x8a3'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "_!𜥞ꊵñ󔠀", "error": "assert 'user' in {'db': '_!\\U0001c95e\\x89ꊵñ\\U000d4800'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "k¢¨𢋷򽺁×Ù\u0007", "error": "assert 'user' in {'db': 'k¢¨𢋷\\U000bde81×Ù\\x07'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ní\u0016µ񗠂ÈKô􁲿򿡉>", "error": "assert 'user' in {'db': 'ní\\x16µ\\U00057802ÈKô\\x8a\\U00101cbf\\U000bf849>'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "񽍾Q×$5ඦÁ}ºG*µ-\tóëÊ\txÝýÜªjñYÏ%\u000e򦃐\u0013$\u0000C􌋇ùå􊊼\\+", "error": "assert 'user' in {'db': '\\U0007d37eQ×$5ඦÁ}ºG*µ-óëÊ\\x82xÝýÜªjñYÏ%\\x0e\\U000a60d0\\x13$\\x00C\\U0010c2c7ùå\\U0010a2bc\\\\+'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        2.22507386e-309, -5.96046448e-008, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8').dtype\n +    where array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        2.22507386e-309, -5.96046448e-008, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8') = ArrayTestModel(v8=array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        2.22507386e-309, -5.96046448e-008, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.401298464324817e-45, 2.4952911150781528e-126, -1.6402772685170576e+16, 2.225073858507203e-309, -5.960464477539063e-08, -1.7596397532481971e-270, -5.164556137600683e+16, -2357086041002777.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8').dtype\n +    where array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8') = ArrayTestModel(v8=array([ 1.40129846e-045,  2.49529112e-126, -1.64027727e+016,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n       -5.16455614e+016, -2.35708604e+015], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [1.401298464324817e-45, 2.4952911150781528e-126, -1.6402772685170576e+16, 0.0, 0.0, -1.7596397532481971e-270, -5.164556137600683e+16, -2357086041002777.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, -1.7596397532481971e-270, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000, -1.75963975e-270,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, -1.7596397532481971e-270, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 3.17981735e-043,  3.17981735e-043,  3.17981735e-043,\\n        3.17981735e-043,  3.17981735e-043,  3.17981735e-0...35e-043, -5.09296321e+016,  3.17981735e-043,\\n        3.17981735e-043,  3.17981735e-043,  3.17981735e-043], dtype='>f8').dtype\n +    where array([ 3.17981735e-043,  3.17981735e-043,  3.17981735e-043,\\n        3.17981735e-043,  3.17981735e-043,  3.17981735e-0...35e-043, -5.09296321e+016,  3.17981735e-043,\\n        3.17981735e-043,  3.17981735e-043,  3.17981735e-043], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 3.17981735e-043,  3.17981735e-043,  3.17981735....09296321e+016,  3.17981735e-043,\\n        3.17981735e-043,  3.17981735e-043,  3.17981735e-043], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000, -5.09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....09296321e+016,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-4.6977876e+16, -4.6977876e+16, -4.6977876e+16, -4.6977876e+16,\\n       -4.6977876e+16, -4.6977876e+16, -4.69778...6977876e+16, -4.6977876e+16,\\n       -4.6977876e+16, -4.6977876e+16, -4.6977876e+16, -4.6977876e+16],\\n      dtype='>f4').dtype\n +    where array([-4.6977876e+16, -4.6977876e+16, -4.6977876e+16, -4.6977876e+16,\\n       -4.6977876e+16, -4.6977876e+16, -4.69778...6977876e+16, -4.6977876e+16,\\n       -4.6977876e+16, -4.6977876e+16, -4.6977876e+16, -4.6977876e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-4.6977876e+16, -4.6977876e+16, -4.6977876e+16,..., -4.6977876e+16,\\n       -4.6977876e+16, -4.6977876e+16, -4.6977876e+16, -4.6977876e+16],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 1.0950837e+16,  1.0950837e+16,  1.0950837e+16,  1.0950837e+16,\\n         1.0950837e+16,  1.0950837e+16,  1.095...50837e+16,  1.0950837e+16,\\n         1.0950837e+16,  1.0950837e+16,  1.0950837e+16,  1.0950837e+16]],\\n      dtype='>f4').dtype\n +    where array([[ 1.0950837e+16,  1.0950837e+16,  1.0950837e+16,  1.0950837e+16,\\n         1.0950837e+16,  1.0950837e+16,  1.095...50837e+16,  1.0950837e+16,\\n         1.0950837e+16,  1.0950837e+16,  1.0950837e+16,  1.0950837e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 1.0950837e+16,  1.0950837e+16,  1.0...0837e+16,  1.0950837e+16,\\n         1.0950837e+16,  1.0950837e+16,  1.0950837e+16,  1.0950837e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4').dtype\n +    where array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  ...  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4').dtype\n +    where array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  ...  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4').dtype\n +    where array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  ...  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4').dtype\n +    where array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.],\\n ...,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  ...  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\\n         0.,  0.,  0.,  0.,  0.,  0.,  0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4').dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0...0., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[-7.08358984e+016, -7.08358984e+016, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016, -7.08358984e...58984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]]).dtype\n +    where array([[-7.08358984e+016, -7.08358984e+016, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016, -7.08358984e...58984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-7.08358984e+016, -7.08358984e+016, ...8984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([[-7.08358984e+016, -7.08358984e+016, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016, -7.08358984e...58984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]]).dtype\n +    where array([[-7.08358984e+016, -7.08358984e+016, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016, -7.08358984e...58984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]]) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-7.08358984e+016, -7.08358984e+016, ...8984e+016,\\n        -7.08358984e+016, -2.64958201e+293, -7.08358984e+016,\\n        -7.08358984e+016, -7.08358984e+016]])).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        4.17687590e+016, -1.69026030e+016, -1.30891825e-173,\\n       -5.00000000e-001,  3.33333333e-001], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        4.17687590e+016, -1.69026030e+016, -1.30891825e-173,\\n       -5.00000000e-001,  3.33333333e-001], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        4.17687590e+016, -1.69026030e+016, -1.30891825e-173,\\n       -5.00000000e-001,  3.33333333e-001], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  4.17687590e+16,\\n       -1.69026030e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  4.17687590e+16,\\n       -1.69026030e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  4.17687590e+16,\\n       -1.69026030e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan,  4.17687590e+16,\\n        4.17687590e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan,  4.17687590e+16,\\n        4.17687590e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan,  4.17687590e+16,\\n        4.17687590e+16,  3.33333333e-01, -5.00000000e-01,  3.33333333e-01],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan, -0.5, -0.5, -0.5, -0.5, -0.5], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8').dtype\n +    where array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8') = ArrayTestModel(v8=array([ inf, -inf,  nan,   0.,   0.,   0.,   0.,   0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 0.5421089756104075, "filename": "*ëQßn󧱱|pd", "file_path": "0.005183004503158451", "embedding": [0.7450804380083138, 5.5462159871950005e-27, 0.13720942758016474], "score": 0.0}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}], "alpha": 0.3277949881427236, "per_file_penalty": 0.9415657671140327, "k": 48, "tag": "LPT1", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}], "alpha": 0.3277949881427236, "per_file_penalty": 0.9415657671140327, "k": 48, "tag": "LPT1", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}], "alpha": 0.3277949881427236, "per_file_penalty": 0.9415657671140327, "k": 48, "tag": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}], "alpha": 0.3277949881427236, "per_file_penalty": 0.9415657671140327, "k": 48, "tag": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 1.1754943508222875e-38}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}], "alpha": 0.3277949881427236, "per_file_penalty": 0.3277949881427236, "k": 48, "tag": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}], "alpha": 0.3277949881427236, "per_file_penalty": 0.3277949881427236, "k": 48, "tag": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}, {"filename": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "file_path": "312", "chunk_id": 200, "embedding": [0.1, 0.2, 0.3], "score": 200.0}], "alpha": 0.3277949881427236, "per_file_penalty": 0.3277949881427236, "k": 48, "tag": "𞸽򮙋~\n¥_(?àÙ¶\f段\u0011", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": 9.522555396954043e-24, "#ù×m9": false, "g\u000f·": 624, "𺗹𫮦􂡁􆁬": 317, "¥񆺦&'õ": true, "ÑtØ±": "󲇟õG[", "u@󊬰򸤇": 310, "쩦´¶æá": 1.5695802597577804e-250}], "alpha": 0.8117375515623426, "per_file_penalty": 0.31362418153064914, "k": 12, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": 0.31362418153064914, "#ù×m9": false, "g\u000f·": 624, "𺗹𫮦􂡁􆁬": 317, "¥񆺦&'õ": true, "ÑtØ±": "󲇟õG[", "u@󊬰򸤇": 310, "쩦´¶æá": 1.5695802597577804e-250}], "alpha": 0.8117375515623426, "per_file_penalty": 0.31362418153064914, "k": 12, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": 0.31362418153064914, "#ù×m9": false, "g\u000f·": 624, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": false, "#ù×m9": false, "g\u000f·": 624, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": 624, "#ù×m9": false, "g\u000f·": 624, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": "", "#ù×m9": false, "g\u000f·": 624, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"RñÊ": 0, "#ù×m9": false, "g\u000f·": 624, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"Õ񟬙ÛN¦": 0.20231314815815488}, {"jYT󫶾TÎX|񛜛C򝳇0": 2.0629169423521416e-122, "8GB": 0.8473022197805713, "þý": "45\u0003", "ß¼r5W󤏿Úî": 302, "􄊄µË£OXÙ򊒻æ3": true, ")": false, "0": "dÌ"}, {"󋀱􁽎Ý\u0005y": false, "\u0019½񋤔🎞WÆ\u000e¼I1ÀV󩠦񟑽ô §􉽥": 0.02590168323308762, "ur򈔣lu": "񛑽", "^󔷒": 852}, {"􁻽c򖷗ýµ³v": "<", "򰨢 ": 5.960464477539063e-08, "¬󃂅ð𠺢7ê®": 0, "aÿ3!g󄎃򏋬x": 971, "Dives": 440, "£>": 0.8138491857755186, "6\f": false, "񂱷": 0.3176514514873466, "ç񣲂o􎽍": "\u0001\u001d\u001cg񮈩À\u0000p©W&񳰦\u0003î"}, {"񎜌hC񂡵\u000f\b<\u0015¤򪽟r򍔑o": "Ú÷:û", "³ꓥA": false, "𬁤<ºﳎ": 60, "ã򳀁K𛇺": 0.5059035525726153, "򜕑ÄÓ": 712, "×â\u0007": 0.34479889917876055, "¸\u000e@ⱗ": false, "³5Þ򛾌Ô´": "¨$Ù򺗞Û", "e?å": "", "ü¡𐄉»Þ.Ì݊": 6.88049865293668e-249}], "alpha": 0.3692304522476087, "per_file_penalty": 0.019748336272231496, "k": 13, "tag": "G×6󌾋", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["\"£\u001dM*@¼î", "\"alter column type\"", "\u001d\u001f¡\u0007", "TRUE", "ï\u001c"], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08...x07', 'TRUE', 'ï\\x1c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["\"£\u001dM*@¼î", "\"alter column type\"", "\u001d\u001f¡\u0007", "\u001d\u001f¡\u0007", "ï\u001c"], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08...f¡\\x98\\x07', 'ï\\x1c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["\"£\u001dM*@¼î", "\"alter column type\"", "\u001d\u001f¡\u0007", "\u001d\u001f¡\u0007", "\"alter column type\""], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08... '\"alter column type\"']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["\"£\u001dM*@¼î", "\"alter column type\""], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08... '\"alter column type\"']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08...00f853f', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "h񓴋ä𿂐󸔿", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08...00f853f', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 䕫𺂘\bøP@\u0000_\u0014½\u0000󬟮EzOígÍK: reader mode requires gt_answer [type=value_error, input_value={'id': '䕫\\U0003a098\\x08...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "undefined", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "¼¡ÿW", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "undefined", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "S¿Eô񡶒􇌯", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "S¿Eô񡶒􇌯", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "S¿Eô񡶒􇌯", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "󬌌"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...010732f', '\\U000ec30c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "S¿Eô񡶒􇌯", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "S¿Eô񡶒􇌯", "çL©q\"", "", "S¿Eô񡶒􇌯", "󬌌"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...010732f', '\\U000ec30c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "%"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '%']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "S¿Eô񡶒􇌯"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...\\U00061d92\\U0010732f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...x89', 'this week', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "this week"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...\\x80\\x89', 'this week']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\"", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...\\x8a©q\"\\x80\\x89', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "çL©q\""], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M... 'çL\\x8a©q\"\\x80\\x89']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...061d92\\U0010732f', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "S¿Eô񡶒􇌯"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...\\U00061d92\\U0010732f']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...0e9ca19Û\\x87G§', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "ý7󩲡9ÛG§"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...7\\U000e9ca19Û\\x87G§']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...\\U000ec400', '5', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "5"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...<¯½\\U000ec400', '5']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...<¯½\\U000ec400', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "Áæ\u001cÿ½\b𰀌<¯½󬐀"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...08𰀌<¯½\\U000ec400']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...Ù', '\\U000ec30c', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "󬌌"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...4e6e2Ù', '\\U000ec30c']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù", "0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...: ['\\U0004e6e2Ù', '0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["񎛢Ù"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...tags': ['\\U0004e6e2Ù']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "󬌌", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...00ec30c', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, : reader mode requires gt_answer [type=value_error, input_value={'id': '\\x99', 'mode': <M...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "mode": "reader", "query": "󂳑ãÃ)8", "tags": ["𚖥", "]»Q󟭖򉹼\u000b~×"], "error": "1 validation error for GoldCase\n  Value error, 񙷱󈯆򘋩ßg񅖇Ä🱕÷: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00059df1\\U000c8...\\U00089e7c\\x0b~\\x9b×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "mode": "reader", "query": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "tags": ["𚖥", "]»Q󟭖򉹼\u000b~×"], "error": "1 validation error for GoldCase\n  Value error, 񙷱󈯆򘋩ßg񅖇Ä🱕÷: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U00059df1\\U000c8...\\U00089e7c\\x0b~\\x9b×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "𚖥", "mode": "reader", "query": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "tags": ["𚖥", "]»Q󟭖򉹼\u000b~×"], "error": "1 validation error for GoldCase\n  Value error, 𚖥: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0001a5a5\\x9d', ...\\U00089e7c\\x0b~\\x9b×']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "𚖥", "mode": "reader", "query": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 𚖥: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0001a5a5\\x9d', ...1fc55÷', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...1fc55÷', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "XqoÌÙ󄰂", "mode": "reader", "query": "򨳚򾫜𿗅\u0001o", "tags": ["'ÌØ\u0012\u0014O{3𒬥Q", "êÖ򔦪L,"], "error": "1 validation error for GoldCase\n  Value error, XqoÌÙ󄰂: reader mode requires gt_answer [type=value_error, input_value={'id': 'XqoÌÙ\\x8c\\U000c...2\", 'êÖ\\U000949aaL,']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "񙷱󈯆򘋩ßg񅖇Ä🱕÷", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...1fc55÷', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,â", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,â", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,â", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,â", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,â", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är!,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°är,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°ä,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò°,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "Ò,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񢕉Ú", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "Èa\f", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񢕉Ú", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "񢕉", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "𢕉", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ᵉ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ŉ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "\u0011", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "T", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "B", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "@", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ">", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "<", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "00", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_unicode_range_monotonicity", "text": "'ięªWİĎ\\U0003d681\\U000e571f'", "a": "'ięªW'", "b": "'İĎ\\U0003d681\\U000e571f'", "ca": 5, "cb": 3, "cab": 3}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "पन्ह पन्ह त्र र्च कृकृ ड्ड न्हृे إلا بسم الله", "error": "assert 1 == 0\n +  where 1 = len({'db': 'पन्ह पन्ह त्र र्च कृकृ ड्ड न्हृे إلا بسم الله'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¡𰲚r󏖖{¿¿򧦸\ts´\u000e񿂂", "error": "assert 1 == 0\n +  where 1 = len({'db': '¡𰲚r\\U000cf596{¿\\x87¿\\U000a79b8s´\\x0e\\x7f\\U0007f082'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "er񊊚Ýà{dÿ\u0018²", "error": "assert 1 == 0\n +  where 1 = len({'db': 'er\\U0004a29aÝà{dÿ\\x18²'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "²<󆛄;󈾱ä򇝴", "error": "assert 1 == 0\n +  where 1 = len({'db': '²<\\U000c66c4'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "􅹏񣀝Ée", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\U00105e4f\\x83\\U0006301dÉe'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "¤C", "error": "assert 1 == 0\n +  where 1 = len({'db': '¤C\\x91'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "ù¹𙢐èU", "error": "assert 1 == 0\n +  where 1 = len({'db': 'ù¹\\U00019890èU'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "Or\u000et", "error": "assert 1 == 0\n +  where 1 = len({'db': 'O\\x9ar\\x0et'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "5Ò\u001d\u001e#ùü󐳖bxc", "error": "assert 1 == 0\n +  where 1 = len({'db': '\\x9c5Ò\\x1d\\x1e'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "db_dsn_parse_invalid_dsn_failed", "dsn": "0", "error": "assert 1 == 0\n +  where 1 = len({'db': '0'})"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host", "error": "assert 'user' in {'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "򓼜hî+\nÜ򑕙þ", "error": "assert 'user' in {'db': '\\U00093f1chî+Ü\\U00091559þ'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://user:pass@host/db", "error": "assert 'port' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql', 'user': 'user'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "\u001bØ󍄑[®", "error": "assert 'user' in {'db': 'Ø\\U000cd111[\\x97®'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_returns_dict_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host/db", "error": "'user'"}
{"test": "dsn_parse_preserves_components_failed", "dsn": "postgresql://host:5432/db", "error": "'user'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_port_is_integer_string_failed", "dsn": "postgresql://host/db", "error": "'port'"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_missing_components_failed", "dsn": "postgresql://host:5432/db", "error": "assert 'user' in {'db': 'db', 'host': 'host', 'port': 5432, 'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "postgresql://", "error": "assert 'user' in {'scheme': 'postgresql'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "", "error": "assert 'user' in {}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "not-a-url", "error": "assert 'user' in {'db': 'not-a-url'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "b%\u0006§ð,8򥨨ð𫔛I񸞯", "error": "assert 'user' in {'db': 'b%\\x06§\\x99ð,8\\U000a5a28ð𫔛I\\U000787af'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "Ñ", "error": "assert 'user' in {'db': 'Ñ'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "­󅆏", "error": "assert 'user' in {'db': '\\xad\\U000c518f'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "=򿷳𺻋󰳨򿓭m", "error": "assert 'user' in {'db': '=\\U000bfdf3\\U0003aecb\\U000f0ce8\\U000bf4edm'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "&v򳨦Ò", "error": "assert 'user' in {'db': '&v\\U000b3a26Ò'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "ÉÇ𽯂èâ¦", "error": "assert 'user' in {'db': 'ÉÇ\\x94\\U0003dbc2èâ¦\\x9f'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "dsn_parse_handles_invalid_dsns_failed", "dsn": "invalid://dsn", "error": "assert 'user' in {'host': 'dsn', 'scheme': 'invalid'}"}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 2.00000000e+003,  2.23295129e+151,  8.37779154e+015,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8').dtype\n +    where array([ 2.00000000e+003,  2.23295129e+151,  8.37779154e+015,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8') = ArrayTestModel(v8=array([ 2.00000000e+003,  2.23295129e+151,  8.37779154e+015,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [2000.0, 2.2329512928193542e+151, 8377791540139069.0, 5.1316412425848924e+247, -1.49440035284405e-10, 2000.0, 1.0165417661733096e+16, 3.343095450771219e+290]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 2.00000000e+003,  2.23295129e+151,  1.01654177e+016,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8').dtype\n +    where array([ 2.00000000e+003,  2.23295129e+151,  1.01654177e+016,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8') = ArrayTestModel(v8=array([ 2.00000000e+003,  2.23295129e+151,  1.01654177e+016,\\n        5.13164124e+247, -1.49440035e-010,  2.00000000e+003,\\n        1.01654177e+016,  3.34309545e+290], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [2000.0, 2.2329512928193542e+151, 1.0165417661733096e+16, 5.1316412425848924e+247, -1.49440035284405e-10, 2000.0, 1.0165417661733096e+16, 3.343095450771219e+290]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  2.23295129e+151,  1.01654177e+016,\\n        0.00000000e+000, -1.49440035e-010,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  2.23295129e+151,  1.01654177e+016,\\n        0.00000000e+000, -1.49440035e-010,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+000,  2.23295129e+151,  1.01654177e+016,\\n        0.00000000e+000, -1.49440035e-010,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 2.2329512928193542e+151, 1.0165417661733096e+16, 0.0, -1.49440035284405e-10, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+00,  0.00000000e+00,  1.01654177e+16,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([ 0.00000000e+00,  0.00000000e+00,  1.01654177e+16,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+00,  0.00000000e+00,  1.01654177e+16,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 1.0165417661733096e+16, 0.0, -1.49440035284405e-10, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8').dtype\n +    where array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8') = ArrayTestModel(v8=array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\\n       -1.49440035e-10,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, -1.49440035284405e-10, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([ 2.73960937e-041, -6.11615029e+016,  3.32639475e+170,\\n        1.22572495e+016,  1.00000000e+007,  4.25801408e+016,\\n       -3.57825872e+190, -7.43759505e+260]).dtype\n +    where array([ 2.73960937e-041, -6.11615029e+016,  3.32639475e+170,\\n        1.22572495e+016,  1.00000000e+007,  4.25801408e+016,\\n       -3.57825872e+190, -7.43759505e+260]) = ArrayTestModel(v8=array([ 2.73960937e-041, -6.11615029e+016,  3.32639475e+170,\\n        1.22572495e+016,  1.00000000e+007,  4.25801408e+016,\\n       -3.57825872e+190, -7.43759505e+260]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [2.739609374440725e-41, -6.1161502935322984e+16, 3.3263947528216087e+170, 1.225724946601681e+16, 10000000.0, 4.258014076800803e+16, -3.578258718439797e+190, -7.437595049912176e+260]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([2.73960937e-41, 1.22572495e+16, 1.22572495e+16, 1.22572495e+16,\\n       1.00000000e+07, 1.22572495e+16, 1.22572495e+16, 0.00000000e+00]).dtype\n +    where array([2.73960937e-41, 1.22572495e+16, 1.22572495e+16, 1.22572495e+16,\\n       1.00000000e+07, 1.22572495e+16, 1.22572495e+16, 0.00000000e+00]) = ArrayTestModel(v8=array([2.73960937e-41, 1.22572495e+16, 1.22572495e+16, 1.22572495e+16,\\n       1.00000000e+07, 1.22572495e+16, 1.22572495e+16, 0.00000000e+00]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [2.739609374440725e-41, 1.225724946601681e+16, 1.225724946601681e+16, 1.225724946601681e+16, 10000000.0, 1.225724946601681e+16, 1.225724946601681e+16, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec8_shape_dtype_coercion_failed", "input_shape": [8], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "input_values": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([-6.3045619e+16, -6.3045619e+16, -6.3045619e+16, -6.3045619e+16,\\n       -6.3045619e+16, -6.3045619e+16, -6.30456...3045619e+16, -6.3045619e+16,\\n       -6.3045619e+16, -6.3045619e+16, -6.3045619e+16, -6.3045619e+16],\\n      dtype='>f4').dtype\n +    where array([-6.3045619e+16, -6.3045619e+16, -6.3045619e+16, -6.3045619e+16,\\n       -6.3045619e+16, -6.3045619e+16, -6.30456...3045619e+16, -6.3045619e+16,\\n       -6.3045619e+16, -6.3045619e+16, -6.3045619e+16, -6.3045619e+16],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-6.3045619e+16, -6.3045619e+16, -6.3045619e+16,..., -6.3045619e+16,\\n       -6.3045619e+16, -6.3045619e+16, -6.3045619e+16, -6.3045619e+16],\\n      dtype='>f4'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f2", "error": "assert dtype('>f2') == <class 'numpy.float32'>\n +  where dtype('>f2') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2').dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ...., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,...0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype='>f2'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([-6.52972428e+015, -6.52972428e+015, -6.52972428e+015,\\n       -6.52972428e+015, -6.52972428e+015, -6.52972428e+0...28e+015, -6.52972428e+015, -6.52972428e+015,\\n        3.75366772e+088, -6.52972428e+015, -6.52972428e+015], dtype='>f8').dtype\n +    where array([-6.52972428e+015, -6.52972428e+015, -6.52972428e+015,\\n       -6.52972428e+015, -6.52972428e+015, -6.52972428e+0...28e+015, -6.52972428e+015, -6.52972428e+015,\\n        3.75366772e+088, -6.52972428e+015, -6.52972428e+015], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([-6.52972428e+015, -6.52972428e+015, -6.52972428....52972428e+015, -6.52972428e+015,\\n        3.75366772e+088, -6.52972428e+015, -6.52972428e+015], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 1.30000000e+000,  1.30000000e+000,  1.30000000e+000,\\n        1.30000000e+000,  1.30000000e+000,  1.30000000e+0...00e+000,  1.30000000e+000,  1.30000000e+000,\\n        3.75366772e+088,  1.30000000e+000,  1.30000000e+000], dtype='>f8').dtype\n +    where array([ 1.30000000e+000,  1.30000000e+000,  1.30000000e+000,\\n        1.30000000e+000,  1.30000000e+000,  1.30000000e+0...00e+000,  1.30000000e+000,  1.30000000e+000,\\n        3.75366772e+088,  1.30000000e+000,  1.30000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 1.30000000e+000,  1.30000000e+000,  1.30000000....30000000e+000,  1.30000000e+000,\\n        3.75366772e+088,  1.30000000e+000,  1.30000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8').dtype\n +    where array([ 0.00000000e+000,  0.00000000e+000,  0.00000000e+000,\\n        0.00000000e+000,  0.00000000e+000,  0.00000000e+0...00e+000,  0.00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([ 0.00000000e+000,  0.00000000e+000,  0.00000000....00000000e+000,  0.00000000e+000,\\n        3.75366772e+088,  0.00000000e+000,  0.00000000e+000], dtype='>f8'), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec384_shape_dtype_coercion_failed", "input_shape": [384], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16).dtype\n +    where array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,..., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n       0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float16), v2d=None).v384\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.989...93731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4').dtype\n +    where array([[-3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.989...93731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-3.9893731e+16, -3.9893731e+16, -3.9...3731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[-3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.989...93731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4').dtype\n +    where array([[-3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.989...93731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-3.9893731e+16, -3.9893731e+16, -3.9...3731e+16, -3.9893731e+16,\\n        -3.9893731e+16, -3.9893731e+16, -3.9893731e+16, -3.9893731e+16]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f4", "error": "assert dtype('>f4') == <class 'numpy.float32'>\n +  where dtype('>f4') = array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4').dtype\n +    where array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.000...00000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 0.0000000e+00,  0.0000000e+00,  0.0...0000e+00,  0.0000000e+00,\\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],\\n      dtype='>f4')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n        -0., -0., -0., -0., -0., -0., -0.],\\n ...-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n        -0., -0., -0., -0., -0., -0., -0.]], dtype=float16).dtype\n +    where array([[-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n        -0., -0., -0., -0., -0., -0., -0.],\\n ...-0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n        -0., -0., -0., -0., -0., -0., -0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[-0., -0., -0., -0., -0., -0., -0., -...0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0.,\\n        -0., -0., -0., -0., -0., -0., -0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8').dtype\n +    where array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 1.25000000e-001,  1.25000000e-001, ...       2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8').dtype\n +    where array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 1.25000000e-001,  1.25000000e-001, ...       2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8').dtype\n +    where array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 1.25000000e-001,  1.25000000e-001, ...       2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8').dtype\n +    where array([[ 1.25000000e-001,  1.25000000e-001,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001, -3.40282347e...        2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8') = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[ 1.25000000e-001,  1.25000000e-001, ...       2.81039899e-157,  2.24742986e+016,  1.25000000e-001,\\n         1.25000000e-001,  1.25000000e-001]], dtype='>f8')).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "vec2d_shape_dtype_coercion_failed", "input_shape": [10, 20], "input_dtype": "float16", "error": "assert dtype('float16') == <class 'numpy.float32'>\n +  where dtype('float16') = array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16).dtype\n +    where array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.],\\n       [0., 0., 0., 0..., 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16) = ArrayTestModel(v8=array([0., 0., 0., 0., 0., 0., 0., 0.]), v384=None, v2d=array([[0., 0., 0., 0., 0., 0., 0., 0., 0., ... 0.],\\n       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\\n        0., 0., 0., 0.]], dtype=float16)).v2d\n +  and   <class 'numpy.float32'> = np.float32"}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  6.82657214e+015,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  6.82657214e+015,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  6.82657214e+015,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -5.12165895e-297,  0.00000000e+000,  1.00000000e+007,\\n       -4.47486133e+016,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([            inf,            -inf,             nan, -5.87968037e+16,\\n        0.00000000e+00,  1.00000000e+07, -4.47486133e+16,  5.26590681e-18],\\n      dtype='>f8').dtype\n +    where array([            inf,            -inf,             nan, -5.87968037e+16,\\n        0.00000000e+00,  1.00000000e+07, -4.47486133e+16,  5.26590681e-18],\\n      dtype='>f8') = ArrayTestModel(v8=array([            inf,            -inf,             nan, -5.87968037e+16,\\n        0.00000000e+00,  1.00000000e+07, -4.47486133e+16,  5.26590681e-18],\\n      dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n       -5.87968037e+016,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n       -5.87968037e+016,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -5.87968037e+016,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        0.00000000e+000,  0.00000000e+000,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": ">f8", "error": "assert dtype('>f8') == <class 'numpy.float32'>\n +  where dtype('>f8') = array([             inf,             -inf,              nan,\\n        0.00000000e+000,  1.00000000e+007,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8').dtype\n +    where array([             inf,             -inf,              nan,\\n        0.00000000e+000,  1.00000000e+007,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8') = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n        0.00000000e+000,  1.00000000e+007,  1.00000000e+007,\\n       -1.62493067e+140,  5.26590681e-018], dtype='>f8'), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "array_special_values_failed", "input_shape": [8], "input_dtype": "float64", "error": "assert dtype('float64') == <class 'numpy.float32'>\n +  where dtype('float64') = array([             inf,             -inf,              nan,\\n       -5.44988763e+016, -5.44988763e+016, -5.44988763e+016,\\n       -5.44988763e+016,  1.64351598e-274]).dtype\n +    where array([             inf,             -inf,              nan,\\n       -5.44988763e+016, -5.44988763e+016, -5.44988763e+016,\\n       -5.44988763e+016,  1.64351598e-274]) = ArrayTestModel(v8=array([             inf,             -inf,              nan,\\n       -5.44988763e+016, -5.44988763e+016, -5.44988763e+016,\\n       -5.44988763e+016,  1.64351598e-274]), v384=None, v2d=None).v8\n +  and   <class 'numpy.float32'> = np.float32", "special_values": [Infinity, -Infinity, NaN]}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "test_reranker_env_device", "spec": "weird", "resolved": "weird"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}, {"file_path": "150", "score": 0.5, "chunk_id": 0.9369048788590255, "filename": "False", "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "45", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "45", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "\u0019ï¢껝\frK", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "MûÏ¸z¯Úuè", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 0.5726108265623112, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "\u0019ï¢껝\frK", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"embedding": [0.1, 0.2, 0.3], "file_path": "MûÏ¸z¯Úuè", "score": 0.5, "chunk_id": "test_chunk"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "793", "score": 0.5, "chunk_id": "test_chunk"}], "alpha": 2.225073858507e-311, "per_file_penalty": 2.225073858507e-311, "k": 45, "tag": "\u0019ï¢껝\frK", "error": "assert False\n +  where False = isinstance({'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": 5.117369939527344e-308, "file_path": "[]", "filename": "True", "embedding": [0.1, 0.2, 0.3], "score": 0.85}, {"filename": "[-5.535603007935518e-255]", "file_path": "", "chunk_id": 803, "score": 1.0, "embedding": [0.1, 0.2, 0.3]}, {"score": 0.5, "embedding": [0.1, 0.2, 0.3], "filename": "[-0.05677779463039179, 0.3333333333333333, -0.0, 6.458183224558448e-304, 0.35, -0.21350468014584512, -0.05177671012604157, -7.742613836167463e-154, -0.9156955231095121, -2.2250738585072014e-308]", "file_path": "891", "chunk_id": [-0.8706158194143265, 5.984474320333666e-207, 0.12210092025546504, -0.461892704924601, -0.7358363348279986]}, {"chunk_id": [0.42881257580626575], "score": 0.5, "filename": "854", "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "chunk_id": [-0.4474566714483802, -0.3333333333333333, -0.06113202234834758, 0.0019006948377200406, 0.9999999999999999, 0.3894333012185023], "filename": "0.37796235054953564", "score": 0.5882212809787403, "file_path": "[-8.075785686587676e-274, 0.7247328844271772, -0.2737912839275659]"}, {"chunk_id": 0.006749227259816861, "score": 0.0, "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 0.3065267539379038, "chunk_id": true, "filename": "[5e-324, -0.8951164118937069, 2.9991441271595307e-143, 0.7, 0.4235406270406863]"}, {"file_path": "0.052835980921321773", "embedding": [0.1, 0.2, 0.3], "chunk_id": true, "score": 0.5}, {"chunk_id": 500, "file_path": "򹗔", "filename": "True", "embedding": [0.1, 0.2, 0.3], "score": 0.5}, {"file_path": "ë·", "filename": "integration", "score": 0.5, "chunk_id": 0.10195530395714239, "embedding": [0.1, 0.2, 0.3]}, {"embedding": [0.1, 0.2, 0.3], "score": 492.0, "file_path": "691", "chunk_id": "", "filename": "0.2419000082469503"}, {"embedding": [0.1, 0.2, 0.3], "file_path": "[0.99999, -0.43706752396674486, 1.3884174156394572e-269, 0.2, 1e-07, -2.3885399472046796e-85]", "chunk_id": [-0.9885263290942095, 0.12542131695293457, -9.79328187760655e-99, 0.7745456914094859, -0.3609695164360692, 0.4750830862909752, -0.11032763736192952, 2.225073858507e-311, -0.99999, -0.8294204532727063], "score": 252.0, "filename": "450"}], "alpha": 5e-324, "per_file_penalty": 0.987922168016879, "k": 45, "tag": "¶¬ïRä¥", "error": "assert False\n +  where False = isinstance({'chunk_id': 'c3d3bcb535fedd7a', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_types_failed", "rows": [{"chunk_id": "", "file_path": "", "filename": "", "score": 0.5, "embedding": [0.1, 0.2, 0.3]}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "assert False\n +  where False = isinstance({'chunk_id': '3e638bd4166e880c', 'chunk_variant': 'legacy', 'ingest_run_id': 'legacy'}, ((((str | int) | float) | bool) | <class 'NoneType'>))\n +    where <class 'NoneType'> = type(None)"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 548, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "H": "n7\u0004񁌴񷯹", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "񄀺Å": false, "󂆜?h": "񳽄¡Ëìî𑿗©񚗦ù\u000b"}, {"ÓF/7𠖆ÇâA": "]_%"}, {"²\u000b󄽨r𝈼ï󔭾": 448, "q򮲘Õḕ\u0017󸊕񆚯1¾񅖥󹱱Të\u0005򖦎": 0.6119714256236292}, {"¿¸1𝜥𒴩d¤򴎍": false, "¹Æ󏃮%§𤘖ëc\u0006u򁣾Öp򋐻pü}񔹼": 177, "c": 872, "ÿ": 184, "豏": 0.155, "ù¤񻹠": 1.0, "I񳼤\rìïÌ": 5e-324, "Jå®󰪬Ü𞏜¿*": true, "񽓔": true}, {"6>𡤙F񸢮Ïü󠺁×VÜ": "", "ñM ": 0.8123456540080036, "9": false, "Ã򦸏": false, "¾©𩜽\u000e\u001b": 349}, {"6򪐲aÆïÑyæ": true, ">\\s*tl;?dr": false, "": true, "㜋Øe": 0.342300226141211, "R": 2.220446049250313e-16, "HÖÍëÀF": true}, {"ÖÌ": 14, "ßCùÍÑ!򂦬": 759, "H?Å󚕷ý": 861, "򣤼󱤤Éu𠗹": 242, "µ񜕃󥏫y­Õ\"": 0.5, "¨P÷ÕØ\u0005w¼·Rþ": "", "5½ÜË􄚣򇬒½'": true, "󍫡󌢋b\u0018Æç\u0001": false, " ": "last_verified", "": 0.6703386860641741}], "alpha": 0.6124708826236401, "per_file_penalty": 0.6942666036465385, "k": 16, "tag": "õ¤\u000eþ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 548, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "H": "n7\u0004񁌴񷯹", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "񄀺Å": false, "󂆜?h": "񳽄¡Ëìî𑿗©񚗦ù\u000b"}, {"ÓF/7𠖆ÇâA": "]_%"}, {"²\u000b󄽨r𝈼ï󔭾": 448, "q򮲘Õḕ\u0017󸊕񆚯1¾񅖥󹱱Të\u0005򖦎": 0.6119714256236292}, {"¿¸1𝜥𒴩d¤򴎍": false, "¹Æ󏃮%§𤘖ëc\u0006u򁣾Öp򋐻pü}񔹼": 177, "c": 872, "ÿ": 548, "豏": 0.155, "ù¤񻹠": 1.0, "I񳼤\rìïÌ": 5e-324, "Jå®󰪬Ü𞏜¿*": true, "񽓔": true}, {"6>𡤙F񸢮Ïü󠺁×VÜ": "", "ñM ": 0.8123456540080036, "9": false, "Ã򦸏": false, "¾©𩜽\u000e\u001b": 349}, {"6򪐲aÆïÑyæ": true, ">\\s*tl;?dr": false, "": true, "㜋Øe": 0.342300226141211, "R": 2.220446049250313e-16, "HÖÍëÀF": true}, {"ÖÌ": 14, "ßCùÍÑ!򂦬": 759, "H?Å󚕷ý": 861, "򣤼󱤤Éu𠗹": 242, "µ񜕃󥏫y­Õ\"": 0.5, "¨P÷ÕØ\u0005w¼·Rþ": "", "5½ÜË􄚣򇬒½'": true, "󍫡󌢋b\u0018Æç\u0001": false, " ": "last_verified", "": 0.6703386860641741}], "alpha": 0.6124708826236401, "per_file_penalty": 0.6942666036465385, "k": 16, "tag": "õ¤\u000eþ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 548, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "H": "n7\u0004񁌴񷯹", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "񄀺Å": false, "󂆜?h": "񳽄¡Ëìî𑿗©񚗦ù\u000b"}, {"ÓF/7𠖆ÇâA": "]_%"}, {"²\u000b󄽨r𝈼ï󔭾": 448, "q򮲘Õḕ\u0017󸊕񆚯1¾񅖥󹱱Të\u0005򖦎": 0.6119714256236292}, {"¿¸1𝜥𒴩d¤򴎍": false, "¹Æ󏃮%§𤘖ëc\u0006u򁣾Öp򋐻pü}񔹼": 177, "c": 872, "ÿ": 548, "豏": 0.155, "ù¤񻹠": 1.0, "I񳼤\rìïÌ": 5e-324, "Jå®󰪬Ü𞏜¿*": true, "񽓔": true}, {"6>𡤙F񸢮Ïü󠺁×VÜ": "", "ñM ": 0.8123456540080036, "ûÄ": false, "Ã򦸏": false, "¾©𩜽\u000e\u001b": 349}, {"6򪐲aÆïÑyæ": true, ">\\s*tl;?dr": false, "": true, "㜋Øe": 0.342300226141211, "R": 2.220446049250313e-16, "HÖÍëÀF": true}, {"ÖÌ": 14, "ßCùÍÑ!򂦬": 759, "H?Å󚕷ý": 861, "򣤼󱤤Éu𠗹": 242, "µ񜕃󥏫y­Õ\"": 0.5, "¨P÷ÕØ\u0005w¼·Rþ": "", "5½ÜË􄚣򇬒½'": true, "󍫡󌢋b\u0018Æç\u0001": false, " ": "last_verified", "": 0.6703386860641741}], "alpha": 0.6124708826236401, "per_file_penalty": 0.6942666036465385, "k": 16, "tag": "õ¤\u000eþ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 810, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "H": "n7\u0004񁌴񷯹", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "񄀺Å": false, "󂆜?h": "񳽄¡Ëìî𑿗©񚗦ù\u000b"}, {"ÓF/7𠖆ÇâA": "]_%"}, {"²\u000b󄽨r𝈼ï󔭾": 448, "q򮲘Õḕ\u0017󸊕񆚯1¾񅖥󹱱Të\u0005򖦎": 0.6119714256236292}, {"¿¸1𝜥𒴩d¤򴎍": false, "¹Æ󏃮%§𤘖ëc\u0006u򁣾Öp򋐻pü}񔹼": 177, "c": 872, "ÿ": 548, "豏": 0.155, "ù¤񻹠": 1.0, "I񳼤\rìïÌ": 5e-324, "Jå®󰪬Ü𞏜¿*": true, "񽓔": true}, {"6>𡤙F񸢮Ïü󠺁×VÜ": "", "ñM ": 0.8123456540080036, "ûÄ": false, "Ã򦸏": false, "¾©𩜽\u000e\u001b": 349}, {"6򪐲aÆïÑyæ": true, ">\\s*tl;?dr": false, "": true, "㜋Øe": 0.342300226141211, "R": 2.220446049250313e-16, "HÖÍëÀF": true}, {"ÖÌ": 14, "ßCùÍÑ!򂦬": 759, "H?Å󚕷ý": 861, "򣤼󱤤Éu𠗹": 242, "µ񜕃󥏫y­Õ\"": 0.5, "¨P÷ÕØ\u0005w¼·Rþ": "", "5½ÜË􄚣򇬒½'": true, "󍫡󌢋b\u0018Æç\u0001": false, " ": "last_verified", "": 0.6703386860641741}], "alpha": 0.6124708826236401, "per_file_penalty": 0.6942666036465385, "k": 16, "tag": "õ¤\u000eþ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 810, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "H": "n7\u0004񁌴񷯹", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "񄀺Å": false, "󂆜?h": "񳽄¡Ëìî𑿗©񚗦ù\u000b"}, {"ÓF/7𠖆ÇâA": "]_%"}, {"²\u000b󄽨r𝈼ï󔭾": 448, "q򮲘Õḕ\u0017󸊕񆚯1¾񅖥󹱱Të\u0005򖦎": 0.6119714256236292}, {"¿¸1𝜥𒴩d¤򴎍": false, "¹Æ󏃮%§𤘖ëc\u0006u򁣾Öp򋐻pü}񔹼": 177, "c": 872, "ÿ": 548, "豏": 0.155, "ù¤񻹠": 1.0, "I񳼤\rìïÌ": 5e-324, "Jå®󰪬Ü𞏜¿*": true, "񽓔": true}, {"C0": 0.08846202684481132}, {"6򪐲aÆïÑyæ": true, ">\\s*tl;?dr": false, "": true, "㜋Øe": 0.342300226141211, "R": 2.220446049250313e-16, "HÖÍëÀF": true}, {"ÖÌ": 14, "ßCùÍÑ!򂦬": 759, "H?Å󚕷ý": 861, "򣤼󱤤Éu𠗹": 242, "µ񜕃󥏫y­Õ\"": 0.5, "¨P÷ÕØ\u0005w¼·Rþ": "", "5½ÜË􄚣򇬒½'": true, "󍫡󌢋b\u0018Æç\u0001": false, " ": "last_verified", "": 0.6703386860641741}], "alpha": 0.6124708826236401, "per_file_penalty": 0.6942666036465385, "k": 16, "tag": "õ¤\u000eþ", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 810, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "Àf¥ip\n򎥢򎗻ksc": "󷋄wÓä򼒘", "򧓊×é": 0.04696615564322505, ">õ𧏒­\u0017R": true, "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"򛊕®򨁴¾𳾗çk^Û": 361, "ûÄ": true, "󭱪q\u0005¢¤\u001c􄇿Âz£¶": true, "c": 250, "­·\u0004Ð󃻇\u0018·": true, "򀜾@0.": "񸙽F¤򩁂", "\u0019æ󠥺ä\u0003": true, "Õó\u001b8N[\u000f": 0.39346365168177366}, {")\u0007#\u001eM)𱵃rV²𜭝4é}": 0.894256180508161, "_C¬o򊝞򵃈Î": false, "uÐAä": 810, "í\r$i𗾡Î,1ø": 0.5039008347729933, "𯵘ÚÕ\u0002I]ÊeÁ\u001dÜ": 0.2502450154191381, "򲩻": 1.0, "𜈭": true, "꺐I": 810, "å": "󚌆ûÊ¯À>iHÝ󃥈򎀨óX򘽕", "񛪈¼": "sKñ"}, {"C0": 0.08846202684481132}, {"❌": 0.39450373181685106, "𘊳": "ÅB򷍂񷰣±ä", "󲡶󅎾\u000e:񘣋Ï,­²": 941, "򧓊×é": "󷋄wÓä򼒘", "0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "0", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "mmr_rerank_output_json_serializable_failed", "rows": [{"0": ""}], "alpha": 0.0, "per_file_penalty": 0.0, "k": 1, "tag": "", "error": "'score'"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "\u0015=", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\u0017è", "Ⱦ", "𧣥\u001a", "}û\u0002", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "\u0015=", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\u0017è", "Ⱦ", "𧣥\u001a", "򼐌³󟈮𖑈VË\u0013I", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "򼐌³󟈮𖑈VË\u0013I", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\u0017è", "Ⱦ", "𧣥\u001a", "򼐌³󟈮𖑈VË\u0013I", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "򼐌³󟈮𖑈VË\u0013I", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\u0017è", "Ⱦ", "򼐌³󟈮𖑈VË\u0013I", "򼐌³󟈮𖑈VË\u0013I", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "򼐌³󟈮𖑈VË\u0013I", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\u0017è", "Ⱦ", "򼐌³󟈮𖑈VË\u0013I", "", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "򼐌³󟈮𖑈VË\u0013I", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "", " \u001e", "\r@lµ", "\r@lµ", "Ⱦ", "򼐌³󟈮𖑈VË\u0013I", "", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "²󅆮", "mode": "reader", "query": "򼐌³󟈮𖑈VË\u0013I", "tags": ["򼐌³󟈮𖑈VË\u0013I", "ß", "򼐌³󟈮𖑈VË\u0013I", " \u001e", "\r@lµ", "\r@lµ", "Ⱦ", "򼐌³󟈮𖑈VË\u0013I", "", "󚩸󋊠ö4¢"], "error": "1 validation error for GoldCase\n  Value error, ²󅆮: reader mode requires gt_answer [type=value_error, input_value={'id': '²\\U000c51ae', 'm...78\\U000cb2a0\\x86ö4¢']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󿧀Ï", "mode": "decision", "query": "Öe򒗓N-ì>4񧁰Tzn", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "Öe򒗓N-ì>4񧁰Tzn", "mode": "decision", "query": "Öe򒗓N-ì>4񧁰Tzn", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["-Infinity"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode..., 'tags': ['-Infinity']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["a"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode...885caÝ', 'tags': ['a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["򤍾\u0013ÑÝ·򈗊Ý"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode...x13ÑÝ·\\U000885caÝ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "򤍾\u0013ÑÝ·򈗊Ý", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["򤍾\u0013ÑÝ·򈗊Ý"], "error": "1 validation error for GoldCase\n  Value error, 򤍾\u0013ÑÝ·򈗊Ý: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U000a437e\\x13Ñ...x13ÑÝ·\\U000885caÝ']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "񫔈󩖙¾󲖚", "mode": "reader", "query": "xë«", "tags": ["Ä𕌰y¡", "FALSE"], "error": "1 validation error for GoldCase\n  Value error, 񫔈󩖙¾󲖚: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0006b508\\U000e9...U00015330y¡', 'FALSE']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "FALSE", "mode": "reader", "query": "xë«", "tags": ["Ä𕌰y¡", "FALSE"], "error": "1 validation error for GoldCase\n  Value error, FALSE: reader mode requires gt_answer [type=value_error, input_value={'id': 'FALSE', 'mode': <...U00015330y¡', 'FALSE']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "FALSE", "mode": "reader", "query": "xë«", "tags": ["Ä𕌰y¡", "Ä𕌰y¡"], "error": "1 validation error for GoldCase\n  Value error, FALSE: reader mode requires gt_answer [type=value_error, input_value={'id': 'FALSE', 'mode': <... '\\x8dÄ\\U00015330y¡']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "FALSE", "mode": "reader", "query": "Ä𕌰y¡", "tags": ["Ä𕌰y¡", "Ä𕌰y¡"], "error": "1 validation error for GoldCase\n  Value error, FALSE: reader mode requires gt_answer [type=value_error, input_value={'id': 'FALSE', 'mode': <... '\\x8dÄ\\U00015330y¡']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "FALSE", "mode": "reader", "query": "Ä𕌰y¡", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, FALSE: reader mode requires gt_answer [type=value_error, input_value={'id': 'FALSE', 'mode': <...5330y¡', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["a"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode...885caÝ', 'tags': ['a']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󿧀Ï", "mode": "decision", "query": "Öe򒗓N-ì>4񧁰Tzn", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "򤍾\u0013ÑÝ·򈗊Ý", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode...885caÝ', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "a", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, a: reader mode requires gt_answer [type=value_error, input_value={'id': 'a', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󿧀Ï", "mode": "retrieval", "query": "Öe򒗓N-ì>4񧁰Tzn", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "󿧀Ï", "mode": "retrieval", "query": "0", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["Â񂍷ó", "Â񂍷ó"], "error": "assert ['Â\\U00042377ó'] == ['Â\\U00042377...Â\\U00042377ó']\n  \n  Right contains one more item: 'Â\\U00042377ó'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "retrieval", "query": "0", "tags": ["0", "0"], "error": "assert ['0'] == ['0', '0']\n  \n  Right contains one more item: '0'\n  Use -v to get more diff"}
{"test": "goldcase_tags_list_strings_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["Â\u0005򠨸.\u0017", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "º􆧥Üu񆑻", "ì", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "º􆧥Üu񆑻", "ì", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "º􆧥Üu񆑻", "ì", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "results_storage", "ì", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "results_storage", "s\u0013I_@ì􈤌Ë𹵰´c", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "s\u0013I_@ì􈤌Ë𹵰´c", "s\u0013I_@ì􈤌Ë𹵰´c", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "񺩞\u0002~t􏵲D\u0001!", "mode": "reader", "query": "kbó-𠤤\bøõaÑ𗪐²", "tags": ["츦Ås󀢜\u0014gþ%񌆭\u0013d", "­(ÈØ", "å", "츦Ås󀢜\u0014gþ%񌆭\u0013d", "Ä𠬴Á𒅮", "s\u0013I_@ì􈤌Ë𹵰´c", "­(ÈØ", "results_storage", "\u001eæÔÓ<", "s\u0013I_@ì􈤌Ë𹵰´c"], "error": "1 validation error for GoldCase\n  Value error, 񺩞\u0002~t􏵲D\u0001!: reader mode requires gt_answer [type=value_error, input_value={'id': '\\U0007aa5e\\x02~t\\...\\x8c\\U00039d70´\\x9bc']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "­񣛈¿", "mode": "reader", "query": "V~~", "tags": ["ì𶆤_kãÌ\u0010\u001c"], "error": "1 validation error for GoldCase\n  Value error, ­񣛈¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\xad\\U000636c8\\x9...kã\\x95Ì\\x10\\x1c\\x94']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "­񣛈¿", "mode": "reader", "query": "V~~", "tags": ["ì𶆤_kãÌ\u0010\u001c"], "error": "1 validation error for GoldCase\n  Value error, ­񣛈¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\xad\\U000636c8\\x9...kã\\x95Ì\\x10\\x1c\\x94']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "­񣛈¿", "mode": "reader", "query": "V~~", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ­񣛈¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\xad\\U000636c8\\x9...V~\\x9e~', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "­񣛈¿", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, ­񣛈¿: reader mode requires gt_answer [type=value_error, input_value={'id': '\\xad\\U000636c8\\x9...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_valid_mode_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "o", "tags": ["\u001e", "í󦣗±â¦􀶃𿰏", "'¢5ì²񅫑Ú¿򂷟2򐣑¨X¤e", "q񼘾", "Ü@o\u0006#ü"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...86\\x87', 'Ü@o\\x06#ü']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "o", "tags": ["\u001e", "í󦣗±â¦􀶃𿰏", "'¢5ì²񅫑Ú¿򂷟2򐣑¨X¤e", "'¢5ì²񅫑Ú¿򂷟2򐣑¨X¤e", "Ü@o\u0006#ü"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...¨X¤e\", 'Ü@o\\x06#ü']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "o", "tags": ["\u001e", "í󦣗±â¦􀶃𿰏", "'¢5ì²񅫑Ú¿򂷟2򐣑¨X¤e", "\u001e", "Ü@o\u0006#ü"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...83\\x1e', 'Ü@o\\x06#ü']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "o", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...ry': 'o', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "U", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...ry': 'U', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "U", "tags": ["U"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...ry': 'U', 'tags': ['U']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "U", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...ry': 'U', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "U", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, U: reader mode requires gt_answer [type=value_error, input_value={'id': 'U', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "goldcase_roundtrip_failed", "case_id": "0", "mode": "reader", "query": "0", "tags": ["0"], "error": "1 validation error for GoldCase\n  Value error, 0: reader mode requires gt_answer [type=value_error, input_value={'id': '0', 'mode': <Mode...ry': '0', 'tags': ['0']}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/value_error"}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",í񴗧-", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,8", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Ûm,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Û,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻}Û,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻},", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£񞉻,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": "£,", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_parsing_failed", "env_key": "EVAL_KNOWN_TAGS", "env_value": ",", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "򲬉Ï𨀗Þ󝬩b􄔶󺡲#8Ï", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "¥B􎶲³󾟡񤟌񣫶Á¨", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "荴", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "\u0016󠡔½򨇭G񵬣", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "荴", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "1", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "ʹ", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "&", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "4", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "D", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "5", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "8", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "9", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": "2", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "settings_known_tags_list_string_failed", "known_tags": ":", "known_tags_type": "str", "error": "error parsing value for field \"known_tags\" from source \"EnvSettingsSource\""}
{"test": "settings_known_tags_list_string_failed", "known_tags": "0", "known_tags_type": "str", "error": "the JSON object must be str, bytes or bytearray, not int"}
{"test": "test_token_count_monotonic_concat", "a": "𭁹B", "b": "\u0004wNQ\u0002", "ca": 3, "cb": 5, "cab": 3}
{"test": "test_unicode_monotonic_concat", "a": "󋮪Þ", "b": "Öí|򈤳y󬂼\u0004ܦy", "ca": 3, "cb": 6, "cab": 5}
{"test": "test_unicode_range_monotonicity", "text": "'»ñ¾\\U000efc87\\U000c8b17\\U000a3097'", "a": "'»ñ¾'", "b": "'\\U000efc87\\U000c8b17\\U000a3097'", "ca": 5, "cb": 3, "cab": 4}
