{"id": "EVAL_GOLD_0001", "mode": "retrieval", "query": "What is DSPy according to 400_07_ai-frameworks-dspy.md?", "tags": ["rag_qa_single"], "expected_files": ["400_07_ai-frameworks-dspy.md"], "notes": "Ported from dspy-rag-system/eval_gold.py GOLD"}
{"id": "EVAL_GOLD_ADD_0001", "mode": "retrieval", "query": "According to 400_06_memory-and-context-systems.md, what is the memory system in this project?", "tags": ["rag_qa_single"], "expected_files": ["400_06_memory-and-context-systems.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0002", "mode": "retrieval", "query": "Where are the model configuration settings defined?", "tags": ["rag_qa_single"], "expected_files": ["200_setup/201_model-configuration.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0003", "mode": "retrieval", "query": "What are the naming conventions used in this repo (see 200_setup)?", "tags": ["rag_qa_single"], "expected_files": ["200_setup/200_naming-conventions.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0004", "mode": "retrieval", "query": "Show the DSPy development context TL;DR.", "tags": ["rag_qa_single"], "expected_files": ["104_dspy-development-context.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0005", "mode": "retrieval", "query": "Which file summarizes backlog and priorities?", "tags": ["rag_qa_single"], "expected_files": ["000_backlog.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0006", "mode": "retrieval", "query": "Which file defines the governance and AI constitution?", "tags": ["rag_qa_single"], "expected_files": ["400_02_governance-and-ai-constitution.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0007", "mode": "retrieval", "query": "Where are database troubleshooting patterns documented?", "tags": ["rag_qa_single"], "expected_files": ["100_memory/100_database-troubleshooting-patterns.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0008", "mode": "retrieval", "query": "Which file describes the memory/context workflow?", "tags": ["rag_qa_single"], "expected_files": ["103_memory-context-workflow.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0009", "mode": "retrieval", "query": "Give the high-level getting started index.", "tags": ["rag_qa_single"], "expected_files": ["400_00_getting-started-and-index.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD"}
{"id": "EVAL_GOLD_ADD_0010", "mode": "retrieval", "query": "Show me the setup docs under 200_setup.", "tags": ["rag_qa_single"], "globs": ["200_setup/*.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD (namespace)"}
{"id": "EVAL_GOLD_ADD_0011", "mode": "retrieval", "query": "Point me to memory-related guides under 100_memory.", "tags": ["rag_qa_single"], "globs": ["100_memory/*.md"], "notes": "Ported from dspy-rag-system/eval_gold.py ADDITIONAL_GOLD (namespace)"}
{"id": "DECISION_001", "mode": "decision", "query": "postgresql", "tags": ["meta_ops"], "expected_decisions": ["use_postgresql_with_e586cb3c2389", "postgresql_with_pgvector_5931f6780a53"], "notes": "Ported from evaluation_harness.create_gold_set() - Database technology choice"}
{"id": "DECISION_002", "mode": "decision", "query": "hybrid search", "tags": ["meta_ops"], "expected_decisions": ["implement_a_hybrid_bdfdbadd8cc2", "a_hybrid_search_417c35cf99d5"], "notes": "Ported from evaluation_harness.create_gold_set() - Search system architecture"}
{"id": "DECISION_003", "mode": "decision", "query": "vector search", "tags": ["meta_ops"], "expected_decisions": ["use_postgresql_with_e586cb3c2389", "postgresql_with_pgvector_5931f6780a53"], "notes": "Ported from evaluation_harness.create_gold_set() - Vector search implementation"}
{"id": "DECISION_004", "mode": "decision", "query": "database choice", "tags": ["meta_ops"], "expected_decisions": ["use_postgresql_with_e586cb3c2389"], "notes": "Ported from evaluation_harness.create_gold_set() - Database selection decision"}
{"id": "DECISION_005", "mode": "decision", "query": "search optimization", "tags": ["meta_ops"], "expected_decisions": ["implement_a_hybrid_bdfdbadd8cc2"], "notes": "Ported from evaluation_harness.create_gold_set() - Search performance optimization"}
{"id": "DECISION_006", "mode": "decision", "query": "pgvector", "tags": ["meta_ops"], "expected_decisions": ["use_postgresql_with_e586cb3c2389", "postgresql_with_pgvector_5931f6780a53"], "notes": "Ported from evaluation_harness.create_gold_set() - Vector extension choice"}
{"id": "DECISION_007", "mode": "decision", "query": "BM25", "tags": ["meta_ops"], "expected_decisions": ["implement_a_hybrid_bdfdbadd8cc2"], "notes": "Ported from evaluation_harness.create_gold_set() - Text search algorithm"}
{"id": "DECISION_008", "mode": "decision", "query": "memory system", "tags": ["meta_ops"], "expected_decisions": [], "notes": "Ported from evaluation_harness.create_gold_set() - Memory system architecture (no decisions yet)"}
{"id": "DECISION_009", "mode": "decision", "query": "API design", "tags": ["meta_ops"], "expected_decisions": [], "notes": "Ported from evaluation_harness.create_gold_set() - API design decisions (no decisions yet)"}
{"id": "What are the DSPy integration patterns in 400_09_ai-frameworks-dspy.md?", "mode": "retrieval", "query": "What are the DSPy integration patterns in 400_09_ai-frameworks-dspy.md?", "tags": ["rag_qa_single"], "expected_files": ["400_guides/400_09_ai-frameworks-dspy.md"], "globs": ["400_guides/400_*dspy*.md"], "notes": "Ported from evals/gold_cases.json"}
{"id": "List the core workflow guides in 000_core.", "mode": "retrieval", "query": "List the core workflow guides in 000_core.", "tags": ["rag_qa_single"], "expected_files": ["000_core/README.md", "000_core/000_evaluation-system-entry-point.md"], "globs": ["000_core/*.md"], "notes": "Ported from evals/gold_cases.json"}
{"id": "According to 400_06_memory-and-context-systems.md, what is the memory system in this project?", "mode": "retrieval", "query": "According to 400_06_memory-and-context-systems.md, what is the memory system in this project?", "tags": ["rag_qa_single"], "expected_files": ["400_guides/400_02_memory-rehydration-context-management.md", "100_memory/100_cursor-memory-context.md"], "globs": ["400_guides/400_*memory*.md", "100_memory/*.md"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Where are the model configuration settings defined?", "mode": "retrieval", "query": "Where are the model configuration settings defined?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "What are the naming conventions used in this repo (see 200_setup)?", "mode": "retrieval", "query": "What are the naming conventions used in this repo (see 200_setup)?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Show the DSPy development context TL;DR.", "mode": "retrieval", "query": "Show the DSPy development context TL;DR.", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Which file summarizes backlog and priorities?", "mode": "retrieval", "query": "Which file summarizes backlog and priorities?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Which file defines the governance and AI constitution?", "mode": "retrieval", "query": "Which file defines the governance and AI constitution?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Where are database troubleshooting patterns documented?", "mode": "retrieval", "query": "Where are database troubleshooting patterns documented?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Which file describes the memory/context workflow?", "mode": "retrieval", "query": "Which file describes the memory/context workflow?", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Give the high-level getting started index.", "mode": "retrieval", "query": "Give the high-level getting started index.", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Show me the setup docs under 200_setup.", "mode": "retrieval", "query": "Show me the setup docs under 200_setup.", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "Point me to memory-related guides under 100_memory.", "mode": "retrieval", "query": "Point me to memory-related guides under 100_memory.", "tags": ["rag_qa_single"], "notes": "Ported from evals/gold_cases.json"}
{"id": "doc_demote", "mode": "retrieval", "query": "Why do we demote docs/design subtrees slightly?", "tags": ["meta_ops"], "expected_files": ["dspy-rag-system/src/dspy_modules/retriever/pg.py"], "globs": ["dspy-rag-system/src/dspy_modules/retriever/pg.py"], "notes": "Ported from evals/gold_cases.json"}
{"id": "ops_bias_subtrees", "mode": "retrieval", "query": "Why do we bias ops/shell/setup subtrees for ops_health?", "tags": ["ops_health"], "expected_files": ["dspy-rag-system/src/dspy_modules/retriever/rerank.py"], "globs": ["dspy-rag-system/src/dspy_modules/retriever/rerank.py"], "notes": "Ported from evals/gold_cases.json"}
{"id": "ops_phrase_hints", "mode": "retrieval", "query": "Why do ops_health phrase hints include health check and shell init?", "tags": ["ops_health"], "expected_files": ["dspy-rag-system/src/dspy_modules/retriever/query_rewrite.py"], "globs": ["*/retriever/*query*.py"], "notes": "Ported from evals/gold_cases.json"}
{"id": "setup_steps_overview", "mode": "retrieval", "query": "What are the core steps emphasized under 200_setup?", "tags": ["rag_qa_single"], "expected_files": ["200_setup/200_naming-conventions.md", "CURSOR_MCP_SETUP.md"], "globs": ["200_setup/*.md"], "notes": "Ported from evals/gold_cases.json"}
{"id": "gold_000", "mode": "reader", "query": "How do I run the evals?", "tags": ["ops", "evaluation", "evals"], "category": "ops_health", "gt_answer": "Run the evals using: source throttle_free_eval.sh && python3 scripts/ragchecker_official_evaluation.py --use-bedrock --bypass-cli --stable", "expected_files": ["RUN_THE_EVALS_START_HERE.md", "scripts/ragchecker_official_evaluation.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_001", "mode": "reader", "query": "What is the memory rehydration protocol?", "tags": ["memory", "context", "rehydration"], "category": "ops_health", "gt_answer": "Run: export POSTGRES_DSN=\"mock://test\" && python3 scripts/unified_memory_orchestrator.py --systems ltst cursor go_cli prime --role planner \"current project status and core documentation\"", "expected_files": ["100_memory/100_cursor-memory-context.md"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_002", "mode": "reader", "query": "How do I create a PRD?", "tags": ["prd", "workflow", "documentation"], "category": "ops_health", "gt_answer": "Use the 001_create-prd.md template to create product requirements documents following the established workflow", "expected_files": ["000_core/001_create-prd.md"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_003", "mode": "reader", "query": "What are the RAGChecker baseline metrics?", "tags": ["ragchecker", "metrics", "baseline"], "category": "ops_health", "gt_answer": "Current baseline: Precision ≥0.20, Recall ≥0.45, F1 Score ≥0.22, Faithfulness ≥0.60", "expected_files": ["400_guides/400_11_performance-optimization.md"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_004", "mode": "reader", "query": "How do I set up shell integration?", "tags": ["shell", "integration", "setup"], "category": "ops_health", "gt_answer": "Run ./setup_shell_integration.sh from the root directory to copy env.ai-dev-tasks and append source lines to shell profiles", "expected_files": ["setup_shell_integration.sh"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_005", "mode": "reader", "query": "What is the canary deployment percentage limit?", "tags": ["canary", "deployment", "percentage"], "category": "ops_health", "gt_answer": "Canary percentage should not exceed 50% by default, configurable via max_percentage parameter", "expected_files": ["scripts/canary_percentage_check.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_006", "mode": "reader", "query": "How do I create a vector index with IVFFLAT?", "tags": ["db", "vector", "index", "ivfflat"], "category": "db_workflows", "gt_answer": "Create an IVFFLAT index with 100 lists on embedding_vector using vector_cosine_ops", "expected_files": ["scripts/sql/fix_sparse_vector_ddls.sql"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_007", "mode": "reader", "query": "What is the websearch tsquery function?", "tags": ["db", "fts", "tsquery", "postgresql"], "category": "db_workflows", "gt_answer": "websearch_to_tsquery is used for full-text search with websearch syntax support in PostgreSQL", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_008", "mode": "reader", "query": "How do I configure pgvector for ANN operations?", "tags": ["db", "pgvector", "ann", "cosine"], "category": "db_workflows", "gt_answer": "Use pgvector with cosine distance operator (<=>) and configure HNSW or IVFFLAT indexes for approximate nearest neighbor search", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_009", "mode": "reader", "query": "What is the RRF fusion method?", "tags": ["db", "rrf", "fusion", "ranking"], "category": "db_workflows", "gt_answer": "Reciprocal Rank Fusion combines multiple ranking lists using weighted reciprocal rank scoring with k=60 parameter", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_010", "mode": "reader", "query": "How do I run database migrations?", "tags": ["db", "migration", "resilience"], "category": "db_workflows", "gt_answer": "Use the database resilience manager with retry wrappers and proper connection pooling for migration operations", "expected_files": ["dspy-rag-system/src/utils/database_resilience.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_011", "mode": "reader", "query": "What is the chunking configuration for embeddings?", "tags": ["db", "chunking", "embeddings", "configuration"], "category": "db_workflows", "gt_answer": "Default chunk size is 450 tokens with 0.10 overlap ratio and Jaccard threshold of 0.8 for deduplication", "expected_files": ["templates/eval_manifest_template.yaml"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_012", "mode": "reader", "query": "How does the DSPy RAG pipeline work?", "tags": ["rag", "dspy", "pipeline", "retrieval"], "category": "rag_qa_single", "gt_answer": "The RAG pipeline uses hybrid retrieval with RRF fusion, cross-encoder reranking, and context-aware generation with citation extraction", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_013", "mode": "reader", "query": "What is the HybridVectorStore?", "tags": ["rag", "vector", "hybrid", "search"], "category": "rag_qa_single", "gt_answer": "HybridVectorStore combines dense vector search with sparse BM25 search using z-score normalization and RRF fusion", "expected_files": ["dspy-rag-system/src/dspy_modules/vector_store.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_014", "mode": "reader", "query": "How do I configure the reranker?", "tags": ["rag", "reranker", "cross-encoder"], "category": "rag_qa_single", "gt_answer": "Set RERANK_ENABLE=1 and use BAAI/bge-reranker-base model for cross-encoder reranking with configurable pool size", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_015", "mode": "reader", "query": "What is the citation extraction process?", "tags": ["rag", "citations", "extraction", "scoring"], "category": "rag_qa_single", "gt_answer": "Citation extraction uses advanced scoring with expected citation matching, filename extraction, and relevance scoring for top 5 citations", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_016", "mode": "reader", "query": "How do I use the teleprompter?", "tags": ["rag", "teleprompter", "optimization"], "category": "rag_qa_single", "gt_answer": "Use BootstrapFewShot teleprompter with grounding metric for RAG optimization and few-shot learning", "expected_files": ["dspy_program.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_017", "mode": "reader", "query": "What is the context consumption enforcement?", "tags": ["rag", "context", "enforcement", "grounding"], "category": "rag_qa_single", "gt_answer": "Context consumption enforcement requires at least 50 words of context and validates that answers are grounded in retrieved context", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_018", "mode": "reader", "query": "How does multi-hop retrieval work with fusion?", "tags": ["rag", "multi-hop", "fusion", "hyde", "prf"], "category": "rag_qa_multi", "gt_answer": "Multi-hop retrieval uses HyDE for query expansion, PRF for term expansion, and RRF fusion to combine dense and sparse results with cross-encoder reranking", "expected_files": ["dspy-rag-system/src/dspy_modules/rag_pipeline.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_019", "mode": "reader", "query": "What is the gate and promote system?", "tags": ["rag", "gates", "promotion", "quality"], "category": "rag_qa_multi", "gt_answer": "The gate and promote system validates F1 score, precision drift, latency, and oracle metrics before promoting DSPy compiled artifacts to production", "expected_files": ["scripts/gate_and_promote.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_020", "mode": "reader", "query": "How do I configure evaluation thresholds?", "tags": ["rag", "evaluation", "thresholds", "gates"], "category": "rag_qa_multi", "gt_answer": "Set evaluation thresholds for F1 score (≥0.22), precision drift (≤0.02), latency increase (≤15%), and oracle prefilter (≥0.85)", "expected_files": ["scripts/gate_and_promote.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_021", "mode": "reader", "query": "What is the evaluation manifest template?", "tags": ["rag", "evaluation", "manifest", "template"], "category": "rag_qa_multi", "gt_answer": "The evaluation manifest template includes chunking configuration, model specifications, retrieval parameters, and evaluation thresholds for reproducible evaluations", "expected_files": ["templates/eval_manifest_template.yaml"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_022", "mode": "reader", "query": "How does the RAGChecker evaluation work?", "tags": ["rag", "evaluation", "ragchecker", "oracle"], "category": "rag_qa_multi", "gt_answer": "RAGChecker evaluation uses real DSPy RAG integration with oracle metrics, retrieval snapshots, and comprehensive case result normalization", "expected_files": ["scripts/ragchecker_official_evaluation.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_023", "mode": "reader", "query": "What is the provenance tracking system?", "tags": ["rag", "provenance", "tracking", "leakage"], "category": "rag_qa_multi", "gt_answer": "Provenance tracking includes few-shot ID tracking, chunk variant identification, and leakage guards to prevent data contamination", "expected_files": ["dspy-rag-system/src/utils/few_shot_provenance.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_024", "mode": "reader", "query": "How do I run the runbook?", "tags": ["meta", "runbook", "workflow"], "category": "meta_ops", "gt_answer": "Follow the established workflows in 000_core directory: create PRD, generate tasks, and process task lists using the documented procedures", "expected_files": ["000_core/000_backlog.md", "000_core/001_create-prd.md"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_025", "mode": "reader", "query": "Where do evaluation manifests live?", "tags": ["meta", "manifests", "evaluation"], "category": "meta_ops", "gt_answer": "Evaluation manifests are stored in metrics/baseline_evaluations/ directory with timestamped versions and configuration metadata", "expected_files": ["metrics/baseline_evaluations/"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_026", "mode": "reader", "query": "Which gates block deployment?", "tags": ["meta", "gates", "deployment", "blocking"], "category": "meta_ops", "gt_answer": "Deployment is blocked by F1 score below baseline, precision drift >2%, latency increase >15%, and oracle metrics below thresholds", "expected_files": ["scripts/gate_and_promote.py"], "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_027", "mode": "reader", "query": "How do I configure the quantum entanglement module?", "tags": ["negative", "quantum", "entanglement"], "category": "negatives", "gt_answer": "Not in context.", "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_028", "mode": "reader", "query": "What is the API key for the Mars colony database?", "tags": ["negative", "mars", "api-key"], "category": "negatives", "gt_answer": "Not in context.", "notes": "Ported from datasets/dev_gold.jsonl"}
{"id": "gold_029", "mode": "reader", "query": "How do I install the time travel dependencies?", "tags": ["negative", "time-travel", "dependencies"], "category": "negatives", "gt_answer": "Not in context.", "notes": "Ported from datasets/dev_gold.jsonl"}
