name: XRef Temp-Copy Proof

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'scripts/xref_apply.py'
      - 'scripts/markdown_utils.py'
      - 'scripts/link_check.py'
      - 'data/validator_exceptions.json'
      - '.github/workflows/xref-proof.yml'

env:
  VALIDATOR_REQUIRE_MULTI_REP: 1
  VALIDATOR_REQUIRE_XREF: 1
  VALIDATOR_STRICT_STALE_XREF: 0
  REHYDRATE_STABILITY: 0.6
  VALIDATOR_CHECK_MODE: all
  VALIDATOR_CI_MODE: 1
  # Per-category FAIL mode (remain 0 until flips)
  VALIDATOR_ARCHIVE_FAIL: 0
  VALIDATOR_SHADOW_FAIL: 0
  VALIDATOR_README_FAIL: 0
  VALIDATOR_MULTIREP_FAIL: 0

jobs:
  xref-proof:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run XRef tests
        run: |
          python3 -m pytest tests/xref/ tests/linkcheck/ tests/validator/test_exception_ledger.py -v

      - name: Baseline validator (repo)
        run: |
          python3 scripts/doc_coherence_validator.py --ci --json > validator_report_before.json
          echo "Baseline validator completed"

      - name: Simulate XRef apply in temp copy
        run: |
          mkdir -p /tmp/repo && rsync -a --exclude='.git' ./ /tmp/repo/
          cd /tmp/repo
          # Convert high-confidence mentions inline
          python3 scripts/xref_apply.py --root /tmp/repo --scope 000_core --apply links --write
          # Build a temporary ledger for residual low-confidence items (14-day expiry)
          python3 - <<'PY'
          import json, os, datetime
          # Create temporary ledger for files that still need waivers
          ledger = {
              "exceptions": {},
              "metadata": {
                  "version": "1.0.0",
                  "created": datetime.datetime.utcnow().isoformat() + "Z"
              }
          }
          # Seed with known backlog docs that might need exceptions
          files = [
              "000_core/000_backlog.md",
              "000_core/001_create-prd.md",
              "000_core/002_generate-tasks.md",
              "000_core/003_process-task-list.md",
              "000_core/004_development-roadmap.md",
              "000_core/README.md"
          ]
          exp = (datetime.datetime.utcnow() + datetime.timedelta(days=14)).strftime("%Y-%m-%d")
          for f in files:
              ledger["exceptions"].setdefault(f, []).append({
                  "key": "xref-missing",
                  "expires": exp,
                  "reason": "PR B low-confidence stub"
              })
          os.makedirs("/tmp/repo/data", exist_ok=True)
          with open("/tmp/repo/data/validator_exceptions.json", "w") as f:
              json.dump(ledger, f, indent=2)
          PY
          echo "XRef apply simulation completed"

      - name: Re-run validator on temp copy
        run: |
          cd /tmp/repo
          python3 scripts/doc_coherence_validator.py --ci --json --exceptions /tmp/repo/data/validator_exceptions.json > /tmp/validator_report_after.json
          cp /tmp/validator_report_after.json ./validator_report_after.json
          echo "Temp copy validator completed"

      - name: Compute Multi-Rep/XRef reduction and summarize
        run: |
          python3 - <<'PY'
          import json
          import sys

          try:
              with open('validator_report_before.json') as f:
                  b = json.load(f)
              with open('validator_report_after.json') as f:
                  a = json.load(f)

              def scoped_count(rep):
                  return len([f for f in rep.get("impacted_files", {}).get("multirep", []) if "000_core" in f])

              before, after = scoped_count(b), scoped_count(a)
              reduction = 0 if before == 0 else round((before - after) / before * 100, 1)

              print("## Multi-Rep/XRef Reduction (000_core)")
              print(f"- Before: {before}")
              print(f"- After:  {after}")
              print(f"- Reduction: {reduction}%")

              # Check if reduction meets threshold
              if reduction >= 50:
                  print(f"✅ SUCCESS: {reduction}% reduction meets ≥50% threshold")
                  sys.exit(0)
              else:
                  print(f"❌ FAILURE: {reduction}% reduction below ≥50% threshold")
                  sys.exit(1)

          except Exception as e:
              print(f"❌ ERROR: Could not compute reduction: {e}")
              sys.exit(1)
          PY

      - name: Run XRef scanner (dry-run) and upload report
        run: |
          python3 scripts/xref_apply.py --scope 000_core --dry-run --output artifacts/xref_report.json
          echo "XRef report generated"

      - name: Upload XRef report artifact
        uses: actions/upload-artifact@v4
        with:
          name: xref-report
          path: artifacts/xref_report.json

      - name: Upload validator reports
        uses: actions/upload-artifact@v4
        with:
          name: validator-reports
          path: |
            validator_report_before.json
            validator_report_after.json

      - name: Job Summary
        run: |
          echo "## XRef Temp-Copy Proof Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add reduction summary
          python3 - <<'PY' >> $GITHUB_STEP_SUMMARY
          import json
          try:
              with open('validator_report_before.json') as f:
                  b = json.load(f)
              with open('validator_report_after.json') as f:
                  a = json.load(f)

              def scoped_count(rep):
                  return len([f for f in rep.get("impacted_files", {}).get("multirep", []) if "000_core" in f])

              before, after = scoped_count(b), scoped_count(a)
              reduction = 0 if before == 0 else round((before - after) / before * 100, 1)

              print(f"- **Multi-Rep/XRef Reduction**: {reduction}% ({before} → {after})")
              print(f"- **Status**: {'✅ PASS' if reduction >= 50 else '❌ FAIL'}")
          except Exception as e:
              print(f"- **Error**: {e}")
          PY

          # Add XRef report summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## XRef Scanner Results" >> $GITHUB_STEP_SUMMARY
          python3 - <<'PY' >> $GITHUB_STEP_SUMMARY
          import json
          try:
              with open('artifacts/xref_report.json') as f:
                  report = json.load(f)

              print(f"- **Files Scanned**: {report.get('total_files', 0)}")
              print(f"- **Files with Suggestions**: {report.get('files_with_suggestions', 0)}")
              print(f"- **Total Suggestions**: {report.get('total_suggestions', 0)}")
              print(f"- **High Confidence**: {report.get('totals', {}).get('high_confidence', 0)}")
              print(f"- **Low Confidence**: {report.get('totals', {}).get('low_confidence', 0)}")

              # Show top files with suggestions
              per_file = report.get('per_file_suggestions', {})
              if per_file:
                  print("")
                  print("**Top Files with Suggestions:**")
                  for file_path, suggestions in sorted(per_file.items(), key=lambda x: len(x[1]), reverse=True)[:5]:
                      print(f"- `{file_path}`: {len(suggestions)} suggestions")
          except Exception as e:
              print(f"- **Error**: {e}")
          PY
