# Recall-Optimized Configuration (backend-agnostic)
# Purpose: Improve recall while preserving precision safeguards.
# Usage examples:
#   - As explicit env file:
#       uv run python scripts/ragchecker_official_evaluation.py --env-file configs/recall_optimized.env --use-bedrock --stable
#   - With local LLM:
#       uv run python scripts/ragchecker_official_evaluation.py --env-file configs/recall_optimized.env --use-local-llm --stable

# Enable coverage-first behavior and JSON utilities (extraction/judging)
export RAGCHECKER_COVERAGE_REWRITE=1
export RAGCHECKER_JSON_PROMPTS=1
export RAGCHECKER_JSON_MAX_TOKENS=900

# Provide more context to generator and judge
export RAGCHECKER_CONTEXT_TOPK=12
export RAGCHECKER_EXTRACTIVE_CTX_TOPK=8
export RAGCHECKER_EXTRACTIVE_TOPK=7
export RAGCHECKER_JUDGE_CONTEXT_TOPK=8

# Evidence selection tuned for recall (target_k with protective limits)
export RAGCHECKER_EVIDENCE_KEEP_MODE=target_k
export RAGCHECKER_TARGET_K_WEAK=4
export RAGCHECKER_TARGET_K_BASE=7
export RAGCHECKER_TARGET_K_STRONG=11
export RAGCHECKER_EVIDENCE_MIN_SENT=2
export RAGCHECKER_EVIDENCE_MAX_SENT=11

# Slightly relaxed signal deltas and guard thresholds (still conservative)
export RAGCHECKER_SIGNAL_DELTA_WEAK=0.05
export RAGCHECKER_SIGNAL_DELTA_STRONG=0.15
export RAGCHECKER_EVIDENCE_GUARD=1
export RAGCHECKER_EVIDENCE_JACCARD=0.12
export RAGCHECKER_EVIDENCE_COVERAGE=0.30

# Note: Bedrock-specific pacing (RPS/concurrency) lives in recall_optimized_bedrock.env.
# This preset is backend-agnostic and can be used with local LLMs or Bedrock.


