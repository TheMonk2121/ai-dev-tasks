# Simplified pre-commit hooks for fast validation
# All hooks optimized for <1 second execution time
# Re-enabled for development with optimized performance
repos:
  - repo: local
    hooks:
      - id: conflict-check
        name: Conflict Check
        entry: bash -c 'git grep -nE "^(<<<<<<< |======= |>>>>>>> )" "$@" || exit 0'
        language: system
        files: \.(md|py|txt|sh|yaml|yml|json)$
        pass_filenames: true
        description: "Check for merge conflicts using simple git grep"

      - id: pyright-type-check
        name: Pyright Type Check
        entry: pyright
        language: system
        files: \.py$
        pass_filenames: false
        description: "Run Pyright type checking on Python files"

      - id: bandit-security-scan
        name: Bandit Security Scan
        entry: bandit
        language: system
        files: \.py$
        pass_filenames: true
        description: "Run Bandit security scanning on staged Python files only"

      - id: markdown-validation
        name: Markdown Validation
        entry: bash scripts/simple_doc_validation.sh
        language: system
        files: \.md$
        pass_filenames: false
        description: "Validate markdown files for basic structure and broken links"

      - id: timestamp-update
        name: Auto Update Documentation Timestamps
        entry: python3 scripts/auto_update_timestamps.py
        language: system
        files: \.md$
        pass_filenames: false
        description: "Automatically update Last Updated timestamps in documentation files"

      - id: branch-name-check
        name: Branch name policy
        entry: bash scripts/check_branch_name.sh
        language: system
        pass_filenames: false
        stages: [commit]
        description: "Ensure branch name matches policy: main or type/B-####-short-slug"

      - id: no-branches-without-permission
        name: No branches without explicit permission
        entry: bash scripts/check_branch_permission.sh
        language: system
        pass_filenames: false
        stages: [commit]
        description: "Prevent commits on non-main branches without explicit permission"

      - id: ensure-venv-active
        name: Ensure venv is active
        entry: bash
        args: ["-c", "if [ -z \"$VIRTUAL_ENV\" ] || [[ \"$VIRTUAL_ENV\" != */venv ]]; then echo 'Virtual environment not active. Run: source venv/bin/activate'; exit 1; fi"]
        language: system
        pass_filenames: false
        stages: [commit]
        description: "Prevent commits outside the repository virtual environment"

  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.30.0
    hooks:
      - id: commitizen
        stages: [commit-msg]
        additional_dependencies: []
      # Temporarily disabled due to import issues
      # - id: database-sync-check
      #   name: Database Synchronization Check
      #   entry: python3 scripts/database_sync_check.py
      #   language: system
      #   files: \.(md|txt|py)$
      #   pass_filenames: false
      #   description: "Check if files with DATABASE_SYNC tags are current in database"

      # Temporarily disabled due to hanging issues
      # - id: markdown-validation
      #   name: Markdown Validation
      #   entry: bash scripts/simple_doc_validation.sh
      #   language: system
      #   files: \.md$
      #   pass_filenames: false
      #   description: "Validate markdown files for basic structure and broken links"

      # Temporarily disabled due to hanging issues
      # - id: conflict-check
      #   name: Conflict Check
      #   entry: git grep -nE "^(<<<<<<< |======= |>>>>>>> )"
      #   language: system
      #   pass_filenames: false
      #   description: "Check for merge conflicts using simple git grep"

      # Temporarily disabled due to hanging issues
      # - id: timestamp-update
      #   name: Auto Update Documentation Timestamps
      #   entry: python3 scripts/auto_update_timestamps.py
      #   language: system
      #   files: \.md$
      #   pass_filenames: false
      #   description: "Automatically update Last Updated timestamps in documentation files"

      # Temporarily disabled due to hanging issues
      # - id: pyright-type-check
      #   name: Pyright Type Check
      #   entry: pyright
      #   language: system
      #   files: \.py$
      #   pass_filenames: false
      #   description: "Run Pyright type checking on Python files"

      # Temporarily disabled due to hanging issues
      # - id: bandit-security-scan
      #   name: Bandit Security Scan
      #   entry: bandit
      #   language: system
      #   files: \.py$
      #   pass_filenames: true
      #   description: "Run Bandit security scanning on staged Python files only"
