from __future__ import annotations

import argparse
import glob
import json
import os
import shutil
import subprocess
from datetime import datetime
from pathlib import Path

#!/usr/bin/env python3
"""
Run official RAGChecker evaluation in Bedrock-only, cache-off mode, and export artifacts
"""


def _latest_eval_file(pattern: str) -> str | None:
    files = glob.glob(pattern)
    if not files:
        return None
    return max(files, key=os.path.getctime)


def main() -> int:
    parser = argparse.ArgumentParser(description="Run Bedrock-only eval and export artifacts (cache-off)")
    parser.add_argument(
        "--output-root",
        default="metrics/baseline_evaluations",
        help="Root directory for evaluation artifacts",
    )
    parser.add_argument(
        "--tag",
        default="B-1059",
        help="Tag to include in the artifact directory name",
    )
    args = parser.parse_args()

    output_root = Path(args.output_root)
    output_root.mkdir(parents=True, exist_ok=True)

    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    run_dir = output_root / args.tag / ts
    run_dir.mkdir(parents=True, exist_ok=True)

    # Enforce eval hygiene via env signals
    os.environ
    os.environ

    # Run official evaluation with Bedrock only
    cmd = ["python3", "scripts/ragchecker_official_evaluation.py", "--use-bedrock"]
    proc = subprocess.run(cmd, capture_output=True, text=True)
    print(proc.stdout)
    if proc.returncode != 0:
        print(proc.stderr)
        return proc.returncode

    # Locate latest evaluation JSON produced by the official script
    latest = _latest_eval_file(str(output_root / "ragchecker_official_evaluation_*.json"))
    if latest:
        shutil.copy2(latest, run_dir / Path(latest).name)

        # Also write a small manifest with run metadata
        manifest = {
            "tag": args.tag,
            "timestamp": ts,
            "eval_file": Path(latest).name,
            "env": {
                "EVAL_MODE": os.environ.get("EVAL_MODE", "development"),
                "CACHE_DISABLED": os.environ.get("CACHE_DISABLED", "false"),
                "AWS_REGION": os.environ.get("AWS_REGION", "us-east-1")
            },
        }
        with open(run_dir / "manifest.json", "w") as f:
            json.dump(manifest, f, indent=2)

    # Copy report if generated by CI step or local wrapper
    if Path("RAGCHECKER_EVALUATION_REPORT.md").exists():
        shutil.copy2(
            "RAGCHECKER_EVALUATION_REPORT.md",
            run_dir / "RAGCHECKER_EVALUATION_REPORT.md",
        )

    print(f"âœ… Artifacts written to: {run_dir}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
