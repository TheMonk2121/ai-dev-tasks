#!/usr/bin/env python3
"""
Compute the transitive reverse-dependency (blast radius) for given files.

Usage:
    python scripts/blast_radius.py path/to/file.py [more/files.py] [--graph metrics/visualizations/import_graph.json] [--json]

Requires the graph generated by scripts/code_map.py.
"""
from __future__ import annotations

import argparse
import json
from collections import deque
from pathlib import Path


def load_graph(graph_path: Path) -> dict:
    data = json.loads(graph_path.read_text(encoding="utf-8"))
    # Build reverse-adjacency
    rev: dict[str, set[str]] = {}
    for node in data.get("nodes", []):
        nid = node.get("id")
        if nid is not None:
            rev.setdefault(nid, set())
    for e in data.get("edges", []):
        src = e.get("source")
        tgt = e.get("target")
        if src and tgt:
            rev.setdefault(tgt, set()).add(src)
            rev.setdefault(src, set())  # ensure key exists
    return {"graph": data, "reverse": rev}


def transitive_dependents(reverse: dict[str, set[str]], seeds: list[str]) -> set[str]:
    visited: set[str] = set()
    q: deque[str] = deque()
    for s in seeds:
        if s in reverse:
            q.append(s)
            visited.add(s)
    result: set[str] = set()
    while q:
        cur = q.popleft()
        for dep in reverse.get(cur, set()):
            if dep not in visited:
                visited.add(dep)
                result.add(dep)
                q.append(dep)
    # exclude the seeds themselves from results
    return result - set(seeds)


def main() -> None:
    parser = argparse.ArgumentParser(description="Blast radius analysis")
    parser.add_argument("paths", nargs="+", help="Seed file paths relative to repo root")
    parser.add_argument("--graph", default="metrics/visualizations/import_graph.json", help="Path to import graph JSON")
    parser.add_argument("--json", action="store_true", help="Output JSON only")
    args = parser.parse_args()

    graph_path = Path(args.graph)
    if not graph_path.exists():
        raise SystemExit(f"Graph not found: {graph_path}. Run scripts/code_map.py first.")

    data = load_graph(graph_path)
    reverse = data["reverse"]

    # normalize provided paths
    seeds = []
    for p in args.paths:
        rp = str(Path(p))
        seeds.append(rp)

    impacted = sorted(transitive_dependents(reverse, seeds))
    tests = sorted(
        [p for p in impacted if "/tests/" in p or p.startswith("tests/") or Path(p).name.startswith("test_")]
    )

    summary = {
        "seeds": seeds,
        "impacted_count": len(impacted),
        "impacted": impacted,
        "impacted_tests_count": len(tests),
        "impacted_tests": tests,
    }

    if args.json:
        print(json.dumps(summary, indent=2))
    else:
        print("Seeds:")
        for s in seeds:
            print(f"  - {s}")
        print(f"\nImpacted files (transitive dependents): {len(impacted)}")
        for f in impacted[:200]:
            print(f"  - {f}")
        if len(impacted) > 200:
            print(f"  ... (+{len(impacted)-200} more)")
        print(f"\nImpacted tests: {len(tests)}")
        for t in tests:
            print(f"  - {t}")


if __name__ == "__main__":
    main()
