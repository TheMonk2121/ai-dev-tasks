[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-dev-tasks"
version = "0.1.0"
description = "AI Development Tasks Ecosystem"
requires-python = ">=3.12"
dependencies = [
    # Core system dependencies
    "psutil>=5.9.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    # Data processing and analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    # Documentation and validation
    "markdown>=3.4.0",
    "pydantic>=2.0.0",
    # DSPy RAG System dependencies
    "dspy==3.0.1",
    "sentence-transformers>=5.0.0",
    "huggingface-hub>=0.30.0",
    "tiktoken>=0.7.0",
    # Neural network and deep learning (pin compatible Linux wheels for full suite)
    "torch==2.3.1",
    "torchvision==0.18.1",
    # Database dependencies
    "pgvector==0.2.4",
    "psycopg[binary]>=3.1.0",
    # Document processing
    "PyMuPDF==1.23.8",
    # Web framework and real-time communication
    "flask==2.3.3",
    "flask-socketio==5.3.6",
    "python-socketio==5.8.0",
    "werkzeug>=2.3.0",
    # HTTP and networking
    "requests>=2.31.0",
    "urllib3>=2.0.0",
    # File system and process management
    "watchdog==3.0.0",
    # Security and auditing
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    # Additional utilities
    "keyring>=24.0.0",
    # OpenTelemetry for production monitoring
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
    "opentelemetry-instrumentation-requests>=0.40b0",
    "opentelemetry-instrumentation-flask>=0.40b0",
    "opentelemetry-instrumentation-logging>=0.40b0",
    # Conflict detection tools
    "pycycle>=0.0.8",
    "pipdeptree>=2.0.0",
    # Code quality tools (moved to dev dependencies)
    # Development tools (moved to dev dependencies)
    # Performance monitoring (moved to dev dependencies)
    # Advanced analysis (moved to dev dependencies)
    "boto3>=1.40.25",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "coverage>=7.10.6",
    "jinja2>=3.1.6",
    "logfire[fastapi,sqlalchemy]>=4.4.0",
    "websockets>=12.0",
    # Explicit fastapi pin for clarity (logfire includes it)
    "fastapi>=0.111.0",
    "pydantic-settings>=2.0.0",
    "pydantic-ai>=0.0.17",
    "pydantic-evals>=1.0.2",
    "httpx>=0.27",
    "psycopg[binary,pool]>=3.2",
    "pydantic-graph>=0.2",
    "opentelemetry-instrumentation-botocore>=0.57b0",
    "opentelemetry-instrumentation-jinja2>=0.57b0",
    "opentelemetry-instrumentation-psycopg>=0.57b0",
    "opentelemetry-instrumentation-sqlite3>=0.57b0",
    "opentelemetry-instrumentation-urllib>=0.57b0",
    "hypothesis>=6.135.24,<6.140.0",
    "asyncpg>=0.30.0",
    "openai>=1.107.1",
]

[project.optional-dependencies]
test = ["spacy>=3.7.0"]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-randomly>=3.15.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.0",
    "radon>=5.1.0",
    "mccabe>=0.7.0",
    "commitizen>=3.12.0",
    "typer>=0.12.0",
    "tqdm>=4.66.0",
    "datasketch>=1.6.5",
    # Type stubs for better IDE support and type checking
    "types-requests>=2.31.0",
    "types-flask>=1.1.6",
    "types-boto3>=1.40.29",
    "types-tqdm>=4.67.0",
    "types-jinja2>=2.11.9",
    "types-pyyaml>=6.0.12",
    "types-setuptools>=80.9.0",
    "types-urllib3>=1.26.25",
    # Additional development tools
    "mypy>=1.18.1",
    "pyupgrade>=3.20.0",
    "vulture>=2.14",
]
security = ["bandit>=1.7.5", "safety>=2.3.0", "pip-audit>=2.6.0"]
ml = [
    "dspy==3.0.1",
    "sentence-transformers>=5.0.0",
    "huggingface-hub>=0.30.0",
    "tiktoken>=0.7.0",
    "torch==2.3.1",
    "torchvision==0.18.1",
]


[tool.black]
line-length = 120
target-version = ["py312"]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [
    "venv",
    "600_archives",
    "docs/legacy",
    "**/__pycache__",
    "dspy-rag-system/**",
]

[tool.ruff.lint]
# Minimal set of critical checks
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
]

ignore = [
    "E501", # Line too long - handled by black
    "E402", # Module level import not at top of file
    "E722", # Do not use bare except
    "F401", # Imported but unused
    "F841", # Local variable assigned but never used
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",
    "ANN",
] # Allow assert in tests, relax annotation rules

[tool.pytest.ini_options]
# Add src directory to Python path for proper module resolution
pythonpath = ["src"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "smoke: Smoke tests",
    "tier1: Tier 1 critical tests",
    "tier2: Tier 2 high priority tests",
    "tier3: Tier 3 supporting tests",
    "slow: Slow running tests",
    "fast: Fast running tests",
    "deprecated: Deprecated tests (do not run)",
    "asyncio: Async tests",
    "legacy: quarantined tests (nightly only)",
    "critical: must-run on every PR",
    "flaky: known to be flaky",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Explicitly exclude archived tests and problematic files
norecursedirs = [
    "600_archives",
    "testing",
    "venv",
    "docs/legacy",
    "__pycache__",
    "tests/legacy",
    "dspy-rag-system",
    ".dspy_cache",
]
# Exclude specific problematic files that cause Torch conflicts
# Use importlib mode for proper module loading (Strategy #6)
addopts = "--import-mode=importlib --ignore=dspy-rag-system/baseline_rag_performance_test.py --ignore=dspy-rag-system/complex_test.py --ignore=dspy-rag-system/simple_test.py --ignore=dspy-rag-system/quality_comparison_test.py --ignore=dspy-rag-system/tests/"

# Exclude legacy duplicates that conflict with demo tests
[tool.basedpyright]
include = ["scripts", "tests", "src", "evals_bundle_test"]
exclude = [
    "venv",
    "600_archives",
    "docs/legacy",
    "**/__pycache__",
    "scripts/eval",
    "dspy-rag-system",
]
pythonVersion = "3.12"
pythonPlatform = "Darwin"
extraPaths = ["scripts", "src", "evals_bundle_test/src"]
venvPath = "."
venv = ".venv"

# Minimal type checking - relaxed for UV environment
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportOptionalMemberAccess = "none"
reportMissingImports = "warning"
reportAssignmentType = "none"
reportPossiblyUnboundVariable = "none"
reportExplicitAny = "none"
reportAny = "none"
reportUntypedBaseClass = "none"
reportGeneralTypeIssues = "warning"

# Suppress type stub errors
reportIncompatibleVariableOverride = false
reportIncompatibleMethodOverride = false
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.0"
tag_format = "v$version"
update_changelog_on_bump = true
allow_unconventional_commits = true

[tool.commitizen.customize]
allowed_types = [
    "feat",
    "fix",
    "refactor",
    "docs",
    "chore",
    "ci",
    "test",
    "build",
    "bump",
    "perf",
    "revert",
    "style",
    "merge",
]
message_template = "{type}{scope}: {subject}\n\n{body}\n\n{footer}"

[tool.uv]
# UV configuration for virtual environment management
# Python version is specified in .python-version file
# Prevent automatic venv creation unless explicitly needed
# no-project-environment = true  # Uncomment to disable auto-venv creation
# venv-seed = []  # Don't install pip/setuptools/wheel by default

[tool.codespell]
skip = "600_archives/**,.hypothesis/**,artifacts/**,000_core/**,100_memory/**,200_setup/**,testing/**,400_guides/**,500_research/**,PRD-* ,Task-List-* ,300_evals/datasets/**,docs/**,dashboard/**"

[dependency-groups]
dev = ["basedpyright>=1.31.5"]
