[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-dev-tasks"
version = "0.1.0"
description = "AI Development Tasks Ecosystem"
requires-python = ">=3.12"
dependencies = [
    # Core system dependencies
    "psutil>=5.9.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    # Data processing and analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    # Documentation and validation
    "markdown>=3.4.0",
    "pydantic>=2.0.0",
    # DSPy RAG System dependencies
    "dspy==3.0.1",
    "sentence-transformers>=5.0.0",
    "huggingface-hub>=0.30.0",
    "tiktoken>=0.7.0",
    # Neural network and deep learning (pin compatible Linux wheels for full suite)
    "torch==2.3.1",
    "torchvision==0.18.1",
    # Database dependencies
    "psycopg2-binary==2.9.7",
    "pgvector==0.2.4",
    # Document processing
    "PyMuPDF==1.23.8",
    # Web framework and real-time communication
    "flask==2.3.3",
    "flask-socketio==5.3.6",
    "python-socketio==5.8.0",
    "werkzeug>=2.3.0",
    # HTTP and networking
    "requests>=2.31.0",
    "urllib3>=2.0.0",
    # File system and process management
    "watchdog==3.0.0",
    # Security and auditing
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    # Additional utilities
    "keyring>=24.0.0",
    # OpenTelemetry for production monitoring
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
    "opentelemetry-instrumentation-requests>=0.40b0",
    "opentelemetry-instrumentation-flask>=0.40b0",
    "opentelemetry-instrumentation-logging>=0.40b0",
    # Conflict detection tools
    "pycycle>=0.0.8",
    "pipdeptree>=2.0.0",
    # Code quality tools
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    # Development tools
    "pre-commit>=3.0.0",
    # Performance monitoring
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.0",
    # Advanced analysis
    "radon>=5.1.0",
    "mccabe>=0.7.0",
    "boto3>=1.40.25",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "coverage>=7.10.6",
    "jinja2>=3.1.6",
    "logfire[fastapi,sqlalchemy]>=4.4.0",
    "websockets>=12.0",
    # Explicit fastapi pin for clarity (logfire includes it)
    "fastapi>=0.111.0",
]

[project.optional-dependencies]
test = ["ragchecker>=0.1.0", "spacy>=3.7.0"]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.0",
    "radon>=5.1.0",
    "mccabe>=0.7.0",
]
security = ["bandit>=1.7.5", "safety>=2.3.0", "pip-audit>=2.6.0"]
ml = [
    "dspy==3.0.1",
    "sentence-transformers>=5.0.0",
    "huggingface-hub>=0.30.0",
    "tiktoken>=0.7.0",
    "torch==2.3.1",
    "torchvision==0.18.1",
]


[tool.black]
line-length = 120
target-version = ["py312"]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [
    "venv",
    "600_archives",
    "docs/legacy",
    "**/__pycache__",
    "dspy-rag-system/**", # Exclude entire dspy-rag-system for migration
]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = [
    "E501", # Line too long - handled by black
    "E402", # Module level import not at top of file - common in scripts
    "E722", # Do not use bare except - common in error handling
    "F401", # Imported but unused - common in conditional imports
    "F841", # Local variable assigned but never used - common in test code
    "F821", # Undefined name - common in conditional code
    "F402", # Import shadowed by loop variable - minor issue
    "E741", # Ambiguous variable name - minor issue
]

[tool.pytest.ini_options]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "smoke: Smoke tests",
    "tier1: Tier 1 critical tests",
    "tier2: Tier 2 high priority tests",
    "tier3: Tier 3 supporting tests",
    "slow: Slow running tests",
    "fast: Fast running tests",
    "deprecated: Deprecated tests (do not run)",
]
testpaths = ["tests", "dspy-rag-system/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Explicitly exclude archived tests and problematic files
norecursedirs = [
    "600_archives",
    "venv",
    "docs/legacy",
    "__pycache__",
    "tests/legacy",
]
# Exclude specific problematic files that cause Torch conflicts
addopts = "--ignore=dspy-rag-system/baseline_rag_performance_test.py --ignore=dspy-rag-system/complex_test.py --ignore=dspy-rag-system/simple_test.py --ignore=dspy-rag-system/quality_comparison_test.py"

# Exclude legacy duplicates that conflict with demo tests
[tool.pyright]
include = ["scripts", "tests", "dspy-rag-system"]
exclude = [
    "venv",
    "600_archives",
    "docs/legacy",
    "**/__pycache__",
    "scripts/eval",
]
pythonVersion = "3.12"
pythonPlatform = "Darwin"
extraPaths = ["scripts"]
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportOptionalMemberAccess = "none"
reportMissingImports = "none"
reportAssignmentType = "none"
reportPossiblyUnboundVariable = "none"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.0"
tag_format = "v$version"
update_changelog_on_bump = true
allow_unconventional_commits = false

[tool.commitizen.customize]
allowed_types = ["feat", "fix", "refactor", "docs", "chore", "ci", "test"]
message_template = "{type}{scope}: {subject}\n\n{body}\n\n{footer}"
