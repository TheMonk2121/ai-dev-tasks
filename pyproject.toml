[tool.ruff]
line-length = 100
target-version = "py311"
exclude = ["venv", ".venv", "build", "dist", ".eggs", "**/__pycache__"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "C4", "SIM", "PT", "RUF"]
# Unicode safety (homoglyphs + bidi controls)
extend-select = ["RUF001", "RUF002", "RUF003", "PLE2502"]
# Optional: police stray noqa comments
# extend-select = ["RUF100"]
ignore = ["E203", "E501"]

[tool.ruff.format]
preview = false
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-dev-tasks"
version = "0.1.0"
description = "AI Development Tasks and Testing Framework"
authors = [{ name = "Daniel Jacobs", email = "daniel@example.com" }]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "psycopg2-binary>=2.9.0",
    "pyyaml>=6.0.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = ["black>=22.0.0", "ruff>=0.1.0", "mypy>=1.0.0", "bandit>=1.7.0"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
markers = [
    # Tier markers for test criticality
    "tier1: Critical tests (must pass)",
    "tier2: High priority tests",
    "tier3: Supporting tests",
    # Kind markers for test types
    "kind_unit: Unit tests",
    "kind_integration: Integration tests",
    "kind_e2e: End-to-end tests",
    "kind_smoke: Smoke tests",
    "kind_performance: Performance tests",
    "kind_security: Security tests",
    "kind_property: Property-based tests",
    "kind_prompt: Prompt contract tests",
    # Governance markers for validator testing
    "governance: Governance system tests",
    "archive: Archive immutability tests",
    "xref: Cross-reference validation tests",
    "linkcheck: Link validation tests",
    "slow: Slow-running tests",
    "e2e: End-to-end tests",
]

[tool.coverage.run]
source = ["src", "scripts"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
