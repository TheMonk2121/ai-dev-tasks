---
repos:
  - repo: local
    hooks:
      - id: json-syntax-check
        name: JSON Syntax Check
        entry: python -m json.tool
        language: system
        files: \\.json$
        pass_filenames: true
        stages:
          - pre-commit
      - id: conflict-check
        name: Conflict Check
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - -c
          - git grep -nE '^(<<<<<<< |======= |>>>>>>> )' || exit 0
        language: system
        files: \.(md|py|txt|sh|yaml|yml|json)$
        pass_filenames: false
        description: Check for merge conflicts using simple git grep
      - id: bandit-security-scan
        name: Bandit Security Scan
        entry: bash scripts/hook_timer.sh
        args:
          - bandit
          - -q
          - --severity-level
          - medium
          - --exit-zero
        language: system
        files: \.py$
        pass_filenames: true
        description:
          Run Bandit on staged Python files using .bandit config with medium
          severity
      - id: markdown-validation
        name: Markdown Validation
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - scripts/simple_doc_validation.sh
        language: system
        files: \.md$
        pass_filenames: false
        description: |
          Validate markdown files for basic structure and broken links
      - id: timestamp-update
        name: Auto Update Documentation Timestamps
        entry: bash scripts/hook_timer.sh
        args:
          - uv
          - run
          - python
          - scripts/auto_update_timestamps.py
        language: system
        files: \.md$
        pass_filenames: false
        description: |
          Automatically update Last Updated timestamps in documentation files
      - id: branch-name-check
        name: Branch name policy
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - scripts/check_branch_name.sh
        language: system
        pass_filenames: false
        stages:
          - pre-commit
        description: |
          Ensure branch name matches policy: main or type/B-####-short-slug
      # - id: no-branches-without-permission
      #   name: No branches without explicit permission
      #   entry: bash scripts/hook_timer.sh
      #   args:
      #     - bash
      #     - scripts/check_branch_permission.sh
      #   language: system
      #   pass_filenames: false
      #   stages:
      #     - pre-commit
      #   description: Prevent commits on non-main branches without explicit
      #   permission
      - id: ensure-venv-active
        name: Ensure venv is active
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - -c
          - |
            if [ -z "$VIRTUAL_ENV" ] || \
               [[ "$VIRTUAL_ENV" != */.venv ]]; then
              echo "Virtual environment not active. Run: " \
                   "source .venv/bin/activate"
              exit 1
            fi
        language: system
        pass_filenames: false
        stages:
          - pre-commit
        description: Prevent commits outside the repository virtual environment
      - id: commit-message-line-length
        name: Commit Message Line Length Check
        entry: bash scripts/check_commit_message_length.sh
        language: system
        pass_filenames: true
        stages:
          - commit-msg
        description:
          Enforce GitHub commit message line length limits (50 chars subject,
          72 chars body)

      - id: baseline-check
        name: Baseline Metrics Check
        entry: bash scripts/hook_timer.sh
        args:
          - uv
          - run
          - python
          - scripts/check_baseline_metrics.py
        language: system
        pass_filenames: false
        stages:
          - pre-commit
        description:
          Check baseline metrics and warn about violations (soft gate until
          production-ready)
      - id: lessons-quality-check
        name: Lessons Quality Check
        entry: bash scripts/hook_timer.sh
        args:
          - uv
          - run
          - python
          - scripts/lessons_quality_check.py
        language: system
        pass_filenames: false
        stages:
          - pre-commit
        description: |
          Validate lessons JSONL, derived configs, and quality gates presence
      - id: uvx-tools-check
        name: UVX Tools Availability Check
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - scripts/uvx_tools.sh
        language: system
        pass_filenames: false
        stages:
          - manual
        description: Check availability of common UVX tools for development
      - id: evals-docs-generate
        name: Rebuild eval docs and block if stale (evals_300 only)
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - -c
          - >
            uv run python -m evals_300.tools.gen && \
            git diff --quiet -- evals_300/_generated ||
            (echo "Evals docs stale. Run gen." && exit 1)
        language: system
        pass_filenames: false
        files: |
          ^evals_300/(ssot/|tools/|ssot/templates/)|
          ^configs/evals_layers/|
          ^metrics/latest/metrics\.json$
        description: |
          Rebuild evaluation documentation when evals_300 sources or latest
          metrics change
      - id: forbid-manual-md
        name: Forbid manual edits to generated eval docs (evals_300)
        entry: bash scripts/hook_timer.sh
        args:
          - bash
          - -c
          - >
            git diff --cached --name-only | \
            grep -E "^evals_300/_generated/.*\\.md$" &&
            echo "Do not edit generated eval docs. Update evals_300/ssot or " \
                 "tools and regenerate." &&
            exit 1 || true
        language: system
        pass_filenames: false
        description: |
          Prevent manual editing of generated evaluation markdown under
          evals_300/_generated
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.30.0
    hooks:
      - id: commitizen
        stages:
          - commit-msg
        additional_dependencies: []
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: ShellCheck
        files: \.(sh|bash)$
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: v3.10.0-1
    hooks:
      - id: shfmt
        name: shfmt
        args: ["-i", "2", "-ci", "-sr"]
        files: \.(sh|bash)$
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        files: \.(yaml|yml)$

  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        additional_dependencies: []
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        args: ["-P", "pyproject.toml"]
        stages: ["manual"]
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]
        stages: ["manual"]
